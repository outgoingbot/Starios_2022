
Starios_2022_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  0800a9c0  0800a9c0  0001a9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3c0  0800b3c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3c0  0800b3c0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3c0  0800b3c0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3c0  0800b3c0  0001b3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3c4  0800b3c4  0001b3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b3c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  20000080  0800b448  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800b448  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f2b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4f  00000000  00000000  00032fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00035f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00037238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f5d  00000000  00000000  000383e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001705c  00000000  00000000  00052345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cc8  00000000  00000000  000693a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  000fd0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9a4 	.word	0x0800a9a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800a9a4 	.word	0x0800a9a4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <MX_ADC1_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_ADC1_Init+0x74>)
 8000aa2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_ADC1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_ADC1_Init+0x74>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_ADC1_Init+0x74>)
 8000ab6:	f002 fa31 	bl	8002f1c <HAL_ADC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f001 fbda 	bl	8002278 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_ADC1_Init+0x74>)
 8000ad6:	f002 fce5 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ae0:	f001 fbca 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000009c 	.word	0x2000009c
 8000af0:	40012400 	.word	0x40012400

08000af4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <MX_ADC2_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b1e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b22:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b32:	f002 f9f3 	bl	8002f1c <HAL_ADC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f001 fb9c 	bl	8002278 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b52:	f002 fca7 	bl	80034a4 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b5c:	f001 fb8c 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000cc 	.word	0x200000cc
 8000b6c:	40012800 	.word	0x40012800

08000b70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_ADC_MspInit+0xbc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d122      	bne.n	8000bd6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4819      	ldr	r0, [pc, #100]	; (8000c34 <HAL_ADC_MspInit+0xc4>)
 8000bd0:	f003 f97a 	bl	8003ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000bd4:	e026      	b.n	8000c24 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_ADC_MspInit+0xc8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d121      	bne.n	8000c24 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_ADC_MspInit+0xc4>)
 8000c20:	f003 f952 	bl	8003ec8 <HAL_GPIO_Init>
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40012400 	.word	0x40012400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40012800 	.word	0x40012800

08000c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_DMA_Init+0x48>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MX_DMA_Init+0x48>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6153      	str	r3, [r2, #20]
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_DMA_Init+0x48>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f002 fe8b 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f002 fea4 	bl	80039b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f002 fe83 	bl	800397a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c74:	2010      	movs	r0, #16
 8000c76:	f002 fe9c 	bl	80039b2 <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <MX_GPIO_Init+0x124>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a42      	ldr	r2, [pc, #264]	; (8000dac <MX_GPIO_Init+0x124>)
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b40      	ldr	r3, [pc, #256]	; (8000dac <MX_GPIO_Init+0x124>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0320 	and.w	r3, r3, #32
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a3c      	ldr	r2, [pc, #240]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a36      	ldr	r2, [pc, #216]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4831      	ldr	r0, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000cea:	f003 fa71 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4830      	ldr	r0, [pc, #192]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000cf4:	f003 fa6c 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000cfe:	482d      	ldr	r0, [pc, #180]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d00:	f003 fa66 	bl	80041d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d04:	2304      	movs	r3, #4
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4825      	ldr	r0, [pc, #148]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000d1c:	f003 f8d4 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d20:	2308      	movs	r3, #8
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000d34:	f003 f8c8 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8000d38:	f240 2302 	movw	r3, #514	; 0x202
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d52:	f003 f8b9 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d56:	2318      	movs	r3, #24
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d6a:	f003 f8ad 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d82:	f003 f8a1 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000da0:	f003 f892 	bl	8003ec8 <HAL_GPIO_Init>

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_I2C1_Init+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x58>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df6:	f003 fa03 	bl	8004200 <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f001 fa3a 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000fc 	.word	0x200000fc
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	00061a80 	.word	0x00061a80

08000e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ee0 <HAL_I2C_MspInit+0xcc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d151      	bne.n	8000ed8 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4c:	23c0      	movs	r3, #192	; 0xc0
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <HAL_I2C_MspInit+0xd4>)
 8000e60:	f003 f832 	bl	8003ec8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6e:	61d3      	str	r3, [r2, #28]
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_I2C_MspInit+0xdc>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e84:	2210      	movs	r2, #16
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000eae:	f002 fd9b 	bl	80039e8 <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000eb8:	f001 f9de 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	201f      	movs	r0, #31
 8000ece:	f002 fd54 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ed2:	201f      	movs	r0, #31
 8000ed4:	f002 fd6d 	bl	80039b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	20000150 	.word	0x20000150
 8000ef0:	4002006c 	.word	0x4002006c

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
  double signalFrequency = 1; //FFT testing using simulated sinwave
  #endif

  //PB1 CLK / (Prescaler*Count) = Freq
  //72E6/((P+1)*(COUNT+1)) = ISR rateHz
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  	updateFlag=1;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
  }
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	200012b4 	.word	0x200012b4

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 ff7b 	bl	8002e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f925 	bl	8001168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f7ff feb3 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f22:	f7ff fe8b 	bl	8000c3c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f26:	f7ff fda7 	bl	8000a78 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f7ff fde3 	bl	8000af4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000f2e:	f7ff ff43 	bl	8000db8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f32:	f001 f9a7 	bl	8002284 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000f36:	f001 fed1 	bl	8002cdc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //SETUP
      //Power INIT
    HAL_Delay(500); //wait .5 sec before power on. prevents false positives
 8000f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3e:	f001 ffc9 	bl	8002ed4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_SET);//SoftPower ON
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f48:	4874      	ldr	r0, [pc, #464]	; (800111c <main+0x20c>)
 8000f4a:	f003 f941 	bl	80041d0 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_RESET);//SoftPower OFF

    //REQUIRED to set all the end frame bytes to zero (50uS ws2812 reset)
    //use memset() below
    for (int x=(NUMLEDS*EXPANDFACTOR); x<(NUMLEDS*EXPANDFACTOR)+SPILOWTIME; x++) myData[x] = 0; //ToDo: replace with memset(). why not start at 0?
 8000f4e:	f44f 63bd 	mov.w	r3, #1512	; 0x5e8
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e007      	b.n	8000f66 <main+0x56>
 8000f56:	4a72      	ldr	r2, [pc, #456]	; (8001120 <main+0x210>)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f240 6205 	movw	r2, #1541	; 0x605
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	ddf2      	ble.n	8000f56 <main+0x46>
    for (int i=0; i<USEDBINS; i++){ //zeroing out a bunch of arrays
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	e03f      	b.n	8000ff6 <main+0xe6>
  	  MAGmax[i] = 0;
  	  MAGmin[i] = 32000;
  #else
  	  //MAGmax[i] = (int32_t)((fft_Db_MAX/2)+HOFFSET_SCALER);
  	  //MAGmin[i] = (int32_t)((fft_Db_MAX/2)-HOFFSET_SCALER);
  	  MAGmax[i] = 32.f; //think these should be played with. wait a few mins of SILENCE and breakpoint try 30.0f
 8000f76:	4a6b      	ldr	r2, [pc, #428]	; (8001124 <main+0x214>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	18d1      	adds	r1, r2, r3
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b69      	ldr	r3, [pc, #420]	; (8001128 <main+0x218>)
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]
  	  MAGmin[i] = 0.0f; //try 15.0f
 8000f88:	4a68      	ldr	r2, [pc, #416]	; (800112c <main+0x21c>)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	18d1      	adds	r1, r2, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	e9c1 2300 	strd	r2, r3, [r1]
  #endif
  	  MAGavg[i] = 0.f;
 8000f9c:	4a64      	ldr	r2, [pc, #400]	; (8001130 <main+0x220>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	18d1      	adds	r1, r2, r3
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	e9c1 2300 	strd	r2, r3, [r1]
  	  for(int k=0; k< F_WIDTH; k++) MAGbuff[i][k] = 0.0f;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e00f      	b.n	8000fd6 <main+0xc6>
 8000fb6:	495f      	ldr	r1, [pc, #380]	; (8001134 <main+0x224>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	00da      	lsls	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4419      	add	r1, r3
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	ddec      	ble.n	8000fb6 <main+0xa6>
  	  MAGbuffSum[i] = 0;
 8000fdc:	4a56      	ldr	r2, [pc, #344]	; (8001138 <main+0x228>)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	18d1      	adds	r1, r2, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i=0; i<USEDBINS; i++){ //zeroing out a bunch of arrays
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	ddbc      	ble.n	8000f76 <main+0x66>
    }


  //Oled Init and Boot
  while(!SSD1306_Init());  // initialize. blocking if OLED not detected
 8000ffc:	bf00      	nop
 8000ffe:	f001 fa49 	bl	8002494 <SSD1306_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0fa      	beq.n	8000ffe <main+0xee>
  SSD1306_DrawBitmap(0,0,Boot, 128, 32, 1); //boot splash screen
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	2320      	movs	r3, #32
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	4a4a      	ldr	r2, [pc, #296]	; (800113c <main+0x22c>)
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f001 f9d4 	bl	80023c4 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); //display
 800101c:	f001 fcd4 	bl	80029c8 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f001 ff56 	bl	8002ed4 <HAL_Delay>
  SSD1306_Clear(); //clear oled display buffer
 8001028:	f001 fcc6 	bl	80029b8 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 800102c:	f001 fccc 	bl	80029c8 <SSD1306_UpdateScreen>

  HAL_ADC_Start(&hadc1); //starts the adc configured in continuous mode (cubeMX)
 8001030:	4843      	ldr	r0, [pc, #268]	; (8001140 <main+0x230>)
 8001032:	f002 f84b 	bl	80030cc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); //start adc2 in continuous mode
 8001036:	4843      	ldr	r0, [pc, #268]	; (8001144 <main+0x234>)
 8001038:	f002 f848 	bl	80030cc <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3); //start Timer 3. used for FFT sampling
 800103c:	4842      	ldr	r0, [pc, #264]	; (8001148 <main+0x238>)
 800103e:	f006 fd59 	bl	8007af4 <HAL_TIM_Base_Start_IT>
  //HAL_Delay (500);

  //printStringWithShiftL(" STARIOS GEAR 2020   ", 10); //Send Lscrolling Text (send car array)
  BlankScreen(BLACK);
 8001042:	2000      	movs	r0, #0
 8001044:	f001 f838 	bl	80020b8 <BlankScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(updateFlag==1){ //30kHz Timer
 8001048:	4b40      	ldr	r3, [pc, #256]	; (800114c <main+0x23c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d13d      	bne.n	80010ce <main+0x1be>
			updateFlag = 0;
 8001052:	4b3e      	ldr	r3, [pc, #248]	; (800114c <main+0x23c>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
			if (!n_done){ //I need N ADC Samples
 8001058:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <main+0x240>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d136      	bne.n	80010ce <main+0x1be>
			double cycles = (((N-1) * signalFrequency) / samplingFrequency); //Number of signal cycles that the sampling will read
			REX[n_count] = ((amplitude * (sin((n_count * (twoPi * cycles)) / N))) / 2.0);/* Build data with positive and negative values*/
			IMX[n_count] = 0;
			//FFT testing using simulated sinwave
	#else
				REX[n_count] = (double) read_adc() - 2048 + CAL_OFFSET;//12bit ADC (just store this into the REX[i] array. no need to have the adc_value variable
 8001060:	f000 fc0e 	bl	8001880 <read_adc>
 8001064:	4603      	mov	r3, r0
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f9c4 	bl	80003f4 <__aeabi_i2d>
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <main+0x244>)
 8001072:	f7ff f871 	bl	8000158 <__aeabi_dsub>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	4b36      	ldr	r3, [pc, #216]	; (8001158 <main+0x248>)
 8001080:	681c      	ldr	r4, [r3, #0]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b35      	ldr	r3, [pc, #212]	; (800115c <main+0x24c>)
 8001088:	f7ff f868 	bl	800015c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <main+0x250>)
 8001092:	00e1      	lsls	r1, r4, #3
 8001094:	4401      	add	r1, r0
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
				IMX[n_count] = 0;
 800109a:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <main+0x248>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <main+0x254>)
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	18d1      	adds	r1, r2, r3
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
				#endif
				n_count++;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <main+0x248>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a28      	ldr	r2, [pc, #160]	; (8001158 <main+0x248>)
 80010b8:	6013      	str	r3, [r2, #0]
				if (n_count >= N){
 80010ba:	4b27      	ldr	r3, [pc, #156]	; (8001158 <main+0x248>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b3f      	cmp	r3, #63	; 0x3f
 80010c0:	dd05      	ble.n	80010ce <main+0x1be>
	#if SIMULATE
				  signalFrequency+=40;//FFT testing using simulated sinwave
				  if(signalFrequency>SAMPLE_FREQ/2) signalFrequency = 1; //FFT testing using simulated sinwave
	#endif
				n_done = 1;
 80010c2:	4b23      	ldr	r3, [pc, #140]	; (8001150 <main+0x240>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	701a      	strb	r2, [r3, #0]
				n_count = 0;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <main+0x248>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
			  }
			}
	    }
		if(n_done==1){
 80010ce:	4b20      	ldr	r3, [pc, #128]	; (8001150 <main+0x240>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d1b8      	bne.n	8001048 <main+0x138>
			memset(IMX,0,N*sizeof(double)); //zero out complex part before FFT
 80010d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010da:	2100      	movs	r1, #0
 80010dc:	4821      	ldr	r0, [pc, #132]	; (8001164 <main+0x254>)
 80010de:	f008 fc1b 	bl	8009918 <memset>
			Windowing(REX, N, FFT_WIN_TYP_HANN, FFT_FORWARD);		//HANN	//Apply Window the the ADC data
 80010e2:	2301      	movs	r3, #1
 80010e4:	2202      	movs	r2, #2
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	481d      	ldr	r0, [pc, #116]	; (8001160 <main+0x250>)
 80010ea:	f000 fac5 	bl	8001678 <Windowing>
			ComputeFFT(REX, IMX, N, Exponent(N),FFT_FORWARD); 	//perform the exponent in setup to optimize
 80010ee:	2040      	movs	r0, #64	; 0x40
 80010f0:	f000 fa8e 	bl	8001610 <Exponent>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	2301      	movs	r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	2240      	movs	r2, #64	; 0x40
 8001100:	4918      	ldr	r1, [pc, #96]	; (8001164 <main+0x254>)
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <main+0x250>)
 8001104:	f000 f88c 	bl	8001220 <ComputeFFT>
			getMAG(); // compute the magnitude of 16 FFT samples
 8001108:	f000 fbd6 	bl	80018b8 <getMAG>
			adjustVals(); //autoscaling. max sensing
 800110c:	f000 fc4c 	bl	80019a8 <adjustVals>
			graphMAG(); //graph the complex magnitudes on the oled and RGB Display
 8001110:	f000 fe9e 	bl	8001e50 <graphMAG>
			n_done = 0;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <main+0x240>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
		if(updateFlag==1){ //30kHz Timer
 800111a:	e795      	b.n	8001048 <main+0x138>
 800111c:	40010c00 	.word	0x40010c00
 8001120:	20000194 	.word	0x20000194
 8001124:	20000c30 	.word	0x20000c30
 8001128:	40400000 	.word	0x40400000
 800112c:	20000cb0 	.word	0x20000cb0
 8001130:	20000d30 	.word	0x20000d30
 8001134:	20000db0 	.word	0x20000db0
 8001138:	200011b0 	.word	0x200011b0
 800113c:	0800ae88 	.word	0x0800ae88
 8001140:	2000009c 	.word	0x2000009c
 8001144:	200000cc 	.word	0x200000cc
 8001148:	20001568 	.word	0x20001568
 800114c:	200012b4 	.word	0x200012b4
 8001150:	200007a8 	.word	0x200007a8
 8001154:	40a00000 	.word	0x40a00000
 8001158:	200007a4 	.word	0x200007a4
 800115c:	40518000 	.word	0x40518000
 8001160:	200007b0 	.word	0x200007b0
 8001164:	200009b0 	.word	0x200009b0

08001168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b094      	sub	sp, #80	; 0x50
 800116c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001172:	2228      	movs	r2, #40	; 0x28
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f008 fbce 	bl	8009918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001198:	2301      	movs	r3, #1
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a6:	2301      	movs	r3, #1
 80011a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011aa:	2302      	movs	r3, #2
 80011ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fc3c 	bl	8006a3c <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011ca:	f001 f855 	bl	8002278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2102      	movs	r1, #2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 fea8 	bl	8006f40 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011f6:	f001 f83f 	bl	8002278 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011fa:	2302      	movs	r3, #2
 80011fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001202:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4618      	mov	r0, r3
 8001208:	f006 f832 	bl	8007270 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001212:	f001 f831 	bl	8002278 <Error_Handler>
  }
}
 8001216:	bf00      	nop
 8001218:	3750      	adds	r7, #80	; 0x50
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <ComputeFFT>:
	}
}

////////////////////////////////////////////////////////////////////////////////START FFt Lib functions
void ComputeFFT(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{	// Computes in-place complex-to-complex FFT
 8001220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001224:	b09b      	sub	sp, #108	; 0x6c
 8001226:	af00      	add	r7, sp, #0
 8001228:	60f8      	str	r0, [r7, #12]
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	4611      	mov	r1, r2
 800122e:	461a      	mov	r2, r3
 8001230:	460b      	mov	r3, r1
 8001232:	80fb      	strh	r3, [r7, #6]
 8001234:	4613      	mov	r3, r2
 8001236:	717b      	strb	r3, [r7, #5]
	// Reverse bits
	uint16_t j = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	for (uint16_t i = 0; i < (samples - 1); i++) {
 800123e:	2300      	movs	r3, #0
 8001240:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001244:	e046      	b.n	80012d4 <ComputeFFT+0xb4>
		if (i < j) {
 8001246:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800124a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800124e:	429a      	cmp	r2, r3
 8001250:	d21d      	bcs.n	800128e <ComputeFFT+0x6e>
			Swap(&vReal[i], &vReal[j]);
 8001252:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	18d0      	adds	r0, r2, r3
 800125c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f000 f9eb 	bl	8001642 <Swap>
			if(dir==FFT_REVERSE)
 800126c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10c      	bne.n	800128e <ComputeFFT+0x6e>
				Swap(&vImag[i], &vImag[j]);
 8001274:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	18d0      	adds	r0, r2, r3
 800127e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	4413      	add	r3, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f000 f9da 	bl	8001642 <Swap>
		}
		uint16_t k = (samples >> 1);
 800128e:	88fb      	ldrh	r3, [r7, #6]
 8001290:	085b      	lsrs	r3, r3, #1
 8001292:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		while (k <= j) {
 8001296:	e00b      	b.n	80012b0 <ComputeFFT+0x90>
			j -= k;
 8001298:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800129c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			k >>= 1;
 80012a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80012aa:	085b      	lsrs	r3, r3, #1
 80012ac:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		while (k <= j) {
 80012b0:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80012b4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d9ed      	bls.n	8001298 <ComputeFFT+0x78>
		}
		j += k;
 80012bc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80012c0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80012c4:	4413      	add	r3, r2
 80012c6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	for (uint16_t i = 0; i < (samples - 1); i++) {
 80012ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80012ce:	3301      	adds	r3, #1
 80012d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80012d4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	3b01      	subs	r3, #1
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbb2      	blt.n	8001246 <ComputeFFT+0x26>
	}
	// Compute the FFT
	double c1 = -1.0;
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	4baa      	ldr	r3, [pc, #680]	; (8001590 <ComputeFFT+0x370>)
 80012e6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double c2 = 0.0;
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint16_t l2 = 1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint8_t l = 0; (l < power); l++) {
 80012fc:	2300      	movs	r3, #0
 80012fe:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001302:	e138      	b.n	8001576 <ComputeFFT+0x356>
		uint16_t l1 = l2;
 8001304:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001308:	867b      	strh	r3, [r7, #50]	; 0x32
		l2 <<= 1;
 800130a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		double u1 = 1.0;
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b9e      	ldr	r3, [pc, #632]	; (8001594 <ComputeFFT+0x374>)
 800131a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		double u2 = 0.0;
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	f04f 0300 	mov.w	r3, #0
 8001326:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		for (j = 0; j < l1; j++) {
 800132a:	2300      	movs	r3, #0
 800132c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001330:	e0da      	b.n	80014e8 <ComputeFFT+0x2c8>
			 for (uint16_t i = j; i < samples; i += l2) {
 8001332:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001336:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001338:	e094      	b.n	8001464 <ComputeFFT+0x244>
					uint16_t i1 = i + l1;
 800133a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800133c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800133e:	4413      	add	r3, r2
 8001340:	84fb      	strh	r3, [r7, #38]	; 0x26
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 8001342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	4413      	add	r3, r2
 800134a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800134e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001352:	f7ff f8b9 	bl	80004c8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4690      	mov	r8, r2
 800135c:	4699      	mov	r9, r3
 800135e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	4413      	add	r3, r2
 8001366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800136e:	f7ff f8ab 	bl	80004c8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4640      	mov	r0, r8
 8001378:	4649      	mov	r1, r9
 800137a:	f7fe feed 	bl	8000158 <__aeabi_dsub>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	e9c7 2306 	strd	r2, r3, [r7, #24]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8001386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	4413      	add	r3, r2
 800138e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001396:	f7ff f897 	bl	80004c8 <__aeabi_dmul>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4690      	mov	r8, r2
 80013a0:	4699      	mov	r9, r3
 80013a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80013b2:	f7ff f889 	bl	80004c8 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4640      	mov	r0, r8
 80013bc:	4649      	mov	r1, r9
 80013be:	f7fe fecd 	bl	800015c <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
					vReal[i1] = vReal[i] - t1;
 80013ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4413      	add	r3, r2
 80013d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	18d6      	adds	r6, r2, r3
 80013de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013e2:	f7fe feb9 	bl	8000158 <__aeabi_dsub>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	e9c6 2300 	strd	r2, r3, [r6]
					vImag[i1] = vImag[i] - t2;
 80013ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	4413      	add	r3, r2
 80013f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	18d6      	adds	r6, r2, r3
 8001402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001406:	f7fe fea7 	bl	8000158 <__aeabi_dsub>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	e9c6 2300 	strd	r2, r3, [r6]
					vReal[i] += t1;
 8001412:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	18d6      	adds	r6, r2, r3
 8001426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800142a:	f7fe fe97 	bl	800015c <__adddf3>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	e9c6 2300 	strd	r2, r3, [r6]
					vImag[i] += t2;
 8001436:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	4413      	add	r3, r2
 800143e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001442:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	18d6      	adds	r6, r2, r3
 800144a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800144e:	f7fe fe85 	bl	800015c <__adddf3>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	e9c6 2300 	strd	r2, r3, [r6]
			 for (uint16_t i = j; i < samples; i += l2) {
 800145a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800145c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001460:	4413      	add	r3, r2
 8001462:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001464:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	429a      	cmp	r2, r3
 800146a:	f4ff af66 	bcc.w	800133a <ComputeFFT+0x11a>
			 }
			 double z = ((u1 * c1) - (u2 * c2));
 800146e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001472:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001476:	f7ff f827 	bl	80004c8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4690      	mov	r8, r2
 8001480:	4699      	mov	r9, r3
 8001482:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001486:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800148a:	f7ff f81d 	bl	80004c8 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4640      	mov	r0, r8
 8001494:	4649      	mov	r1, r9
 8001496:	f7fe fe5f 	bl	8000158 <__aeabi_dsub>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 u2 = ((u1 * c2) + (u2 * c1));
 80014a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80014a6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80014aa:	f7ff f80d 	bl	80004c8 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4690      	mov	r8, r2
 80014b4:	4699      	mov	r9, r3
 80014b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014be:	f7ff f803 	bl	80004c8 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4640      	mov	r0, r8
 80014c8:	4649      	mov	r1, r9
 80014ca:	f7fe fe47 	bl	800015c <__adddf3>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			 u1 = z;
 80014d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014da:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		for (j = 0; j < l1; j++) {
 80014de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014e2:	3301      	adds	r3, #1
 80014e4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80014e8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80014ec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80014ee:	429a      	cmp	r2, r3
 80014f0:	f4ff af1f 	bcc.w	8001332 <ComputeFFT+0x112>
		}
		c2 = sqrt((1.0 - c1) / 2.0);
 80014f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014f8:	f04f 0000 	mov.w	r0, #0
 80014fc:	4925      	ldr	r1, [pc, #148]	; (8001594 <ComputeFFT+0x374>)
 80014fe:	f7fe fe2b 	bl	8000158 <__aeabi_dsub>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001512:	f7ff f903 	bl	800071c <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f006 ff0b 	bl	8008338 <sqrt>
 8001522:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
		if (dir == FFT_FORWARD) {
 8001526:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800152a:	2b01      	cmp	r3, #1
 800152c:	d105      	bne.n	800153a <ComputeFFT+0x31a>
			c2 = -c2;
 800152e:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8001530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001532:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001536:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
		}
		c1 = sqrt((1.0 + c1) / 2.0);
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <ComputeFFT+0x374>)
 8001540:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001544:	f7fe fe0a 	bl	800015c <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	f7ff f8e0 	bl	800071c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f006 fee8 	bl	8008338 <sqrt>
 8001568:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	for (uint8_t l = 0; (l < power); l++) {
 800156c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001570:	3301      	adds	r3, #1
 8001572:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001576:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800157a:	797b      	ldrb	r3, [r7, #5]
 800157c:	429a      	cmp	r2, r3
 800157e:	f4ff aec1 	bcc.w	8001304 <ComputeFFT+0xe4>
	}
	// Scaling for reverse transform
	if (dir != FFT_FORWARD) {
 8001582:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001586:	2b01      	cmp	r3, #1
 8001588:	d03d      	beq.n	8001606 <ComputeFFT+0x3e6>
		for (uint16_t i = 0; i < samples; i++) {
 800158a:	2300      	movs	r3, #0
 800158c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800158e:	e036      	b.n	80015fe <ComputeFFT+0x3de>
 8001590:	bff00000 	.word	0xbff00000
 8001594:	3ff00000 	.word	0x3ff00000
			 vReal[i] /= samples;
 8001598:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff24 	bl	80003f4 <__aeabi_i2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80015b2:	00c9      	lsls	r1, r1, #3
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	1846      	adds	r6, r0, r1
 80015b8:	4620      	mov	r0, r4
 80015ba:	4629      	mov	r1, r5
 80015bc:	f7ff f8ae 	bl	800071c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	e9c6 2300 	strd	r2, r3, [r6]
			 vImag[i] /= samples;
 80015c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4413      	add	r3, r2
 80015d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ff0c 	bl	80003f4 <__aeabi_i2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80015e2:	00c9      	lsls	r1, r1, #3
 80015e4:	68b8      	ldr	r0, [r7, #8]
 80015e6:	1846      	adds	r6, r0, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f896 	bl	800071c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c6 2300 	strd	r2, r3, [r6]
		for (uint16_t i = 0; i < samples; i++) {
 80015f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015fa:	3301      	adds	r3, #1
 80015fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80015fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	429a      	cmp	r2, r3
 8001604:	d3c8      	bcc.n	8001598 <ComputeFFT+0x378>
		}
	}
}
 8001606:	bf00      	nop
 8001608:	376c      	adds	r7, #108	; 0x6c
 800160a:	46bd      	mov	sp, r7
 800160c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001610 <Exponent>:
	for (uint16_t i = 0; i < samples; i++) {
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
	}
}

uint8_t Exponent(uint16_t value){
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
	while (((value >> result) & 1) != 1) result++;
 800161e:	e002      	b.n	8001626 <Exponent+0x16>
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3301      	adds	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
 8001626:	88fa      	ldrh	r2, [r7, #6]
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	fa42 f303 	asr.w	r3, r2, r3
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f4      	beq.n	8001620 <Exponent+0x10>
	return(result);
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr

08001642 <Swap>:


void Swap(double *x, double *y){
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	double temp = *x;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	e9c7 2302 	strd	r2, r3, [r7, #8]
	*x = *y;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	e9c1 2300 	strd	r2, r3, [r1]
	*y = temp;
 8001662:	6839      	ldr	r1, [r7, #0]
 8001664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001668:	e9c1 2300 	strd	r2, r3, [r1]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <Windowing>:

//commented on unused Windowing types so save flash space
void Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b08d      	sub	sp, #52	; 0x34
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4608      	mov	r0, r1
 8001682:	4611      	mov	r1, r2
 8001684:	461a      	mov	r2, r3
 8001686:	4603      	mov	r3, r0
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	460b      	mov	r3, r1
 800168c:	707b      	strb	r3, [r7, #1]
 800168e:	4613      	mov	r3, r2
 8001690:	703b      	strb	r3, [r7, #0]
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = (double)(samples - 1.0);
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fead 	bl	80003f4 <__aeabi_i2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <Windowing+0x1e0>)
 80016a0:	f7fe fd5a 	bl	8000158 <__aeabi_dsub>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016b0:	e0b7      	b.n	8001822 <Windowing+0x1aa>
		double indexMinusOne = (double) i;
 80016b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fe8d 	bl	80003d4 <__aeabi_ui2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double ratio = (indexMinusOne / samplesMinusOne);
 80016c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ca:	f7ff f827 	bl	800071c <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double weighingFactor = 1.0;
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <Windowing+0x1e0>)
 80016dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		// Compute and record weighting factor
		switch (windowType) {
 80016e0:	787b      	ldrb	r3, [r7, #1]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d002      	beq.n	80016ec <Windowing+0x74>
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d01e      	beq.n	8001728 <Windowing+0xb0>
 80016ea:	e03f      	b.n	800176c <Windowing+0xf4>
//		case FFT_WIN_TYP_RECTANGLE: // rectangle (box car)
//			weighingFactor = 1.0;
//			break;
		case FFT_WIN_TYP_HAMMING: // hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 80016ec:	a354      	add	r3, pc, #336	; (adr r3, 8001840 <Windowing+0x1c8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016f6:	f7fe fee7 	bl	80004c8 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f006 fda1 	bl	8008248 <cos>
 8001706:	a350      	add	r3, pc, #320	; (adr r3, 8001848 <Windowing+0x1d0>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe fedc 	bl	80004c8 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	a14e      	add	r1, pc, #312	; (adr r1, 8001850 <Windowing+0x1d8>)
 8001716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800171a:	f7fe fd1d 	bl	8000158 <__aeabi_dsub>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	e9c7 2308 	strd	r2, r3, [r7, #32]
			break;
 8001726:	e021      	b.n	800176c <Windowing+0xf4>
		case FFT_WIN_TYP_HANN: // hann
			//weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
 8001728:	a345      	add	r3, pc, #276	; (adr r3, 8001840 <Windowing+0x1c8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001732:	f7fe fec9 	bl	80004c8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f006 fd83 	bl	8008248 <cos>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	f04f 0000 	mov.w	r0, #0
 800174a:	4943      	ldr	r1, [pc, #268]	; (8001858 <Windowing+0x1e0>)
 800174c:	f7fe fd04 	bl	8000158 <__aeabi_dsub>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	a33d      	add	r3, pc, #244	; (adr r3, 8001850 <Windowing+0x1d8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe feb3 	bl	80004c8 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	e9c7 2308 	strd	r2, r3, [r7, #32]
			break;
 800176a:	bf00      	nop
//			break;
//		case FFT_WIN_TYP_WELCH: // welch
//			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
//			break;
		}
		if (dir == FFT_FORWARD) {
 800176c:	783b      	ldrb	r3, [r7, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d12a      	bne.n	80017c8 <Windowing+0x150>
			vData[i] *= weighingFactor;
 8001772:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800177e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	18d4      	adds	r4, r2, r3
 8001786:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800178a:	f7fe fe9d 	bl	80004c8 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9c4 2300 	strd	r2, r3, [r4]
			vData[samples - (i + 1)] *= weighingFactor;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800179a:	3301      	adds	r3, #1
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a8:	887a      	ldrh	r2, [r7, #2]
 80017aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017ac:	3301      	adds	r3, #1
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	18d4      	adds	r4, r2, r3
 80017b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ba:	f7fe fe85 	bl	80004c8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	e9c4 2300 	strd	r2, r3, [r4]
 80017c6:	e029      	b.n	800181c <Windowing+0x1a4>
		}
		else {
			vData[i] /= weighingFactor;
 80017c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	4413      	add	r3, r2
 80017d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	18d4      	adds	r4, r2, r3
 80017dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017e0:	f7fe ff9c 	bl	800071c <__aeabi_ddiv>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	e9c4 2300 	strd	r2, r3, [r4]
			vData[samples - (i + 1)] /= weighingFactor;
 80017ec:	887a      	ldrh	r2, [r7, #2]
 80017ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017f0:	3301      	adds	r3, #1
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001802:	3301      	adds	r3, #1
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	18d4      	adds	r4, r2, r3
 800180c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001810:	f7fe ff84 	bl	800071c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9c4 2300 	strd	r2, r3, [r4]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 800181c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800181e:	3301      	adds	r3, #1
 8001820:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	b29b      	uxth	r3, r3
 8001828:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800182a:	429a      	cmp	r2, r3
 800182c:	f4ff af41 	bcc.w	80016b2 <Windowing+0x3a>
		}
	}
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3734      	adds	r7, #52	; 0x34
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	5474a168 	.word	0x5474a168
 8001844:	401921fb 	.word	0x401921fb
 8001848:	d70a3d71 	.word	0xd70a3d71
 800184c:	3fdd70a3 	.word	0x3fdd70a3
 8001850:	147ae148 	.word	0x147ae148
 8001854:	3fe147ae 	.word	0x3fe147ae
 8001858:	3ff00000 	.word	0x3ff00000

0800185c <sq>:


double sq(double x){ //math squaring function
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	e9c7 0100 	strd	r0, r1, [r7]
return 	x*x;
 8001866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800186a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800186e:	f7fe fe2b 	bl	80004c8 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
}
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <read_adc>:


//added an offset of 1.68V on the ADC pin. this comes out to 2048 for a 12-bit ADC
//ToDo: this signed val and the offset should be done in the mainloop. this will allow the read_adc to be generalized. should return a uint16_t from the 12-bit adc
int16_t read_adc(){ //reads ADC0 into adcVAL (12-bit?)
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001886:	480a      	ldr	r0, [pc, #40]	; (80018b0 <read_adc+0x30>)
 8001888:	f001 fc20 	bl	80030cc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); //wait (blocking) for the conversion to complete ?
 800188c:	2164      	movs	r1, #100	; 0x64
 800188e:	4808      	ldr	r0, [pc, #32]	; (80018b0 <read_adc+0x30>)
 8001890:	f001 fcf6 	bl	8003280 <HAL_ADC_PollForConversion>
    //because HAL_ADC_Getvalue only returns 0 to 2^12-1; half of that is 2047.5. lets round it to 2048 (this is fine for a int16_t)
	int16_t adcVal = (int16_t)(HAL_ADC_GetValue(&hadc1) & (0xFFFF)); //make sure only the lower 16 bytes are stored.
 8001894:	4806      	ldr	r0, [pc, #24]	; (80018b0 <read_adc+0x30>)
 8001896:	f001 fdf9 	bl	800348c <HAL_ADC_GetValue>
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <read_adc+0x30>)
 80018a0:	f001 fcc2 	bl	8003228 <HAL_ADC_Stop>
	return adcVal;
 80018a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000009c 	.word	0x2000009c
 80018b4:	00000000 	.word	0x00000000

080018b8 <getMAG>:
		uint32_t idx = (i*(N/32))+indexOffset; //used to make sure i am indexing the REX[] properly
		MAG[i] = (sqrt(sq(REX[idx]) + sq(IMX[idx]))); //Magnitude from Pythagoram of Real and Complex in dBs
	}
}
#else
void getMAG(){
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
	uint8_t indexOffset = 1; //the lowest used bin index
 80018be:	2301      	movs	r3, #1
 80018c0:	74fb      	strb	r3, [r7, #19]
	double MaxTemp;
	uint32_t idx;
	for (uint32_t i = 0; i < USEDBINS; i++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e057      	b.n	8001978 <getMAG+0xc0>
		idx = (i*(N/32))+indexOffset; //used to make sure i am indexing the REX[] properly
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005a      	lsls	r2, r3, #1
 80018cc:	7cfb      	ldrb	r3, [r7, #19]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
		//Todo: peak detection here?

		MaxTemp = sqrt(sq(REX[idx]) + sq(IMX[idx])); //Magnitude from Pythagoram of Real and Complex
 80018d2:	4a2f      	ldr	r2, [pc, #188]	; (8001990 <getMAG+0xd8>)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff ffbb 	bl	800185c <sq>
 80018e6:	4604      	mov	r4, r0
 80018e8:	460d      	mov	r5, r1
 80018ea:	4a2a      	ldr	r2, [pc, #168]	; (8001994 <getMAG+0xdc>)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	4413      	add	r3, r2
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff ffaf 	bl	800185c <sq>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4620      	mov	r0, r4
 8001904:	4629      	mov	r1, r5
 8001906:	f7fe fc29 	bl	800015c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f006 fd11 	bl	8008338 <sqrt>
 8001916:	e9c7 0100 	strd	r0, r1, [r7]
		MAG[i] = (double) fft_Db_MAX + (20*log10((MaxTemp+1.0)/FFT_RAW_MAX)); //return positive DBs. this will be used
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <getMAG+0xe0>)
 8001920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001924:	f7fe fc1a 	bl	800015c <__adddf3>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	a315      	add	r3, pc, #84	; (adr r3, 8001988 <getMAG+0xd0>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fef1 	bl	800071c <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f006 fcc7 	bl	80082d4 <log10>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <getMAG+0xe4>)
 800194c:	f7fe fdbc 	bl	80004c8 <__aeabi_dmul>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <getMAG+0xe8>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fbfd 	bl	800015c <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	480f      	ldr	r0, [pc, #60]	; (80019a4 <getMAG+0xec>)
 8001968:	6979      	ldr	r1, [r7, #20]
 800196a:	00c9      	lsls	r1, r1, #3
 800196c:	4401      	add	r1, r0
 800196e:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	d9a4      	bls.n	80018c8 <getMAG+0x10>
	}
}
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	00000000 	.word	0x00000000
 800198c:	40e21100 	.word	0x40e21100
 8001990:	200007b0 	.word	0x200007b0
 8001994:	200009b0 	.word	0x200009b0
 8001998:	3ff00000 	.word	0x3ff00000
 800199c:	40340000 	.word	0x40340000
 80019a0:	20000008 	.word	0x20000008
 80019a4:	20000bb0 	.word	0x20000bb0

080019a8 <adjustVals>:
}

#else
//ToDo: clean up these for-loops. sense counter must be outside a for-loop(maybe theres a way...)
//Todo: anyway to speed this funtion up?
void adjustVals(){ //main audio filtering work
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0

	//////lowpass filtering//////
	for (uint32_t i = 0; i < USEDBINS; i++){
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
 80019b2:	e052      	b.n	8001a5a <adjustVals+0xb2>
		MAGbuff[i][fCount] = MAG[i]; //store the current reading into the circular buffer
 80019b4:	4b98      	ldr	r3, [pc, #608]	; (8001c18 <adjustVals+0x270>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	461c      	mov	r4, r3
 80019ba:	4a98      	ldr	r2, [pc, #608]	; (8001c1c <adjustVals+0x274>)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	4896      	ldr	r0, [pc, #600]	; (8001c20 <adjustVals+0x278>)
 80019c8:	69f9      	ldr	r1, [r7, #28]
 80019ca:	00c9      	lsls	r1, r1, #3
 80019cc:	4421      	add	r1, r4
 80019ce:	00c9      	lsls	r1, r1, #3
 80019d0:	4401      	add	r1, r0
 80019d2:	e9c1 2300 	strd	r2, r3, [r1]
		for (uint32_t k = 0; k < F_WIDTH; k++){ //store the sums
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
 80019da:	e01b      	b.n	8001a14 <adjustVals+0x6c>
			MAGbuffSum[i] += MAGbuff[i][k];
 80019dc:	4a91      	ldr	r2, [pc, #580]	; (8001c24 <adjustVals+0x27c>)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	4413      	add	r3, r2
 80019e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019e8:	4c8d      	ldr	r4, [pc, #564]	; (8001c20 <adjustVals+0x278>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	00da      	lsls	r2, r3, #3
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4423      	add	r3, r4
 80019f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fa:	f7fe fbaf 	bl	800015c <__adddf3>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4888      	ldr	r0, [pc, #544]	; (8001c24 <adjustVals+0x27c>)
 8001a04:	69f9      	ldr	r1, [r7, #28]
 8001a06:	00c9      	lsls	r1, r1, #3
 8001a08:	4401      	add	r1, r0
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
		for (uint32_t k = 0; k < F_WIDTH; k++){ //store the sums
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b07      	cmp	r3, #7
 8001a18:	d9e0      	bls.n	80019dc <adjustVals+0x34>
		}
		MAG[i] = MAGbuffSum[i]/F_WIDTHF;
 8001a1a:	4a82      	ldr	r2, [pc, #520]	; (8001c24 <adjustVals+0x27c>)
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <adjustVals+0x280>)
 8001a2c:	f7fe fe76 	bl	800071c <__aeabi_ddiv>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4879      	ldr	r0, [pc, #484]	; (8001c1c <adjustVals+0x274>)
 8001a36:	69f9      	ldr	r1, [r7, #28]
 8001a38:	00c9      	lsls	r1, r1, #3
 8001a3a:	4401      	add	r1, r0
 8001a3c:	e9c1 2300 	strd	r2, r3, [r1]
		MAGbuffSum[i] = 0;
 8001a40:	4a78      	ldr	r2, [pc, #480]	; (8001c24 <adjustVals+0x27c>)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	18d1      	adds	r1, r2, r3
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	3301      	adds	r3, #1
 8001a58:	61fb      	str	r3, [r7, #28]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	d9a9      	bls.n	80019b4 <adjustVals+0xc>
	}
	fCount++; //lowpass filter indexer
 8001a60:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <adjustVals+0x270>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	3301      	adds	r3, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <adjustVals+0x270>)
 8001a6a:	701a      	strb	r2, [r3, #0]
	if(fCount>=F_WIDTH) fCount=0;
 8001a6c:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <adjustVals+0x270>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b07      	cmp	r3, #7
 8001a72:	d902      	bls.n	8001a7a <adjustVals+0xd2>
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <adjustVals+0x270>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]


	//////max and min storing//////
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	e03f      	b.n	8001b00 <adjustVals+0x158>
		if(MAG[i] > MAGmax[i]){
 8001a80:	4a66      	ldr	r2, [pc, #408]	; (8001c1c <adjustVals+0x274>)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a8c:	4a67      	ldr	r2, [pc, #412]	; (8001c2c <adjustVals+0x284>)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	4413      	add	r3, r2
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	f7fe ffa6 	bl	80009e8 <__aeabi_dcmpgt>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00e      	beq.n	8001ac0 <adjustVals+0x118>
			  MAGmax[i] = MAG[i]; //store the Max
 8001aa2:	4a5e      	ldr	r2, [pc, #376]	; (8001c1c <adjustVals+0x274>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	485f      	ldr	r0, [pc, #380]	; (8001c2c <adjustVals+0x284>)
 8001ab0:	6979      	ldr	r1, [r7, #20]
 8001ab2:	00c9      	lsls	r1, r1, #3
 8001ab4:	4401      	add	r1, r0
 8001ab6:	e9c1 2300 	strd	r2, r3, [r1]
			  senseCounterH = 0;
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <adjustVals+0x288>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
		}
		if(MAG[i] < MAGmin[i]){
 8001ac0:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <adjustVals+0x274>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001acc:	4a59      	ldr	r2, [pc, #356]	; (8001c34 <adjustVals+0x28c>)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe ff68 	bl	80009ac <__aeabi_dcmplt>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <adjustVals+0x152>
			  MAGmin[i] = MAG[i]; //store the Max
 8001ae2:	4a4e      	ldr	r2, [pc, #312]	; (8001c1c <adjustVals+0x274>)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	4851      	ldr	r0, [pc, #324]	; (8001c34 <adjustVals+0x28c>)
 8001af0:	6979      	ldr	r1, [r7, #20]
 8001af2:	00c9      	lsls	r1, r1, #3
 8001af4:	4401      	add	r1, r0
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b0f      	cmp	r3, #15
 8001b04:	d9bc      	bls.n	8001a80 <adjustVals+0xd8>
		}
	}


	////// max and min auto adjusting//////
		  senseCounterH++;
 8001b06:	4b4a      	ldr	r3, [pc, #296]	; (8001c30 <adjustVals+0x288>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <adjustVals+0x288>)
 8001b0e:	6013      	str	r3, [r2, #0]
		  senseCounterL++;
 8001b10:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <adjustVals+0x290>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3301      	adds	r3, #1
 8001b16:	4a48      	ldr	r2, [pc, #288]	; (8001c38 <adjustVals+0x290>)
 8001b18:	6013      	str	r3, [r2, #0]
		  if(senseCounterH>SENSERATE_H){ //about every 3 seconds
 8001b1a:	4b45      	ldr	r3, [pc, #276]	; (8001c30 <adjustVals+0x288>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b22:	d938      	bls.n	8001b96 <adjustVals+0x1ee>
			  senseCounterH = 0;
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <adjustVals+0x288>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e02f      	b.n	8001b90 <adjustVals+0x1e8>
				  if(MAGmax[k]>MAGmin[k] + HOFFSET_SCALER) MAGmax[k]-=0.5f; //reduce upper limit
 8001b30:	4a3e      	ldr	r2, [pc, #248]	; (8001c2c <adjustVals+0x284>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b3c:	4a3d      	ldr	r2, [pc, #244]	; (8001c34 <adjustVals+0x28c>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <adjustVals+0x294>)
 8001b4e:	f7fe fb05 	bl	800015c <__adddf3>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe ff45 	bl	80009e8 <__aeabi_dcmpgt>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d012      	beq.n	8001b8a <adjustVals+0x1e2>
 8001b64:	4a31      	ldr	r2, [pc, #196]	; (8001c2c <adjustVals+0x284>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b32      	ldr	r3, [pc, #200]	; (8001c40 <adjustVals+0x298>)
 8001b76:	f7fe faef 	bl	8000158 <__aeabi_dsub>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	482b      	ldr	r0, [pc, #172]	; (8001c2c <adjustVals+0x284>)
 8001b80:	6939      	ldr	r1, [r7, #16]
 8001b82:	00c9      	lsls	r1, r1, #3
 8001b84:	4401      	add	r1, r0
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d9cc      	bls.n	8001b30 <adjustVals+0x188>
			  }
		  }
		  if(senseCounterL>SENSERATE_L){ //about every 1 seconds
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <adjustVals+0x290>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d938      	bls.n	8001c10 <adjustVals+0x268>
			  senseCounterL = 0;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <adjustVals+0x290>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e02f      	b.n	8001c0a <adjustVals+0x262>
				  if(MAGmin[k]<MAGmax[k] - HOFFSET_SCALER) MAGmin[k]+=0.5f; //increase lower limit
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <adjustVals+0x28c>)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <adjustVals+0x284>)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b1d      	ldr	r3, [pc, #116]	; (8001c3c <adjustVals+0x294>)
 8001bc8:	f7fe fac6 	bl	8000158 <__aeabi_dsub>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe feea 	bl	80009ac <__aeabi_dcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d012      	beq.n	8001c04 <adjustVals+0x25c>
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <adjustVals+0x28c>)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <adjustVals+0x298>)
 8001bf0:	f7fe fab4 	bl	800015c <__adddf3>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	480e      	ldr	r0, [pc, #56]	; (8001c34 <adjustVals+0x28c>)
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	00c9      	lsls	r1, r1, #3
 8001bfe:	4401      	add	r1, r0
 8001c00:	e9c1 2300 	strd	r2, r3, [r1]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3301      	adds	r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b0f      	cmp	r3, #15
 8001c0e:	d9cc      	bls.n	8001baa <adjustVals+0x202>
			  }
		  }

//not sure thus is needed
	//////make sure that MAG is within min and max as a double//////
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
 8001c14:	e061      	b.n	8001cda <adjustVals+0x332>
 8001c16:	bf00      	nop
 8001c18:	200011f0 	.word	0x200011f0
 8001c1c:	20000bb0 	.word	0x20000bb0
 8001c20:	20000db0 	.word	0x20000db0
 8001c24:	200011b0 	.word	0x200011b0
 8001c28:	40200000 	.word	0x40200000
 8001c2c:	20000c30 	.word	0x20000c30
 8001c30:	200012b8 	.word	0x200012b8
 8001c34:	20000cb0 	.word	0x20000cb0
 8001c38:	200012bc 	.word	0x200012bc
 8001c3c:	40100000 	.word	0x40100000
 8001c40:	3fe00000 	.word	0x3fe00000
			  if(MAG[i]>=MAGmax[i]) MAG[i] = MAGmax[i]-1;
 8001c44:	4a6c      	ldr	r2, [pc, #432]	; (8001df8 <adjustVals+0x450>)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c50:	4a6a      	ldr	r2, [pc, #424]	; (8001dfc <adjustVals+0x454>)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe feba 	bl	80009d4 <__aeabi_dcmpge>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <adjustVals+0x2e4>
 8001c66:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <adjustVals+0x454>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	4b62      	ldr	r3, [pc, #392]	; (8001e00 <adjustVals+0x458>)
 8001c78:	f7fe fa6e 	bl	8000158 <__aeabi_dsub>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	485d      	ldr	r0, [pc, #372]	; (8001df8 <adjustVals+0x450>)
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	00c9      	lsls	r1, r1, #3
 8001c86:	4401      	add	r1, r0
 8001c88:	e9c1 2300 	strd	r2, r3, [r1]
			  if(MAG[i]<=MAGmin[i]) MAG[i] = MAGmin[i]+1;
 8001c8c:	4a5a      	ldr	r2, [pc, #360]	; (8001df8 <adjustVals+0x450>)
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c98:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <adjustVals+0x45c>)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fe8c 	bl	80009c0 <__aeabi_dcmple>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <adjustVals+0x32c>
 8001cae:	4a55      	ldr	r2, [pc, #340]	; (8001e04 <adjustVals+0x45c>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <adjustVals+0x458>)
 8001cc0:	f7fe fa4c 	bl	800015c <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	484b      	ldr	r0, [pc, #300]	; (8001df8 <adjustVals+0x450>)
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	00c9      	lsls	r1, r1, #3
 8001cce:	4401      	add	r1, r0
 8001cd0:	e9c1 2300 	strd	r2, r3, [r1]
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b0f      	cmp	r3, #15
 8001cde:	d9b1      	bls.n	8001c44 <adjustVals+0x29c>
			  //MAG[i] = constrain(MAG[i],MAGmin[i]+1,MAGmax[i]-1); //instead?
		  }


	//////Typecasting to ready for digital displaying//////
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	e02f      	b.n	8001d46 <adjustVals+0x39e>
				MAGI[i] = (int32_t) MAG[i];
 8001ce6:	4a44      	ldr	r2, [pc, #272]	; (8001df8 <adjustVals+0x450>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe fe97 	bl	8000a28 <__aeabi_d2iz>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4942      	ldr	r1, [pc, #264]	; (8001e08 <adjustVals+0x460>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MAGImin[i] = (int32_t) MAGmin[i];
 8001d04:	4a3f      	ldr	r2, [pc, #252]	; (8001e04 <adjustVals+0x45c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe fe88 	bl	8000a28 <__aeabi_d2iz>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	493c      	ldr	r1, [pc, #240]	; (8001e0c <adjustVals+0x464>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MAGImax[i] = (int32_t) MAGmax[i];
 8001d22:	4a36      	ldr	r2, [pc, #216]	; (8001dfc <adjustVals+0x454>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe fe79 	bl	8000a28 <__aeabi_d2iz>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4935      	ldr	r1, [pc, #212]	; (8001e10 <adjustVals+0x468>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b0f      	cmp	r3, #15
 8001d4a:	d9cc      	bls.n	8001ce6 <adjustVals+0x33e>
			}


	//////make sure mag is within min and max as a integer//////
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	e04a      	b.n	8001de8 <adjustVals+0x440>
			  if(MAG[i]>=MAGmax[i]) MAG[i] = MAGmax[i]-1;
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <adjustVals+0x450>)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d5e:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <adjustVals+0x454>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fe33 	bl	80009d4 <__aeabi_dcmpge>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d012      	beq.n	8001d9a <adjustVals+0x3f2>
 8001d74:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <adjustVals+0x454>)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <adjustVals+0x458>)
 8001d86:	f7fe f9e7 	bl	8000158 <__aeabi_dsub>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	481a      	ldr	r0, [pc, #104]	; (8001df8 <adjustVals+0x450>)
 8001d90:	6839      	ldr	r1, [r7, #0]
 8001d92:	00c9      	lsls	r1, r1, #3
 8001d94:	4401      	add	r1, r0
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]
			  if(MAG[i]<=MAGmin[i]) MAG[i] = MAGmin[i]+1;
 8001d9a:	4a17      	ldr	r2, [pc, #92]	; (8001df8 <adjustVals+0x450>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da6:	4a17      	ldr	r2, [pc, #92]	; (8001e04 <adjustVals+0x45c>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fe05 	bl	80009c0 <__aeabi_dcmple>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d012      	beq.n	8001de2 <adjustVals+0x43a>
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <adjustVals+0x45c>)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <adjustVals+0x458>)
 8001dce:	f7fe f9c5 	bl	800015c <__adddf3>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4808      	ldr	r0, [pc, #32]	; (8001df8 <adjustVals+0x450>)
 8001dd8:	6839      	ldr	r1, [r7, #0]
 8001dda:	00c9      	lsls	r1, r1, #3
 8001ddc:	4401      	add	r1, r0
 8001dde:	e9c1 2300 	strd	r2, r3, [r1]
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	d9b1      	bls.n	8001d52 <adjustVals+0x3aa>
		  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bdb0      	pop	{r4, r5, r7, pc}
 8001df8:	20000bb0 	.word	0x20000bb0
 8001dfc:	20000c30 	.word	0x20000c30
 8001e00:	3ff00000 	.word	0x3ff00000
 8001e04:	20000cb0 	.word	0x20000cb0
 8001e08:	200011f4 	.word	0x200011f4
 8001e0c:	20001234 	.word	0x20001234
 8001e10:	20001274 	.word	0x20001274

08001e14 <audioMap>:
#endif

uint16_t audioMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) { //Map function spacial
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	1a8a      	subs	r2, r1, r2
 8001e2e:	fb03 f202 	mul.w	r2, r3, r2
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1acb      	subs	r3, r1, r3
 8001e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	4413      	add	r3, r2
 8001e44:	b29b      	uxth	r3, r3
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <graphMAG>:


//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Audio Adjustments


void graphMAG() { //draws FFT magnitudes MAG[0] to MAG[15] on OLED and RGB Matrix
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8001e56:	f000 fdaf 	bl	80029b8 <SSD1306_Clear>
#if SIMULATE
  	SSD1306_Puti(127-(7*5), 0, signalFrequency, 5);
#endif
  for(int k=0; k<USEDBINS; k++) SSD1306_DrawFilledRectangle(8*k, (uint16_t)((SSD1306_HEIGHT-1)-abs(audioMap(MAGI[k],MAGImin[k],MAGImax[k],0,SSD1306_HEIGHT-1))), 6, (uint16_t)(abs(audioMap(MAGI[k],MAGImin[k],MAGImax[k],0,SSD1306_HEIGHT-1))), SSD1306_COLOR_WHITE); //draw 16 bars abs(x[k]) on (0 to k/2)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	e036      	b.n	8001ece <graphMAG+0x7e>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	b29c      	uxth	r4, r3
 8001e68:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <graphMAG+0x180>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e70:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <graphMAG+0x184>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e78:	4a57      	ldr	r2, [pc, #348]	; (8001fd8 <graphMAG+0x188>)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e80:	231f      	movs	r3, #31
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2300      	movs	r3, #0
 8001e86:	f7ff ffc5 	bl	8001e14 <audioMap>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f1c3 031f 	rsb	r3, r3, #31
 8001e90:	b29d      	uxth	r5, r3
 8001e92:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <graphMAG+0x180>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e9a:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <graphMAG+0x184>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ea2:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <graphMAG+0x188>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eaa:	231f      	movs	r3, #31
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f7ff ffb0 	bl	8001e14 <audioMap>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	2206      	movs	r2, #6
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f000 fd2b 	bl	800291e <SSD1306_DrawFilledRectangle>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	ddc5      	ble.n	8001e60 <graphMAG+0x10>
  SSD1306_UpdateScreen(); //display //this may be calling the display too much
 8001ed4:	f000 fd78 	bl	80029c8 <SSD1306_UpdateScreen>
  int k = 5;
 8001ed8:	2305      	movs	r3, #5
 8001eda:	603b      	str	r3, [r7, #0]
  BlankScreen(BLACK);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 f8eb 	bl	80020b8 <BlankScreen>
  for(int x=0; x<USEDBINS; x++){ //graph on rgb glasses. mirrored. only showing lower 8 freqs.
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	e064      	b.n	8001fb2 <graphMAG+0x162>
	  if(MAG[0] > MAGmax[0]*0.9) getrand(randSelect); //Careful, This is using the double. if the lowest used freq hits 75% of its make then change colors.
 8001ee8:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <graphMAG+0x18c>)
 8001eea:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001eee:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <graphMAG+0x190>)
 8001ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ef4:	a334      	add	r3, pc, #208	; (adr r3, 8001fc8 <graphMAG+0x178>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fae5 	bl	80004c8 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe fd6f 	bl	80009e8 <__aeabi_dcmpgt>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <graphMAG+0xca>
 8001f10:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <graphMAG+0x194>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8e7 	bl	80020e8 <getrand>
	  for(uint16_t y=0; y<audioMap(MAGI[x],MAGImin[x],MAGImax[x],0, numRows); y++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	80fb      	strh	r3, [r7, #6]
 8001f1e:	e02f      	b.n	8001f80 <graphMAG+0x130>
		if(MAGI[x]>MAGImin[x]+HOFFSET_SCALER){//only display if greater than MAGmin + 4;
 8001f20:	4a2b      	ldr	r2, [pc, #172]	; (8001fd0 <graphMAG+0x180>)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f28:	492a      	ldr	r1, [pc, #168]	; (8001fd4 <graphMAG+0x184>)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f30:	3304      	adds	r3, #4
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dd21      	ble.n	8001f7a <graphMAG+0x12a>
		  if(x<8){
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	dc0e      	bgt.n	8001f5a <graphMAG+0x10a>
			  setPixelColor(ColumnArray[x][y], Forecolor);   //I changed this to work with the 168 led display(21 cols) and 32 (64/2 usable) Bins
 8001f3c:	88fb      	ldrh	r3, [r7, #6]
 8001f3e:	492a      	ldr	r1, [pc, #168]	; (8001fe8 <graphMAG+0x198>)
 8001f40:	68ba      	ldr	r2, [r7, #8]
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	440a      	add	r2, r1
 8001f46:	4413      	add	r3, r2
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b27      	ldr	r3, [pc, #156]	; (8001fec <graphMAG+0x19c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 f85a 	bl	800200c <setPixelColor>
 8001f58:	e00f      	b.n	8001f7a <graphMAG+0x12a>
		  //setPixelColor(ColumnArray[numCols-1-x][y], Forecolor); //mirror but x has to count to USEDBINS/2
		  }else{
			  setPixelColor(ColumnArray[x+k][y], Forecolor);   //I changed this to work with the 168 led display(21 cols) and 32 (64/2 usable) Bins
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	441a      	add	r2, r3
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	4921      	ldr	r1, [pc, #132]	; (8001fe8 <graphMAG+0x198>)
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	440a      	add	r2, r1
 8001f68:	4413      	add	r3, r2
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <graphMAG+0x19c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f000 f849 	bl	800200c <setPixelColor>
	  for(uint16_t y=0; y<audioMap(MAGI[x],MAGImin[x],MAGImax[x],0, numRows); y++){
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <graphMAG+0x180>)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f88:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <graphMAG+0x184>)
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f90:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <graphMAG+0x188>)
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f98:	2308      	movs	r3, #8
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f7ff ff39 	bl	8001e14 <audioMap>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d3b9      	bcc.n	8001f20 <graphMAG+0xd0>
  for(int x=0; x<USEDBINS; x++){ //graph on rgb glasses. mirrored. only showing lower 8 freqs.
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	dd97      	ble.n	8001ee8 <graphMAG+0x98>
		  }
		}

	  }
  }
  show();
 8001fb8:	f000 f81a 	bl	8001ff0 <show>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	cccccccd 	.word	0xcccccccd
 8001fcc:	3feccccc 	.word	0x3feccccc
 8001fd0:	200011f4 	.word	0x200011f4
 8001fd4:	20001234 	.word	0x20001234
 8001fd8:	20001274 	.word	0x20001274
 8001fdc:	20000bb0 	.word	0x20000bb0
 8001fe0:	20000c30 	.word	0x20000c30
 8001fe4:	200007a0 	.word	0x200007a0
 8001fe8:	0800ade0 	.word	0x0800ade0
 8001fec:	20000000 	.word	0x20000000

08001ff0 <show>:
}
show();
}


void show(void){
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
HAL_SPI_Transmit_DMA(&hspi2, myData, (NUMLEDS*EXPANDFACTOR)+SPILOWTIME); //Begin SPI - SPI DMA data burst to LEDS
 8001ff4:	f240 6206 	movw	r2, #1542	; 0x606
 8001ff8:	4902      	ldr	r1, [pc, #8]	; (8002004 <show+0x14>)
 8001ffa:	4803      	ldr	r0, [pc, #12]	; (8002008 <show+0x18>)
 8001ffc:	f005 fb32 	bl	8007664 <HAL_SPI_Transmit_DMA>
}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000194 	.word	0x20000194
 8002008:	200012c0 	.word	0x200012c0

0800200c <setPixelColor>:


//ToDo: testing LUT vs Algorith to generate SPI data. I can save 1kb of flash text space by using a algorith instead of a LUT
//Todo: All the RGB SPI stuff should be in a class. (pixel timing type, number of pixels, brightness?, display buffer, funtions)
void setPixelColor(int pixelNum, uint32_t c){ //pass in a Pixel Number and 32bit Color and map to 9 bytes
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	  uint8_t myGRB[3]; //create an array to hold the GRB bytes for one 23bit color
	  for(int x=0; x<3; x++) myGRB[x] = (c >> ((2-x) * 8)) & 0xFF; //extract the green,red,blue from the 32bit and write the 8bit values into myGRB array
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e010      	b.n	800203e <setPixelColor+0x32>
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f1c3 0302 	rsb	r3, r3, #2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	b2d9      	uxtb	r1, r3
 800202c:	f107 0208 	add.w	r2, r7, #8
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	4413      	add	r3, r2
 8002034:	460a      	mov	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2b02      	cmp	r3, #2
 8002042:	ddeb      	ble.n	800201c <setPixelColor+0x10>
	  for(int y=0; y<3; y++){ //this is to index the G,R,B bytes
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	e028      	b.n	800209c <setPixelColor+0x90>
	    for(int x=0; x<3; x++)  myData[(y*3)+(pixelNum*9)+x] = (bitExpand[myGRB[y]] >> ((2-x) * 8)) & 0xFF; //expand green, red, blue. from 1 byte into 3 bytes each (9 bytes total)
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	e01f      	b.n	8002090 <setPixelColor+0x84>
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <setPixelColor+0xa4>)
 800205e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1c3 0302 	rsb	r3, r3, #2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	fa22 f003 	lsr.w	r0, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4613      	mov	r3, r2
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	1899      	adds	r1, r3, r2
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	18ca      	adds	r2, r1, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4413      	add	r3, r2
 8002084:	b2c1      	uxtb	r1, r0
 8002086:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <setPixelColor+0xa8>)
 8002088:	54d1      	strb	r1, [r2, r3]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3301      	adds	r3, #1
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b02      	cmp	r3, #2
 8002094:	dddc      	ble.n	8002050 <setPixelColor+0x44>
	  for(int y=0; y<3; y++){ //this is to index the G,R,B bytes
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3301      	adds	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	ddd3      	ble.n	800204a <setPixelColor+0x3e>
	  }
}
 80020a2:	bf00      	nop
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	0800a9e0 	.word	0x0800a9e0
 80020b4:	20000194 	.word	0x20000194

080020b8 <BlankScreen>:
	return ((uint32_t)myGRB[0] << 16) | ((uint32_t)myGRB[1] <<  8 | (uint32_t) myGRB[2]); //return a uint32_t value for the color stored on the led
}



void BlankScreen(uint32_t c) { //quickly set the entire screen one color
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < NUMLEDS; i++) {
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e006      	b.n	80020d4 <BlankScreen+0x1c>
    setPixelColor(i, c);
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ff9f 	bl	800200c <setPixelColor>
  for (int i = 0; i < NUMLEDS; i++) {
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3301      	adds	r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2ba7      	cmp	r3, #167	; 0xa7
 80020d8:	ddf5      	ble.n	80020c6 <BlankScreen+0xe>
  }
  show();
 80020da:	f7ff ff89 	bl	8001ff0 <show>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <getrand>:
	}

}


void getrand(int c) { // trying to make it //the goal is to get a random forecolor that is not white, then find the opposite of
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  //rand usage: int myRandomnumber = (rand() % (MAX - MIN + 1)) + MIN;
	//getrand requries 0,1,2,3, or specify what type of color to return
      switch ((rand() % (2 - 0 + 1)) + 0) { //0 to 3 //map(rand(),0,32767,0,2)      //could be replaced using my randomNum function
 80020f0:	f007 fc1a 	bl	8009928 <rand>
 80020f4:	4601      	mov	r1, r0
 80020f6:	4b5a      	ldr	r3, [pc, #360]	; (8002260 <getrand+0x178>)
 80020f8:	fb83 3201 	smull	r3, r2, r3, r1
 80020fc:	17cb      	asrs	r3, r1, #31
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	461a      	mov	r2, r3
 8002102:	0052      	lsls	r2, r2, #1
 8002104:	441a      	add	r2, r3
 8002106:	1a8b      	subs	r3, r1, r2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d065      	beq.n	80021d8 <getrand+0xf0>
 800210c:	2b02      	cmp	r3, #2
 800210e:	f300 8097 	bgt.w	8002240 <getrand+0x158>
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <getrand+0x34>
 8002116:	2b01      	cmp	r3, #1
 8002118:	d02f      	beq.n	800217a <getrand+0x92>
 800211a:	e091      	b.n	8002240 <getrand+0x158>
        case 0:                                 //multi
            green = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 800211c:	f007 fc04 	bl	8009928 <rand>
 8002120:	4602      	mov	r2, r0
 8002122:	4b50      	ldr	r3, [pc, #320]	; (8002264 <getrand+0x17c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	3301      	adds	r3, #1
 8002128:	fb92 f1f3 	sdiv	r1, r2, r3
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b4b      	ldr	r3, [pc, #300]	; (8002268 <getrand+0x180>)
 800213a:	701a      	strb	r2, [r3, #0]
            red = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 800213c:	f007 fbf4 	bl	8009928 <rand>
 8002140:	4602      	mov	r2, r0
 8002142:	4b48      	ldr	r3, [pc, #288]	; (8002264 <getrand+0x17c>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	3302      	adds	r3, #2
 8002148:	fb92 f1f3 	sdiv	r1, r2, r3
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b44      	ldr	r3, [pc, #272]	; (800226c <getrand+0x184>)
 800215a:	701a      	strb	r2, [r3, #0]
            blue = 0;
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <getrand+0x188>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
            if(green==0 && red==0) green = 1;
 8002162:	4b41      	ldr	r3, [pc, #260]	; (8002268 <getrand+0x180>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d165      	bne.n	8002236 <getrand+0x14e>
 800216a:	4b40      	ldr	r3, [pc, #256]	; (800226c <getrand+0x184>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d161      	bne.n	8002236 <getrand+0x14e>
 8002172:	4b3d      	ldr	r3, [pc, #244]	; (8002268 <getrand+0x180>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
          break;
 8002178:	e05d      	b.n	8002236 <getrand+0x14e>

        case 1:
        	 green = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 800217a:	f007 fbd5 	bl	8009928 <rand>
 800217e:	4602      	mov	r2, r0
 8002180:	4b38      	ldr	r3, [pc, #224]	; (8002264 <getrand+0x17c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3302      	adds	r3, #2
 8002186:	fb92 f1f3 	sdiv	r1, r2, r3
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b34      	ldr	r3, [pc, #208]	; (8002268 <getrand+0x180>)
 8002198:	701a      	strb	r2, [r3, #0]
        	 blue = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 800219a:	f007 fbc5 	bl	8009928 <rand>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <getrand+0x17c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	fb92 f1f3 	sdiv	r1, r2, r3
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <getrand+0x188>)
 80021b8:	701a      	strb	r2, [r3, #0]
        	 red = 0;
 80021ba:	4b2c      	ldr	r3, [pc, #176]	; (800226c <getrand+0x184>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
        	 if(green==0 && blue==0) blue = 1;
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <getrand+0x180>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d138      	bne.n	800223a <getrand+0x152>
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <getrand+0x188>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d134      	bne.n	800223a <getrand+0x152>
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <getrand+0x188>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
          break;
 80021d6:	e030      	b.n	800223a <getrand+0x152>

        case 2:
        	 blue = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 80021d8:	f007 fba6 	bl	8009928 <rand>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <getrand+0x17c>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3302      	adds	r3, #2
 80021e4:	fb92 f1f3 	sdiv	r1, r2, r3
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <getrand+0x188>)
 80021f6:	701a      	strb	r2, [r3, #0]
        	 red = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 80021f8:	f007 fb96 	bl	8009928 <rand>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b19      	ldr	r3, [pc, #100]	; (8002264 <getrand+0x17c>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	fb92 f1f3 	sdiv	r1, r2, r3
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <getrand+0x184>)
 8002216:	701a      	strb	r2, [r3, #0]
        	 green = 0;
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <getrand+0x180>)
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
        	 if(blue==0 && red==0) red = 1;
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <getrand+0x188>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10b      	bne.n	800223e <getrand+0x156>
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <getrand+0x184>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <getrand+0x156>
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <getrand+0x184>)
 8002230:	2201      	movs	r2, #1
 8002232:	701a      	strb	r2, [r3, #0]
          break;
 8002234:	e003      	b.n	800223e <getrand+0x156>
          break;
 8002236:	bf00      	nop
 8002238:	e002      	b.n	8002240 <getrand+0x158>
          break;
 800223a:	bf00      	nop
 800223c:	e000      	b.n	8002240 <getrand+0x158>
          break;
 800223e:	bf00      	nop
      }

  Forecolor = ((uint32_t)green << 16) | ((uint32_t)red <<  8) | ((uint32_t)blue);
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <getrand+0x180>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <getrand+0x184>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	4313      	orrs	r3, r2
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <getrand+0x188>)
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <getrand+0x18c>)
 8002256:	6013      	str	r3, [r2, #0]
  //CDC_Transmit_FS(Forecolor, 4); //prints color value to USB virtual serial port



}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	55555556 	.word	0x55555556
 8002264:	20000004 	.word	0x20000004
 8002268:	2000079a 	.word	0x2000079a
 800226c:	2000079b 	.word	0x2000079b
 8002270:	2000079c 	.word	0x2000079c
 8002274:	20000000 	.word	0x20000000

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	e7fe      	b.n	8002280 <Error_Handler+0x8>
	...

08002284 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_SPI2_Init+0x64>)
 800228a:	4a18      	ldr	r2, [pc, #96]	; (80022ec <MX_SPI2_Init+0x68>)
 800228c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800228e:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <MX_SPI2_Init+0x64>)
 8002290:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002294:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_SPI2_Init+0x64>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_SPI2_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022b8:	2218      	movs	r2, #24
 80022ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022d0:	220a      	movs	r2, #10
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <MX_SPI2_Init+0x64>)
 80022d6:	f005 f941 	bl	800755c <HAL_SPI_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022e0:	f7ff ffca 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	200012c0 	.word	0x200012c0
 80022ec:	40003800 	.word	0x40003800

080022f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0310 	add.w	r3, r7, #16
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a29      	ldr	r2, [pc, #164]	; (80023b0 <HAL_SPI_MspInit+0xc0>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d14a      	bne.n	80023a6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231a:	61d3      	str	r3, [r2, #28]
 800231c:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b22      	ldr	r3, [pc, #136]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <HAL_SPI_MspInit+0xc4>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002340:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234e:	f107 0310 	add.w	r3, r7, #16
 8002352:	4619      	mov	r1, r3
 8002354:	4818      	ldr	r0, [pc, #96]	; (80023b8 <HAL_SPI_MspInit+0xc8>)
 8002356:	f001 fdb7 	bl	8003ec8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800235a:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0xd0>)
 800235e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 8002362:	2210      	movs	r2, #16
 8002364:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 800236e:	2280      	movs	r2, #128	; 0x80
 8002370:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 800237a:	2200      	movs	r2, #0
 800237c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 8002386:	2200      	movs	r2, #0
 8002388:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800238a:	480c      	ldr	r0, [pc, #48]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 800238c:	f001 fb2c 	bl	80039e8 <HAL_DMA_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8002396:	f7ff ff6f 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a07      	ldr	r2, [pc, #28]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 800239e:	649a      	str	r2, [r3, #72]	; 0x48
 80023a0:	4a06      	ldr	r2, [pc, #24]	; (80023bc <HAL_SPI_MspInit+0xcc>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023a6:	bf00      	nop
 80023a8:	3720      	adds	r7, #32
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40003800 	.word	0x40003800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010c00 	.word	0x40010c00
 80023bc:	20001318 	.word	0x20001318
 80023c0:	40020058 	.word	0x40020058

080023c4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60ba      	str	r2, [r7, #8]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4603      	mov	r3, r0
 80023d0:	81fb      	strh	r3, [r7, #14]
 80023d2:	460b      	mov	r3, r1
 80023d4:	81bb      	strh	r3, [r7, #12]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80023da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023de:	3307      	adds	r3, #7
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	da00      	bge.n	80023e6 <SSD1306_DrawBitmap+0x22>
 80023e4:	3307      	adds	r3, #7
 80023e6:	10db      	asrs	r3, r3, #3
 80023e8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	82bb      	strh	r3, [r7, #20]
 80023f2:	e044      	b.n	800247e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	827b      	strh	r3, [r7, #18]
 80023f8:	e02f      	b.n	800245a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80023fa:	8a7b      	ldrh	r3, [r7, #18]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002404:	7dfb      	ldrb	r3, [r7, #23]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	75fb      	strb	r3, [r7, #23]
 800240a:	e012      	b.n	8002432 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800240c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002410:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002414:	fb03 f202 	mul.w	r2, r3, r2
 8002418:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800241c:	2b00      	cmp	r3, #0
 800241e:	da00      	bge.n	8002422 <SSD1306_DrawBitmap+0x5e>
 8002420:	3307      	adds	r3, #7
 8002422:	10db      	asrs	r3, r3, #3
 8002424:	b21b      	sxth	r3, r3
 8002426:	4413      	add	r3, r2
 8002428:	461a      	mov	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da09      	bge.n	800244e <SSD1306_DrawBitmap+0x8a>
 800243a:	89fa      	ldrh	r2, [r7, #14]
 800243c:	8a7b      	ldrh	r3, [r7, #18]
 800243e:	4413      	add	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	89b9      	ldrh	r1, [r7, #12]
 8002444:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f000 f90f 	bl	800266c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800244e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002452:	b29b      	uxth	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	b29b      	uxth	r3, r3
 8002458:	827b      	strh	r3, [r7, #18]
 800245a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800245e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbc9      	blt.n	80023fa <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002466:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800246a:	b29b      	uxth	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	82bb      	strh	r3, [r7, #20]
 8002472:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002476:	b29b      	uxth	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	b29b      	uxth	r3, r3
 800247c:	81bb      	strh	r3, [r7, #12]
 800247e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002482:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002486:	429a      	cmp	r2, r3
 8002488:	dbb4      	blt.n	80023f4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800248a:	bf00      	nop
 800248c:	bf00      	nop
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <SSD1306_Init>:
 Added some hardware reset GPIO during the init();

 using dma for all pixel data transfers.
 **/

uint8_t SSD1306_Init(void) {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	//OLED Reset Pin (modified izzle)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2102      	movs	r1, #2
 800249c:	4864      	ldr	r0, [pc, #400]	; (8002630 <SSD1306_Init+0x19c>)
 800249e:	f001 fe97 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 80024a2:	2032      	movs	r0, #50	; 0x32
 80024a4:	f000 fd16 	bl	8002ed4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 80024a8:	2201      	movs	r2, #1
 80024aa:	2102      	movs	r1, #2
 80024ac:	4860      	ldr	r0, [pc, #384]	; (8002630 <SSD1306_Init+0x19c>)
 80024ae:	f001 fe8f 	bl	80041d0 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 80024b2:	2032      	movs	r0, #50	; 0x32
 80024b4:	f000 fd0e 	bl	8002ed4 <HAL_Delay>
	//end izzle

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80024b8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024bc:	2201      	movs	r2, #1
 80024be:	2178      	movs	r1, #120	; 0x78
 80024c0:	485c      	ldr	r0, [pc, #368]	; (8002634 <SSD1306_Init+0x1a0>)
 80024c2:	f002 fa2d 	bl	8004920 <HAL_I2C_IsDeviceReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e0ac      	b.n	800262a <SSD1306_Init+0x196>
	}
	
	/* A little delay */
	HAL_Delay(100);
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f000 fcff 	bl	8002ed4 <HAL_Delay>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80024d6:	22ae      	movs	r2, #174	; 0xae
 80024d8:	2100      	movs	r1, #0
 80024da:	2078      	movs	r0, #120	; 0x78
 80024dc:	f000 fa98 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode PAGE
 80024e0:	2220      	movs	r2, #32
 80024e2:	2100      	movs	r1, #0
 80024e4:	2078      	movs	r0, #120	; 0x78
 80024e6:	f000 fa93 	bl	8002a10 <ssd1306_I2C_Write>
	//SSD1306_WRITECOMMAND(0x10); //10   //00,Horizontal Addressing Mode; 01,Vertical Addressing Mode; 10,Page Addressing Mode (RESET);11,Invalid
	//SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7

	SSD1306_WRITECOMMAND(0x00); //izzle horizontal mode addressing
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	2078      	movs	r0, #120	; 0x78
 80024f0:	f000 fa8e 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //izzle set page range in Horizontal addressing
 80024f4:	2222      	movs	r2, #34	; 0x22
 80024f6:	2100      	movs	r1, #0
 80024f8:	2078      	movs	r0, #120	; 0x78
 80024fa:	f000 fa89 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //izzle page start 00
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	2078      	movs	r0, #120	; 0x78
 8002504:	f000 fa84 	bl	8002a10 <ssd1306_I2C_Write>
#if SSD1306_HEIGHT==32
		SSD1306_WRITECOMMAND(0x03); //izzle 128x32 Oled
 8002508:	2203      	movs	r2, #3
 800250a:	2100      	movs	r1, #0
 800250c:	2078      	movs	r0, #120	; 0x78
 800250e:	f000 fa7f 	bl	8002a10 <ssd1306_I2C_Write>
#else
		SSD1306_WRITECOMMAND(0x07); //izzle 128x64 Oled
#endif
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction //0xC8 or 0xC0
 8002512:	22c8      	movs	r2, #200	; 0xc8
 8002514:	2100      	movs	r1, #0
 8002516:	2078      	movs	r0, #120	; 0x78
 8002518:	f000 fa7a 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800251c:	2200      	movs	r2, #0
 800251e:	2100      	movs	r1, #0
 8002520:	2078      	movs	r0, #120	; 0x78
 8002522:	f000 fa75 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002526:	2210      	movs	r2, #16
 8002528:	2100      	movs	r1, #0
 800252a:	2078      	movs	r0, #120	; 0x78
 800252c:	f000 fa70 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002530:	2240      	movs	r2, #64	; 0x40
 8002532:	2100      	movs	r1, #0
 8002534:	2078      	movs	r0, #120	; 0x78
 8002536:	f000 fa6b 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800253a:	2281      	movs	r2, #129	; 0x81
 800253c:	2100      	movs	r1, #0
 800253e:	2078      	movs	r0, #120	; 0x78
 8002540:	f000 fa66 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	2100      	movs	r1, #0
 8002548:	2078      	movs	r0, #120	; 0x78
 800254a:	f000 fa61 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800254e:	22a1      	movs	r2, #161	; 0xa1
 8002550:	2100      	movs	r1, #0
 8002552:	2078      	movs	r0, #120	; 0x78
 8002554:	f000 fa5c 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002558:	22a6      	movs	r2, #166	; 0xa6
 800255a:	2100      	movs	r1, #0
 800255c:	2078      	movs	r0, #120	; 0x78
 800255e:	f000 fa57 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002562:	22a8      	movs	r2, #168	; 0xa8
 8002564:	2100      	movs	r1, #0
 8002566:	2078      	movs	r0, #120	; 0x78
 8002568:	f000 fa52 	bl	8002a10 <ssd1306_I2C_Write>
#if SSD1306_HEIGHT==32
		SSD1306_WRITECOMMAND(0x1F); //128x32 Oled
 800256c:	221f      	movs	r2, #31
 800256e:	2100      	movs	r1, #0
 8002570:	2078      	movs	r0, #120	; 0x78
 8002572:	f000 fa4d 	bl	8002a10 <ssd1306_I2C_Write>
#else
		SSD1306_WRITECOMMAND(0x3F); //128x64 Oled
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002576:	22a4      	movs	r2, #164	; 0xa4
 8002578:	2100      	movs	r1, #0
 800257a:	2078      	movs	r0, #120	; 0x78
 800257c:	f000 fa48 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002580:	22d3      	movs	r2, #211	; 0xd3
 8002582:	2100      	movs	r1, #0
 8002584:	2078      	movs	r0, #120	; 0x78
 8002586:	f000 fa43 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2078      	movs	r0, #120	; 0x78
 8002590:	f000 fa3e 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002594:	22d5      	movs	r2, #213	; 0xd5
 8002596:	2100      	movs	r1, #0
 8002598:	2078      	movs	r0, #120	; 0x78
 800259a:	f000 fa39 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800259e:	22f0      	movs	r2, #240	; 0xf0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2078      	movs	r0, #120	; 0x78
 80025a4:	f000 fa34 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80025a8:	22d9      	movs	r2, #217	; 0xd9
 80025aa:	2100      	movs	r1, #0
 80025ac:	2078      	movs	r0, #120	; 0x78
 80025ae:	f000 fa2f 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80025b2:	2222      	movs	r2, #34	; 0x22
 80025b4:	2100      	movs	r1, #0
 80025b6:	2078      	movs	r0, #120	; 0x78
 80025b8:	f000 fa2a 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80025bc:	22da      	movs	r2, #218	; 0xda
 80025be:	2100      	movs	r1, #0
 80025c0:	2078      	movs	r0, #120	; 0x78
 80025c2:	f000 fa25 	bl	8002a10 <ssd1306_I2C_Write>
#if SSD1306_HEIGHT==32
		SSD1306_WRITECOMMAND(0x02); //128x32 Oled
 80025c6:	2202      	movs	r2, #2
 80025c8:	2100      	movs	r1, #0
 80025ca:	2078      	movs	r0, #120	; 0x78
 80025cc:	f000 fa20 	bl	8002a10 <ssd1306_I2C_Write>
#else
		SSD1306_WRITECOMMAND(0x12); //128x64 Oled
#endif
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80025d0:	22db      	movs	r2, #219	; 0xdb
 80025d2:	2100      	movs	r1, #0
 80025d4:	2078      	movs	r0, #120	; 0x78
 80025d6:	f000 fa1b 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80025da:	2220      	movs	r2, #32
 80025dc:	2100      	movs	r1, #0
 80025de:	2078      	movs	r0, #120	; 0x78
 80025e0:	f000 fa16 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80025e4:	228d      	movs	r2, #141	; 0x8d
 80025e6:	2100      	movs	r1, #0
 80025e8:	2078      	movs	r0, #120	; 0x78
 80025ea:	f000 fa11 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80025ee:	2214      	movs	r2, #20
 80025f0:	2100      	movs	r1, #0
 80025f2:	2078      	movs	r0, #120	; 0x78
 80025f4:	f000 fa0c 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80025f8:	22af      	movs	r2, #175	; 0xaf
 80025fa:	2100      	movs	r1, #0
 80025fc:	2078      	movs	r0, #120	; 0x78
 80025fe:	f000 fa07 	bl	8002a10 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002602:	222e      	movs	r2, #46	; 0x2e
 8002604:	2100      	movs	r1, #0
 8002606:	2078      	movs	r0, #120	; 0x78
 8002608:	f000 fa02 	bl	8002a10 <ssd1306_I2C_Write>

	//HAL_Delay(500);
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800260c:	2000      	movs	r0, #0
 800260e:	f000 f815 	bl	800263c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002612:	f000 f9d9 	bl	80029c8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <SSD1306_Init+0x1a4>)
 8002618:	2200      	movs	r2, #0
 800261a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SSD1306_Init+0x1a4>)
 800261e:	2200      	movs	r2, #0
 8002620:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SSD1306_Init+0x1a4>)
 8002624:	2201      	movs	r2, #1
 8002626:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40010c00 	.word	0x40010c00
 8002634:	200000fc 	.word	0x200000fc
 8002638:	2000155c 	.word	0x2000155c

0800263c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <SSD1306_Fill+0x14>
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <SSD1306_Fill+0x16>
 8002650:	23ff      	movs	r3, #255	; 0xff
 8002652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002656:	4619      	mov	r1, r3
 8002658:	4803      	ldr	r0, [pc, #12]	; (8002668 <SSD1306_Fill+0x2c>)
 800265a:	f007 f95d 	bl	8009918 <memset>
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	2000135c 	.word	0x2000135c

0800266c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
 8002676:	460b      	mov	r3, r1
 8002678:	80bb      	strh	r3, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	70fb      	strb	r3, [r7, #3]
	if (
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b7f      	cmp	r3, #127	; 0x7f
 8002682:	d848      	bhi.n	8002716 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	2b1f      	cmp	r3, #31
 8002688:	d845      	bhi.n	8002716 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <SSD1306_DrawPixel+0xb4>)
 800268c:	791b      	ldrb	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d006      	beq.n	80026a0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	2b00      	cmp	r3, #0
 8002696:	bf0c      	ite	eq
 8002698:	2301      	moveq	r3, #1
 800269a:	2300      	movne	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d11a      	bne.n	80026dc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	08db      	lsrs	r3, r3, #3
 80026ac:	b298      	uxth	r0, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	4413      	add	r3, r2
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <SSD1306_DrawPixel+0xb8>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	b25a      	sxtb	r2, r3
 80026ba:	88bb      	ldrh	r3, [r7, #4]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b259      	sxtb	r1, r3
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	4603      	mov	r3, r0
 80026d0:	01db      	lsls	r3, r3, #7
 80026d2:	4413      	add	r3, r2
 80026d4:	b2c9      	uxtb	r1, r1
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <SSD1306_DrawPixel+0xb8>)
 80026d8:	54d1      	strb	r1, [r2, r3]
 80026da:	e01d      	b.n	8002718 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026dc:	88fa      	ldrh	r2, [r7, #6]
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	b298      	uxth	r0, r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	4413      	add	r3, r2
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <SSD1306_DrawPixel+0xb8>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	b25a      	sxtb	r2, r3
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	2101      	movs	r1, #1
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	43db      	mvns	r3, r3
 8002700:	b25b      	sxtb	r3, r3
 8002702:	4013      	ands	r3, r2
 8002704:	b259      	sxtb	r1, r3
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	4603      	mov	r3, r0
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	4413      	add	r3, r2
 800270e:	b2c9      	uxtb	r1, r1
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <SSD1306_DrawPixel+0xb8>)
 8002712:	54d1      	strb	r1, [r2, r3]
 8002714:	e000      	b.n	8002718 <SSD1306_DrawPixel+0xac>
		return;
 8002716:	bf00      	nop
	}
}
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	2000155c 	.word	0x2000155c
 8002724:	2000135c 	.word	0x2000135c

08002728 <SSD1306_DrawLine>:
	return *str;
}
 

//Todo: this sucks. all you need is to use y=mx+b. m=(y2-y1)/(x2-x1)
void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	4604      	mov	r4, r0
 8002730:	4608      	mov	r0, r1
 8002732:	4611      	mov	r1, r2
 8002734:	461a      	mov	r2, r3
 8002736:	4623      	mov	r3, r4
 8002738:	80fb      	strh	r3, [r7, #6]
 800273a:	4603      	mov	r3, r0
 800273c:	80bb      	strh	r3, [r7, #4]
 800273e:	460b      	mov	r3, r1
 8002740:	807b      	strh	r3, [r7, #2]
 8002742:	4613      	mov	r3, r2
 8002744:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	2b7f      	cmp	r3, #127	; 0x7f
 800274a:	d901      	bls.n	8002750 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800274c:	237f      	movs	r3, #127	; 0x7f
 800274e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	2b7f      	cmp	r3, #127	; 0x7f
 8002754:	d901      	bls.n	800275a <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002756:	237f      	movs	r3, #127	; 0x7f
 8002758:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800275a:	88bb      	ldrh	r3, [r7, #4]
 800275c:	2b1f      	cmp	r3, #31
 800275e:	d901      	bls.n	8002764 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002760:	231f      	movs	r3, #31
 8002762:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002764:	883b      	ldrh	r3, [r7, #0]
 8002766:	2b1f      	cmp	r3, #31
 8002768:	d901      	bls.n	800276e <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800276a:	231f      	movs	r3, #31
 800276c:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	887b      	ldrh	r3, [r7, #2]
 8002772:	429a      	cmp	r2, r3
 8002774:	d205      	bcs.n	8002782 <SSD1306_DrawLine+0x5a>
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	88fb      	ldrh	r3, [r7, #6]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	b29b      	uxth	r3, r3
 800277e:	b21b      	sxth	r3, r3
 8002780:	e004      	b.n	800278c <SSD1306_DrawLine+0x64>
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	887b      	ldrh	r3, [r7, #2]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	b29b      	uxth	r3, r3
 800278a:	b21b      	sxth	r3, r3
 800278c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800278e:	88ba      	ldrh	r2, [r7, #4]
 8002790:	883b      	ldrh	r3, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d205      	bcs.n	80027a2 <SSD1306_DrawLine+0x7a>
 8002796:	883a      	ldrh	r2, [r7, #0]
 8002798:	88bb      	ldrh	r3, [r7, #4]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	b21b      	sxth	r3, r3
 80027a0:	e004      	b.n	80027ac <SSD1306_DrawLine+0x84>
 80027a2:	88ba      	ldrh	r2, [r7, #4]
 80027a4:	883b      	ldrh	r3, [r7, #0]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80027ae:	88fa      	ldrh	r2, [r7, #6]
 80027b0:	887b      	ldrh	r3, [r7, #2]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d201      	bcs.n	80027ba <SSD1306_DrawLine+0x92>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e001      	b.n	80027be <SSD1306_DrawLine+0x96>
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80027c0:	88ba      	ldrh	r2, [r7, #4]
 80027c2:	883b      	ldrh	r3, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d201      	bcs.n	80027cc <SSD1306_DrawLine+0xa4>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e001      	b.n	80027d0 <SSD1306_DrawLine+0xa8>
 80027cc:	f04f 33ff 	mov.w	r3, #4294967295
 80027d0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80027d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dd06      	ble.n	80027ec <SSD1306_DrawLine+0xc4>
 80027de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027e2:	0fda      	lsrs	r2, r3, #31
 80027e4:	4413      	add	r3, r2
 80027e6:	105b      	asrs	r3, r3, #1
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	e006      	b.n	80027fa <SSD1306_DrawLine+0xd2>
 80027ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027f0:	0fda      	lsrs	r2, r3, #31
 80027f2:	4413      	add	r3, r2
 80027f4:	105b      	asrs	r3, r3, #1
 80027f6:	425b      	negs	r3, r3
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80027fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d129      	bne.n	8002858 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8002804:	883a      	ldrh	r2, [r7, #0]
 8002806:	88bb      	ldrh	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d205      	bcs.n	8002818 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800280c:	883b      	ldrh	r3, [r7, #0]
 800280e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002810:	88bb      	ldrh	r3, [r7, #4]
 8002812:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002814:	893b      	ldrh	r3, [r7, #8]
 8002816:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002818:	887a      	ldrh	r2, [r7, #2]
 800281a:	88fb      	ldrh	r3, [r7, #6]
 800281c:	429a      	cmp	r2, r3
 800281e:	d205      	bcs.n	800282c <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800282c:	88bb      	ldrh	r3, [r7, #4]
 800282e:	82bb      	strh	r3, [r7, #20]
 8002830:	e00c      	b.n	800284c <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002832:	8ab9      	ldrh	r1, [r7, #20]
 8002834:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff16 	bl	800266c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002840:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002844:	b29b      	uxth	r3, r3
 8002846:	3301      	adds	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	82bb      	strh	r3, [r7, #20]
 800284c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002850:	883b      	ldrh	r3, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	dded      	ble.n	8002832 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002856:	e05f      	b.n	8002918 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8002858:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d129      	bne.n	80028b4 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002860:	883a      	ldrh	r2, [r7, #0]
 8002862:	88bb      	ldrh	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d205      	bcs.n	8002874 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002868:	883b      	ldrh	r3, [r7, #0]
 800286a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800286c:	88bb      	ldrh	r3, [r7, #4]
 800286e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002874:	887a      	ldrh	r2, [r7, #2]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	429a      	cmp	r2, r3
 800287a:	d205      	bcs.n	8002888 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002880:	88fb      	ldrh	r3, [r7, #6]
 8002882:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002884:	893b      	ldrh	r3, [r7, #8]
 8002886:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002888:	88fb      	ldrh	r3, [r7, #6]
 800288a:	82bb      	strh	r3, [r7, #20]
 800288c:	e00c      	b.n	80028a8 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800288e:	8abb      	ldrh	r3, [r7, #20]
 8002890:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002894:	88b9      	ldrh	r1, [r7, #4]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fee8 	bl	800266c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800289c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	82bb      	strh	r3, [r7, #20]
 80028a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	dded      	ble.n	800288e <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80028b2:	e031      	b.n	8002918 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80028b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80028b8:	88b9      	ldrh	r1, [r7, #4]
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fed5 	bl	800266c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	887b      	ldrh	r3, [r7, #2]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d103      	bne.n	80028d2 <SSD1306_DrawLine+0x1aa>
 80028ca:	88ba      	ldrh	r2, [r7, #4]
 80028cc:	883b      	ldrh	r3, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d021      	beq.n	8002916 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80028d2:	8afb      	ldrh	r3, [r7, #22]
 80028d4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80028d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80028da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028de:	425b      	negs	r3, r3
 80028e0:	429a      	cmp	r2, r3
 80028e2:	dd08      	ble.n	80028f6 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80028e4:	8afa      	ldrh	r2, [r7, #22]
 80028e6:	8a3b      	ldrh	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80028ee:	89fa      	ldrh	r2, [r7, #14]
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	4413      	add	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80028f6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80028fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028fe:	429a      	cmp	r2, r3
 8002900:	dad8      	bge.n	80028b4 <SSD1306_DrawLine+0x18c>
			err += dx;
 8002902:	8afa      	ldrh	r2, [r7, #22]
 8002904:	8a7b      	ldrh	r3, [r7, #18]
 8002906:	4413      	add	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 800290c:	89ba      	ldrh	r2, [r7, #12]
 800290e:	88bb      	ldrh	r3, [r7, #4]
 8002910:	4413      	add	r3, r2
 8002912:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002914:	e7ce      	b.n	80028b4 <SSD1306_DrawLine+0x18c>
			break;
 8002916:	bf00      	nop
		} 
	}
}
 8002918:	371c      	adds	r7, #28
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}

0800291e <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800291e:	b590      	push	{r4, r7, lr}
 8002920:	b087      	sub	sp, #28
 8002922:	af02      	add	r7, sp, #8
 8002924:	4604      	mov	r4, r0
 8002926:	4608      	mov	r0, r1
 8002928:	4611      	mov	r1, r2
 800292a:	461a      	mov	r2, r3
 800292c:	4623      	mov	r3, r4
 800292e:	80fb      	strh	r3, [r7, #6]
 8002930:	4603      	mov	r3, r0
 8002932:	80bb      	strh	r3, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
 8002938:	4613      	mov	r3, r2
 800293a:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	2b7f      	cmp	r3, #127	; 0x7f
 8002940:	d836      	bhi.n	80029b0 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8002942:	88bb      	ldrh	r3, [r7, #4]
 8002944:	2b1f      	cmp	r3, #31
 8002946:	d833      	bhi.n	80029b0 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	887b      	ldrh	r3, [r7, #2]
 800294c:	4413      	add	r3, r2
 800294e:	2b7f      	cmp	r3, #127	; 0x7f
 8002950:	dd03      	ble.n	800295a <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002958:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800295a:	88ba      	ldrh	r2, [r7, #4]
 800295c:	883b      	ldrh	r3, [r7, #0]
 800295e:	4413      	add	r3, r2
 8002960:	2b1f      	cmp	r3, #31
 8002962:	dd03      	ble.n	800296c <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002964:	88bb      	ldrh	r3, [r7, #4]
 8002966:	f1c3 0320 	rsb	r3, r3, #32
 800296a:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
 8002970:	e018      	b.n	80029a4 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	b29a      	uxth	r2, r3
 8002976:	88bb      	ldrh	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	b299      	uxth	r1, r3
 800297c:	88fa      	ldrh	r2, [r7, #6]
 800297e:	887b      	ldrh	r3, [r7, #2]
 8002980:	4413      	add	r3, r2
 8002982:	b29c      	uxth	r4, r3
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	b29a      	uxth	r2, r3
 8002988:	88bb      	ldrh	r3, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	b29a      	uxth	r2, r3
 800298e:	88f8      	ldrh	r0, [r7, #6]
 8002990:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	4622      	mov	r2, r4
 800299a:	f7ff fec5 	bl	8002728 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	3301      	adds	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	883a      	ldrh	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d2e1      	bcs.n	8002972 <SSD1306_DrawFilledRectangle+0x54>
 80029ae:	e000      	b.n	80029b2 <SSD1306_DrawFilledRectangle+0x94>
		return;
 80029b0:	bf00      	nop
	}
}
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}

080029b8 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fe3d 	bl	800263c <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <SSD1306_UpdateScreen>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////


void SSD1306_UpdateScreen(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af02      	add	r7, sp, #8
//changed the ssd1306 from page mode to "horizontal" mode 0x00. Now it auto-increments the pages.
//I think I am only getting HALF the framerate. because the ssd1306 has 8 pages.
// 8 pages is needed for a 64x128 Oled but only 4 pages is needed for a 32x128 Oled.
//so im fulling up page buffers on the SSD1306 that are not visible. But, the code is much simpler/faster now.
	//*** I fixed the above issue by setting the ssd1306 END PAGE to 3 (it was 7 but my oled only has 32 rows = 4 pages)
	while(hdma_i2c1_tx.State != HAL_DMA_STATE_READY); //these could be if statements if UpdateScreen was called in a timer.
 80029ce:	bf00      	nop
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <SSD1306_UpdateScreen+0x3c>)
 80029d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d1fa      	bne.n	80029d0 <SSD1306_UpdateScreen+0x8>
	while(hi2c1.State != HAL_I2C_STATE_READY); //dma check to transmit. should be a if statement to prevent blocking
 80029da:	bf00      	nop
 80029dc:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <SSD1306_UpdateScreen+0x40>)
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d1f9      	bne.n	80029dc <SSD1306_UpdateScreen+0x14>
	HAL_I2C_Mem_Write_DMA(&hi2c1, SSD1306_I2C_ADDR, 0x40, I2C_MEMADD_SIZE_8BIT, SSD1306_Buffer, BUFFER_SIZE);
 80029e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <SSD1306_UpdateScreen+0x44>)
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	2301      	movs	r3, #1
 80029f4:	2240      	movs	r2, #64	; 0x40
 80029f6:	2178      	movs	r1, #120	; 0x78
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <SSD1306_UpdateScreen+0x40>)
 80029fa:	f001 fe43 	bl	8004684 <HAL_I2C_Mem_Write_DMA>
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000150 	.word	0x20000150
 8002a08:	200000fc 	.word	0x200000fc
 8002a0c:	2000135c 	.word	0x2000135c

08002a10 <ssd1306_I2C_Write>:


//blocking mode for control commands
void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	71bb      	strb	r3, [r7, #6]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002a26:	797b      	ldrb	r3, [r7, #5]
 8002a28:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	b299      	uxth	r1, r3
 8002a2e:	f107 020c 	add.w	r2, r7, #12
 8002a32:	230a      	movs	r3, #10
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2302      	movs	r3, #2
 8002a38:	4803      	ldr	r0, [pc, #12]	; (8002a48 <ssd1306_I2C_Write+0x38>)
 8002a3a:	f001 fd25 	bl	8004488 <HAL_I2C_Master_Transmit>
}
 8002a3e:	bf00      	nop
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	200000fc 	.word	0x200000fc

08002a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a52:	4b15      	ldr	r3, [pc, #84]	; (8002aa8 <HAL_MspInit+0x5c>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	4a14      	ldr	r2, [pc, #80]	; (8002aa8 <HAL_MspInit+0x5c>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6193      	str	r3, [r2, #24]
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_MspInit+0x5c>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_MspInit+0x5c>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <HAL_MspInit+0x5c>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	61d3      	str	r3, [r2, #28]
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <HAL_MspInit+0x5c>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_MspInit+0x60>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_MspInit+0x60>)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000

08002ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ab4:	e7fe      	b.n	8002ab4 <NMI_Handler+0x4>

08002ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aba:	e7fe      	b.n	8002aba <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac6:	e7fe      	b.n	8002ac6 <BusFault_Handler+0x4>

08002ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <UsageFault_Handler+0x4>

08002ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002af6:	f000 f9d1 	bl	8002e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002b04:	4802      	ldr	r0, [pc, #8]	; (8002b10 <DMA1_Channel5_IRQHandler+0x10>)
 8002b06:	f001 f89f 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20001318 	.word	0x20001318

08002b14 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <DMA1_Channel6_IRQHandler+0x10>)
 8002b1a:	f001 f895 	bl	8003c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000150 	.word	0x20000150

08002b28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b2c:	4802      	ldr	r0, [pc, #8]	; (8002b38 <TIM3_IRQHandler+0x10>)
 8002b2e:	f005 f833 	bl	8007b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	20001568 	.word	0x20001568

08002b3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <I2C1_EV_IRQHandler+0x10>)
 8002b42:	f002 f81b 	bl	8004b7c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200000fc 	.word	0x200000fc

08002b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
	return 1;
 8002b54:	2301      	movs	r3, #1
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <_kill>:

int _kill(int pid, int sig)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b68:	f006 feac 	bl	80098c4 <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2216      	movs	r2, #22
 8002b70:	601a      	str	r2, [r3, #0]
	return -1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_exit>:

void _exit (int status)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b86:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffe7 	bl	8002b5e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b90:	e7fe      	b.n	8002b90 <_exit+0x12>

08002b92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e00a      	b.n	8002bba <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	4601      	mov	r1, r0
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	60ba      	str	r2, [r7, #8]
 8002bb0:	b2ca      	uxtb	r2, r1
 8002bb2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	dbf0      	blt.n	8002ba4 <_read+0x12>
	}

return len;
 8002bc2:	687b      	ldr	r3, [r7, #4]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e009      	b.n	8002bf2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	60ba      	str	r2, [r7, #8]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	dbf1      	blt.n	8002bde <_write+0x12>
	}
	return len;
 8002bfa:	687b      	ldr	r3, [r7, #4]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_close>:

int _close(int file)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c2a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <_isatty>:

int _isatty(int file)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c40:	2301      	movs	r3, #1
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <_sbrk+0x5c>)
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <_sbrk+0x60>)
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c80:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_sbrk+0x64>)
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <_sbrk+0x68>)
 8002c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_sbrk+0x64>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d207      	bcs.n	8002ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c94:	f006 fe16 	bl	80098c4 <__errno>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	220c      	movs	r2, #12
 8002c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca2:	e009      	b.n	8002cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <_sbrk+0x64>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <_sbrk+0x64>)
 8002cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3718      	adds	r7, #24
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20005000 	.word	0x20005000
 8002cc4:	00000400 	.word	0x00000400
 8002cc8:	20001564 	.word	0x20001564
 8002ccc:	200015c8 	.word	0x200015c8

08002cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd4:	bf00      	nop
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bc80      	pop	{r7}
 8002cda:	4770      	bx	lr

08002cdc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <MX_TIM3_Init+0x98>)
 8002cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d0c:	f240 7207 	movw	r2, #1799	; 0x707
 8002d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d12:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d18:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d1e:	4814      	ldr	r0, [pc, #80]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d20:	f004 fe98 	bl	8007a54 <HAL_TIM_Base_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d2a:	f7ff faa5 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d34:	f107 0308 	add.w	r3, r7, #8
 8002d38:	4619      	mov	r1, r3
 8002d3a:	480d      	ldr	r0, [pc, #52]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d3c:	f005 f834 	bl	8007da8 <HAL_TIM_ConfigClockSource>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d46:	f7ff fa97 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d52:	463b      	mov	r3, r7
 8002d54:	4619      	mov	r1, r3
 8002d56:	4806      	ldr	r0, [pc, #24]	; (8002d70 <MX_TIM3_Init+0x94>)
 8002d58:	f005 fa06 	bl	8008168 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d62:	f7ff fa89 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20001568 	.word	0x20001568
 8002d74:	40000400 	.word	0x40000400

08002d78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	; (8002dbc <HAL_TIM_Base_MspInit+0x44>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_TIM_Base_MspInit+0x48>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_TIM_Base_MspInit+0x48>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	61d3      	str	r3, [r2, #28]
 8002d96:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <HAL_TIM_Base_MspInit+0x48>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2102      	movs	r1, #2
 8002da6:	201d      	movs	r0, #29
 8002da8:	f000 fde7 	bl	800397a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dac:	201d      	movs	r0, #29
 8002dae:	f000 fe00 	bl	80039b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc4:	480c      	ldr	r0, [pc, #48]	; (8002df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dc6:	490d      	ldr	r1, [pc, #52]	; (8002dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dcc:	e002      	b.n	8002dd4 <LoopCopyDataInit>

08002dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd2:	3304      	adds	r3, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd8:	d3f9      	bcc.n	8002dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ddc:	4c0a      	ldr	r4, [pc, #40]	; (8002e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de0:	e001      	b.n	8002de6 <LoopFillZerobss>

08002de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de4:	3204      	adds	r2, #4

08002de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de8:	d3fb      	bcc.n	8002de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dea:	f7ff ff71 	bl	8002cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dee:	f006 fd6f 	bl	80098d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002df2:	f7fe f88d 	bl	8000f10 <main>
  bx lr
 8002df6:	4770      	bx	lr
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002e00:	0800b3c8 	.word	0x0800b3c8
  ldr r2, =_sbss
 8002e04:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002e08:	200015c4 	.word	0x200015c4

08002e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC1_2_IRQHandler>
	...

08002e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <HAL_Init+0x28>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a07      	ldr	r2, [pc, #28]	; (8002e38 <HAL_Init+0x28>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 fd9f 	bl	8003964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e26:	200f      	movs	r0, #15
 8002e28:	f000 f808 	bl	8002e3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e2c:	f7ff fe0e 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40022000 	.word	0x40022000

08002e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_InitTick+0x54>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_InitTick+0x58>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fdb7 	bl	80039ce <HAL_SYSTICK_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00e      	b.n	8002e88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d80a      	bhi.n	8002e86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295
 8002e78:	f000 fd7f 	bl	800397a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <HAL_InitTick+0x5c>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	e000      	b.n	8002e88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000010 	.word	0x20000010
 8002e94:	20000018 	.word	0x20000018
 8002e98:	20000014 	.word	0x20000014

08002e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_IncTick+0x1c>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_IncTick+0x20>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4413      	add	r3, r2
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_IncTick+0x20>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000018 	.word	0x20000018
 8002ebc:	200015b0 	.word	0x200015b0

08002ec0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_GetTick+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	200015b0 	.word	0x200015b0

08002ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_GetTick>
 8002ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d005      	beq.n	8002efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <HAL_Delay+0x44>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efa:	bf00      	nop
 8002efc:	f7ff ffe0 	bl	8002ec0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d8f7      	bhi.n	8002efc <HAL_Delay+0x28>
  {
  }
}
 8002f0c:	bf00      	nop
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000018 	.word	0x20000018

08002f1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0be      	b.n	80030bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd fe08 	bl	8000b70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbf1 	bl	8003748 <ADC_ConversionStop_Disable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 8099 	bne.w	80030aa <HAL_ADC_Init+0x18e>
 8002f78:	7dfb      	ldrb	r3, [r7, #23]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 8095 	bne.w	80030aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f88:	f023 0302 	bic.w	r3, r3, #2
 8002f8c:	f043 0202 	orr.w	r2, r3, #2
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f9c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7b1b      	ldrb	r3, [r3, #12]
 8002fa2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002fa4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb4:	d003      	beq.n	8002fbe <HAL_ADC_Init+0xa2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_Init+0xa8>
 8002fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_Init+0xaa>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7d1b      	ldrb	r3, [r3, #20]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d119      	bne.n	8003008 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7b1b      	ldrb	r3, [r3, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	035a      	lsls	r2, r3, #13
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	e00b      	b.n	8003008 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f043 0201 	orr.w	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_ADC_Init+0x1a8>)
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	68b9      	ldr	r1, [r7, #8]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d003      	beq.n	8003042 <HAL_ADC_Init+0x126>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d104      	bne.n	800304c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	3b01      	subs	r3, #1
 8003048:	051b      	lsls	r3, r3, #20
 800304a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	430a      	orrs	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_ADC_Init+0x1ac>)
 8003068:	4013      	ands	r3, r2
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003086:	e018      	b.n	80030ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	f023 0312 	bic.w	r3, r3, #18
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030a8:	e007      	b.n	80030ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	ffe1f7fd 	.word	0xffe1f7fd
 80030c8:	ff1f0efe 	.word	0xff1f0efe

080030cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Start+0x1a>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e098      	b.n	8003218 <HAL_ADC_Start+0x14c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fad0 	bl	8003694 <ADC_Enable>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8087 	bne.w	800320e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a41      	ldr	r2, [pc, #260]	; (8003220 <HAL_ADC_Start+0x154>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d105      	bne.n	800312a <HAL_ADC_Start+0x5e>
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_ADC_Start+0x158>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d115      	bne.n	8003156 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d026      	beq.n	8003192 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800314c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003154:	e01d      	b.n	8003192 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <HAL_ADC_Start+0x158>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_ADC_Start+0xaa>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2b      	ldr	r2, [pc, #172]	; (8003220 <HAL_ADC_Start+0x154>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d10d      	bne.n	8003192 <HAL_ADC_Start+0xc6>
 8003176:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_ADC_Start+0x158>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800318a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d006      	beq.n	80031ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f023 0206 	bic.w	r2, r3, #6
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80031aa:	e002      	b.n	80031b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0202 	mvn.w	r2, #2
 80031c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031d2:	d113      	bne.n	80031fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031d8:	4a11      	ldr	r2, [pc, #68]	; (8003220 <HAL_ADC_Start+0x154>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d105      	bne.n	80031ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031de:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_ADC_Start+0x158>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d108      	bne.n	80031fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	e00c      	b.n	8003216 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e003      	b.n	8003216 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40012800 	.word	0x40012800
 8003224:	40012400 	.word	0x40012400

08003228 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_ADC_Stop+0x1a>
 800323e:	2302      	movs	r3, #2
 8003240:	e01a      	b.n	8003278 <HAL_ADC_Stop+0x50>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fa7c 	bl	8003748 <ADC_ConversionStop_Disable>
 8003250:	4603      	mov	r3, r0
 8003252:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	f043 0201 	orr.w	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003296:	f7ff fe13 	bl	8002ec0 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	f043 0220 	orr.w	r2, r3, #32
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0d3      	b.n	800346a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d131      	bne.n	8003334 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d12a      	bne.n	8003334 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032de:	e021      	b.n	8003324 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e6:	d01d      	beq.n	8003324 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_ADC_PollForConversion+0x7e>
 80032ee:	f7ff fde7 	bl	8002ec0 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d212      	bcs.n	8003324 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f043 0204 	orr.w	r2, r3, #4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0a2      	b.n	800346a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0d6      	beq.n	80032e0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003332:	e070      	b.n	8003416 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003334:	4b4f      	ldr	r3, [pc, #316]	; (8003474 <HAL_ADC_PollForConversion+0x1f4>)
 8003336:	681c      	ldr	r4, [r3, #0]
 8003338:	2002      	movs	r0, #2
 800333a:	f004 f84f 	bl	80073dc <HAL_RCCEx_GetPeriphCLKFreq>
 800333e:	4603      	mov	r3, r0
 8003340:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6919      	ldr	r1, [r3, #16]
 800334a:	4b4b      	ldr	r3, [pc, #300]	; (8003478 <HAL_ADC_PollForConversion+0x1f8>)
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_ADC_PollForConversion+0x104>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68d9      	ldr	r1, [r3, #12]
 8003358:	4b48      	ldr	r3, [pc, #288]	; (800347c <HAL_ADC_PollForConversion+0x1fc>)
 800335a:	400b      	ands	r3, r1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d111      	bne.n	8003384 <HAL_ADC_PollForConversion+0x104>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	4b46      	ldr	r3, [pc, #280]	; (8003480 <HAL_ADC_PollForConversion+0x200>)
 8003368:	400b      	ands	r3, r1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d108      	bne.n	8003380 <HAL_ADC_PollForConversion+0x100>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68d9      	ldr	r1, [r3, #12]
 8003374:	4b43      	ldr	r3, [pc, #268]	; (8003484 <HAL_ADC_PollForConversion+0x204>)
 8003376:	400b      	ands	r3, r1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_PollForConversion+0x100>
 800337c:	2314      	movs	r3, #20
 800337e:	e020      	b.n	80033c2 <HAL_ADC_PollForConversion+0x142>
 8003380:	2329      	movs	r3, #41	; 0x29
 8003382:	e01e      	b.n	80033c2 <HAL_ADC_PollForConversion+0x142>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6919      	ldr	r1, [r3, #16]
 800338a:	4b3d      	ldr	r3, [pc, #244]	; (8003480 <HAL_ADC_PollForConversion+0x200>)
 800338c:	400b      	ands	r3, r1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_ADC_PollForConversion+0x120>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68d9      	ldr	r1, [r3, #12]
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_ADC_PollForConversion+0x204>)
 800339a:	400b      	ands	r3, r1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <HAL_ADC_PollForConversion+0x13c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6919      	ldr	r1, [r3, #16]
 80033a6:	4b38      	ldr	r3, [pc, #224]	; (8003488 <HAL_ADC_PollForConversion+0x208>)
 80033a8:	400b      	ands	r3, r1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <HAL_ADC_PollForConversion+0x140>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68d9      	ldr	r1, [r3, #12]
 80033b4:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_ADC_PollForConversion+0x208>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_PollForConversion+0x140>
 80033bc:	2354      	movs	r3, #84	; 0x54
 80033be:	e000      	b.n	80033c2 <HAL_ADC_PollForConversion+0x142>
 80033c0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033c8:	e021      	b.n	800340e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d01a      	beq.n	8003408 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d007      	beq.n	80033e8 <HAL_ADC_PollForConversion+0x168>
 80033d8:	f7ff fd72 	bl	8002ec0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d20f      	bcs.n	8003408 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d90b      	bls.n	8003408 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e030      	b.n	800346a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	d8d9      	bhi.n	80033ca <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f06f 0212 	mvn.w	r2, #18
 800341e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003436:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800343a:	d115      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003440:	2b00      	cmp	r3, #0
 8003442:	d111      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f043 0201 	orr.w	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	371c      	adds	r7, #28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd90      	pop	{r4, r7, pc}
 8003472:	bf00      	nop
 8003474:	20000010 	.word	0x20000010
 8003478:	24924924 	.word	0x24924924
 800347c:	00924924 	.word	0x00924924
 8003480:	12492492 	.word	0x12492492
 8003484:	00492492 	.word	0x00492492
 8003488:	00249249 	.word	0x00249249

0800348c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x20>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e0dc      	b.n	800367e <HAL_ADC_ConfigChannel+0x1da>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b06      	cmp	r3, #6
 80034d2:	d81c      	bhi.n	800350e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b05      	subs	r3, #5
 80034e6:	221f      	movs	r2, #31
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4019      	ands	r1, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	3b05      	subs	r3, #5
 8003500:	fa00 f203 	lsl.w	r2, r0, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	635a      	str	r2, [r3, #52]	; 0x34
 800350c:	e03c      	b.n	8003588 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d81c      	bhi.n	8003550 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	3b23      	subs	r3, #35	; 0x23
 8003528:	221f      	movs	r2, #31
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43db      	mvns	r3, r3
 8003530:	4019      	ands	r1, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6818      	ldr	r0, [r3, #0]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	3b23      	subs	r3, #35	; 0x23
 8003542:	fa00 f203 	lsl.w	r2, r0, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
 800354e:	e01b      	b.n	8003588 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	3b41      	subs	r3, #65	; 0x41
 8003562:	221f      	movs	r2, #31
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	4019      	ands	r1, r3
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	3b41      	subs	r3, #65	; 0x41
 800357c:	fa00 f203 	lsl.w	r2, r0, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b09      	cmp	r3, #9
 800358e:	d91c      	bls.n	80035ca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68d9      	ldr	r1, [r3, #12]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	3b1e      	subs	r3, #30
 80035a2:	2207      	movs	r2, #7
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	4019      	ands	r1, r3
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6898      	ldr	r0, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	3b1e      	subs	r3, #30
 80035bc:	fa00 f203 	lsl.w	r2, r0, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	e019      	b.n	80035fe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6919      	ldr	r1, [r3, #16]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	2207      	movs	r2, #7
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	4019      	ands	r1, r3
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	6898      	ldr	r0, [r3, #8]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	fa00 f203 	lsl.w	r2, r0, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d003      	beq.n	800360e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800360a:	2b11      	cmp	r3, #17
 800360c:	d132      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <HAL_ADC_ConfigChannel+0x1e4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d125      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d126      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003634:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b10      	cmp	r3, #16
 800363c:	d11a      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_ADC_ConfigChannel+0x1e8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <HAL_ADC_ConfigChannel+0x1ec>)
 8003644:	fba2 2303 	umull	r2, r3, r2, r3
 8003648:	0c9a      	lsrs	r2, r3, #18
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003654:	e002      	b.n	800365c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3b01      	subs	r3, #1
 800365a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f9      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x1b2>
 8003662:	e007      	b.n	8003674 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	f043 0220 	orr.w	r2, r3, #32
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40012400 	.word	0x40012400
 800368c:	20000010 	.word	0x20000010
 8003690:	431bde83 	.word	0x431bde83

08003694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d040      	beq.n	8003734 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <ADC_Enable+0xac>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <ADC_Enable+0xb0>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	0c9b      	lsrs	r3, r3, #18
 80036ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036d0:	e002      	b.n	80036d8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f9      	bne.n	80036d2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036de:	f7ff fbef 	bl	8002ec0 <HAL_GetTick>
 80036e2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036e4:	e01f      	b.n	8003726 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036e6:	f7ff fbeb 	bl	8002ec0 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d918      	bls.n	8003726 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d011      	beq.n	8003726 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003706:	f043 0210 	orr.w	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	f043 0201 	orr.w	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e007      	b.n	8003736 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d1d8      	bne.n	80036e6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20000010 	.word	0x20000010
 8003744:	431bde83 	.word	0x431bde83

08003748 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d12e      	bne.n	80037c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0201 	bic.w	r2, r2, #1
 8003770:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003772:	f7ff fba5 	bl	8002ec0 <HAL_GetTick>
 8003776:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003778:	e01b      	b.n	80037b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800377a:	f7ff fba1 	bl	8002ec0 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d914      	bls.n	80037b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10d      	bne.n	80037b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	f043 0210 	orr.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d0dc      	beq.n	800377a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037fe:	4a04      	ldr	r2, [pc, #16]	; (8003810 <__NVIC_SetPriorityGrouping+0x44>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	60d3      	str	r3, [r2, #12]
}
 8003804:	bf00      	nop
 8003806:	3714      	adds	r7, #20
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <__NVIC_GetPriorityGrouping+0x18>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	f003 0307 	and.w	r3, r3, #7
}
 8003822:	4618      	mov	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	2b00      	cmp	r3, #0
 8003840:	db0b      	blt.n	800385a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f003 021f 	and.w	r2, r3, #31
 8003848:	4906      	ldr	r1, [pc, #24]	; (8003864 <__NVIC_EnableIRQ+0x34>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	2001      	movs	r0, #1
 8003852:	fa00 f202 	lsl.w	r2, r0, r2
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr
 8003864:	e000e100 	.word	0xe000e100

08003868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	6039      	str	r1, [r7, #0]
 8003872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	2b00      	cmp	r3, #0
 800387a:	db0a      	blt.n	8003892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	490c      	ldr	r1, [pc, #48]	; (80038b4 <__NVIC_SetPriority+0x4c>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	0112      	lsls	r2, r2, #4
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	440b      	add	r3, r1
 800388c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003890:	e00a      	b.n	80038a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	4908      	ldr	r1, [pc, #32]	; (80038b8 <__NVIC_SetPriority+0x50>)
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	3b04      	subs	r3, #4
 80038a0:	0112      	lsls	r2, r2, #4
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	440b      	add	r3, r1
 80038a6:	761a      	strb	r2, [r3, #24]
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000e100 	.word	0xe000e100
 80038b8:	e000ed00 	.word	0xe000ed00

080038bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f1c3 0307 	rsb	r3, r3, #7
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	bf28      	it	cs
 80038da:	2304      	movcs	r3, #4
 80038dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	3304      	adds	r3, #4
 80038e2:	2b06      	cmp	r3, #6
 80038e4:	d902      	bls.n	80038ec <NVIC_EncodePriority+0x30>
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3b03      	subs	r3, #3
 80038ea:	e000      	b.n	80038ee <NVIC_EncodePriority+0x32>
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	f04f 32ff 	mov.w	r2, #4294967295
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	401a      	ands	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003904:	f04f 31ff 	mov.w	r1, #4294967295
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	43d9      	mvns	r1, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	4313      	orrs	r3, r2
         );
}
 8003916:	4618      	mov	r0, r3
 8003918:	3724      	adds	r7, #36	; 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003930:	d301      	bcc.n	8003936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003932:	2301      	movs	r3, #1
 8003934:	e00f      	b.n	8003956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <SysTick_Config+0x40>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3b01      	subs	r3, #1
 800393c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800393e:	210f      	movs	r1, #15
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	f7ff ff90 	bl	8003868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SysTick_Config+0x40>)
 800394a:	2200      	movs	r2, #0
 800394c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <SysTick_Config+0x40>)
 8003950:	2207      	movs	r2, #7
 8003952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7ff ff2d 	bl	80037cc <__NVIC_SetPriorityGrouping>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800397a:	b580      	push	{r7, lr}
 800397c:	b086      	sub	sp, #24
 800397e:	af00      	add	r7, sp, #0
 8003980:	4603      	mov	r3, r0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800398c:	f7ff ff42 	bl	8003814 <__NVIC_GetPriorityGrouping>
 8003990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68b9      	ldr	r1, [r7, #8]
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7ff ff90 	bl	80038bc <NVIC_EncodePriority>
 800399c:	4602      	mov	r2, r0
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff ff5f 	bl	8003868 <__NVIC_SetPriority>
}
 80039aa:	bf00      	nop
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff35 	bl	8003830 <__NVIC_EnableIRQ>
}
 80039c6:	bf00      	nop
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f7ff ffa2 	bl	8003920 <SysTick_Config>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e043      	b.n	8003a86 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_DMA_Init+0xa8>)
 8003a06:	4413      	add	r3, r2
 8003a08:	4a22      	ldr	r2, [pc, #136]	; (8003a94 <HAL_DMA_Init+0xac>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_DMA_Init+0xb0>)
 8003a1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	bffdfff8 	.word	0xbffdfff8
 8003a94:	cccccccd 	.word	0xcccccccd
 8003a98:	40020000 	.word	0x40020000

08003a9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d101      	bne.n	8003abc <HAL_DMA_Start_IT+0x20>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	e04a      	b.n	8003b52 <HAL_DMA_Start_IT+0xb6>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d13a      	bne.n	8003b44 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f9ba 	bl	8003e6c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 020e 	orr.w	r2, r2, #14
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	e00f      	b.n	8003b32 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0204 	bic.w	r2, r2, #4
 8003b20:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 020a 	orr.w	r2, r2, #10
 8003b30:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0201 	orr.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e005      	b.n	8003b50 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d005      	beq.n	8003b7e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2204      	movs	r2, #4
 8003b76:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e051      	b.n	8003c22 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 020e 	bic.w	r2, r2, #14
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a22      	ldr	r2, [pc, #136]	; (8003c2c <HAL_DMA_Abort_IT+0xd0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d029      	beq.n	8003bfc <HAL_DMA_Abort_IT+0xa0>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <HAL_DMA_Abort_IT+0xd4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_DMA_Abort_IT+0x9c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_DMA_Abort_IT+0xd8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01a      	beq.n	8003bf2 <HAL_DMA_Abort_IT+0x96>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <HAL_DMA_Abort_IT+0xdc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d012      	beq.n	8003bec <HAL_DMA_Abort_IT+0x90>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1c      	ldr	r2, [pc, #112]	; (8003c3c <HAL_DMA_Abort_IT+0xe0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00a      	beq.n	8003be6 <HAL_DMA_Abort_IT+0x8a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <HAL_DMA_Abort_IT+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d102      	bne.n	8003be0 <HAL_DMA_Abort_IT+0x84>
 8003bda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bde:	e00e      	b.n	8003bfe <HAL_DMA_Abort_IT+0xa2>
 8003be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be4:	e00b      	b.n	8003bfe <HAL_DMA_Abort_IT+0xa2>
 8003be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bea:	e008      	b.n	8003bfe <HAL_DMA_Abort_IT+0xa2>
 8003bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf0:	e005      	b.n	8003bfe <HAL_DMA_Abort_IT+0xa2>
 8003bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf6:	e002      	b.n	8003bfe <HAL_DMA_Abort_IT+0xa2>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	e000      	b.n	8003bfe <HAL_DMA_Abort_IT+0xa2>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HAL_DMA_Abort_IT+0xe8>)
 8003c00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
    } 
  }
  return status;
 8003c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40020008 	.word	0x40020008
 8003c30:	4002001c 	.word	0x4002001c
 8003c34:	40020030 	.word	0x40020030
 8003c38:	40020044 	.word	0x40020044
 8003c3c:	40020058 	.word	0x40020058
 8003c40:	4002006c 	.word	0x4002006c
 8003c44:	40020000 	.word	0x40020000

08003c48 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	2204      	movs	r2, #4
 8003c66:	409a      	lsls	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d04f      	beq.n	8003d10 <HAL_DMA_IRQHandler+0xc8>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d04a      	beq.n	8003d10 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d107      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0204 	bic.w	r2, r2, #4
 8003c96:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <HAL_DMA_IRQHandler+0x1f0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d029      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xae>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a65      	ldr	r2, [pc, #404]	; (8003e3c <HAL_DMA_IRQHandler+0x1f4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d022      	beq.n	8003cf2 <HAL_DMA_IRQHandler+0xaa>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a63      	ldr	r2, [pc, #396]	; (8003e40 <HAL_DMA_IRQHandler+0x1f8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01a      	beq.n	8003cec <HAL_DMA_IRQHandler+0xa4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a62      	ldr	r2, [pc, #392]	; (8003e44 <HAL_DMA_IRQHandler+0x1fc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d012      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x9e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a60      	ldr	r2, [pc, #384]	; (8003e48 <HAL_DMA_IRQHandler+0x200>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x98>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5f      	ldr	r2, [pc, #380]	; (8003e4c <HAL_DMA_IRQHandler+0x204>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d102      	bne.n	8003cda <HAL_DMA_IRQHandler+0x92>
 8003cd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cd8:	e00e      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xb0>
 8003cda:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cde:	e00b      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xb0>
 8003ce0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003ce4:	e008      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xb0>
 8003ce6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cea:	e005      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xb0>
 8003cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf0:	e002      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xb0>
 8003cf2:	2340      	movs	r3, #64	; 0x40
 8003cf4:	e000      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xb0>
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	4a55      	ldr	r2, [pc, #340]	; (8003e50 <HAL_DMA_IRQHandler+0x208>)
 8003cfa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8094 	beq.w	8003e2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d0e:	e08e      	b.n	8003e2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2202      	movs	r2, #2
 8003d16:	409a      	lsls	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d056      	beq.n	8003dce <HAL_DMA_IRQHandler+0x186>
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d051      	beq.n	8003dce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10b      	bne.n	8003d50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 020a 	bic.w	r2, r2, #10
 8003d46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a38      	ldr	r2, [pc, #224]	; (8003e38 <HAL_DMA_IRQHandler+0x1f0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d029      	beq.n	8003dae <HAL_DMA_IRQHandler+0x166>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a37      	ldr	r2, [pc, #220]	; (8003e3c <HAL_DMA_IRQHandler+0x1f4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d022      	beq.n	8003daa <HAL_DMA_IRQHandler+0x162>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a35      	ldr	r2, [pc, #212]	; (8003e40 <HAL_DMA_IRQHandler+0x1f8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01a      	beq.n	8003da4 <HAL_DMA_IRQHandler+0x15c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <HAL_DMA_IRQHandler+0x1fc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d012      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x156>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a32      	ldr	r2, [pc, #200]	; (8003e48 <HAL_DMA_IRQHandler+0x200>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d00a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x150>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_DMA_IRQHandler+0x204>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d102      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x14a>
 8003d8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d90:	e00e      	b.n	8003db0 <HAL_DMA_IRQHandler+0x168>
 8003d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d96:	e00b      	b.n	8003db0 <HAL_DMA_IRQHandler+0x168>
 8003d98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d9c:	e008      	b.n	8003db0 <HAL_DMA_IRQHandler+0x168>
 8003d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003da2:	e005      	b.n	8003db0 <HAL_DMA_IRQHandler+0x168>
 8003da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003da8:	e002      	b.n	8003db0 <HAL_DMA_IRQHandler+0x168>
 8003daa:	2320      	movs	r3, #32
 8003dac:	e000      	b.n	8003db0 <HAL_DMA_IRQHandler+0x168>
 8003dae:	2302      	movs	r3, #2
 8003db0:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <HAL_DMA_IRQHandler+0x208>)
 8003db2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d034      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dcc:	e02f      	b.n	8003e2e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	409a      	lsls	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d028      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x1e8>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d023      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 020e 	bic.w	r2, r2, #14
 8003df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f202 	lsl.w	r2, r1, r2
 8003e06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d004      	beq.n	8003e30 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
    }
  }
  return;
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
}
 8003e32:	3710      	adds	r7, #16
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40020008 	.word	0x40020008
 8003e3c:	4002001c 	.word	0x4002001c
 8003e40:	40020030 	.word	0x40020030
 8003e44:	40020044 	.word	0x40020044
 8003e48:	40020058 	.word	0x40020058
 8003e4c:	4002006c 	.word	0x4002006c
 8003e50:	40020000 	.word	0x40020000

08003e54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bc80      	pop	{r7}
 8003e6a:	4770      	bx	lr

08003e6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f202 	lsl.w	r2, r1, r2
 8003e88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b10      	cmp	r3, #16
 8003e98:	d108      	bne.n	8003eac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eaa:	e007      	b.n	8003ebc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b08b      	sub	sp, #44	; 0x2c
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eda:	e169      	b.n	80041b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003edc:	2201      	movs	r2, #1
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	f040 8158 	bne.w	80041aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	4a9a      	ldr	r2, [pc, #616]	; (8004168 <HAL_GPIO_Init+0x2a0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d05e      	beq.n	8003fc2 <HAL_GPIO_Init+0xfa>
 8003f04:	4a98      	ldr	r2, [pc, #608]	; (8004168 <HAL_GPIO_Init+0x2a0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d875      	bhi.n	8003ff6 <HAL_GPIO_Init+0x12e>
 8003f0a:	4a98      	ldr	r2, [pc, #608]	; (800416c <HAL_GPIO_Init+0x2a4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d058      	beq.n	8003fc2 <HAL_GPIO_Init+0xfa>
 8003f10:	4a96      	ldr	r2, [pc, #600]	; (800416c <HAL_GPIO_Init+0x2a4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d86f      	bhi.n	8003ff6 <HAL_GPIO_Init+0x12e>
 8003f16:	4a96      	ldr	r2, [pc, #600]	; (8004170 <HAL_GPIO_Init+0x2a8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d052      	beq.n	8003fc2 <HAL_GPIO_Init+0xfa>
 8003f1c:	4a94      	ldr	r2, [pc, #592]	; (8004170 <HAL_GPIO_Init+0x2a8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d869      	bhi.n	8003ff6 <HAL_GPIO_Init+0x12e>
 8003f22:	4a94      	ldr	r2, [pc, #592]	; (8004174 <HAL_GPIO_Init+0x2ac>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d04c      	beq.n	8003fc2 <HAL_GPIO_Init+0xfa>
 8003f28:	4a92      	ldr	r2, [pc, #584]	; (8004174 <HAL_GPIO_Init+0x2ac>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d863      	bhi.n	8003ff6 <HAL_GPIO_Init+0x12e>
 8003f2e:	4a92      	ldr	r2, [pc, #584]	; (8004178 <HAL_GPIO_Init+0x2b0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d046      	beq.n	8003fc2 <HAL_GPIO_Init+0xfa>
 8003f34:	4a90      	ldr	r2, [pc, #576]	; (8004178 <HAL_GPIO_Init+0x2b0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d85d      	bhi.n	8003ff6 <HAL_GPIO_Init+0x12e>
 8003f3a:	2b12      	cmp	r3, #18
 8003f3c:	d82a      	bhi.n	8003f94 <HAL_GPIO_Init+0xcc>
 8003f3e:	2b12      	cmp	r3, #18
 8003f40:	d859      	bhi.n	8003ff6 <HAL_GPIO_Init+0x12e>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <HAL_GPIO_Init+0x80>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003fc3 	.word	0x08003fc3
 8003f4c:	08003f9d 	.word	0x08003f9d
 8003f50:	08003faf 	.word	0x08003faf
 8003f54:	08003ff1 	.word	0x08003ff1
 8003f58:	08003ff7 	.word	0x08003ff7
 8003f5c:	08003ff7 	.word	0x08003ff7
 8003f60:	08003ff7 	.word	0x08003ff7
 8003f64:	08003ff7 	.word	0x08003ff7
 8003f68:	08003ff7 	.word	0x08003ff7
 8003f6c:	08003ff7 	.word	0x08003ff7
 8003f70:	08003ff7 	.word	0x08003ff7
 8003f74:	08003ff7 	.word	0x08003ff7
 8003f78:	08003ff7 	.word	0x08003ff7
 8003f7c:	08003ff7 	.word	0x08003ff7
 8003f80:	08003ff7 	.word	0x08003ff7
 8003f84:	08003ff7 	.word	0x08003ff7
 8003f88:	08003ff7 	.word	0x08003ff7
 8003f8c:	08003fa5 	.word	0x08003fa5
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	4a79      	ldr	r2, [pc, #484]	; (800417c <HAL_GPIO_Init+0x2b4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f9a:	e02c      	b.n	8003ff6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	623b      	str	r3, [r7, #32]
          break;
 8003fa2:	e029      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	623b      	str	r3, [r7, #32]
          break;
 8003fac:	e024      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	623b      	str	r3, [r7, #32]
          break;
 8003fb6:	e01f      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	623b      	str	r3, [r7, #32]
          break;
 8003fc0:	e01a      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fca:	2304      	movs	r3, #4
 8003fcc:	623b      	str	r3, [r7, #32]
          break;
 8003fce:	e013      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fd8:	2308      	movs	r3, #8
 8003fda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	611a      	str	r2, [r3, #16]
          break;
 8003fe2:	e009      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	615a      	str	r2, [r3, #20]
          break;
 8003fee:	e003      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	623b      	str	r3, [r7, #32]
          break;
 8003ff4:	e000      	b.n	8003ff8 <HAL_GPIO_Init+0x130>
          break;
 8003ff6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2bff      	cmp	r3, #255	; 0xff
 8003ffc:	d801      	bhi.n	8004002 <HAL_GPIO_Init+0x13a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	e001      	b.n	8004006 <HAL_GPIO_Init+0x13e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	3304      	adds	r3, #4
 8004006:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2bff      	cmp	r3, #255	; 0xff
 800400c:	d802      	bhi.n	8004014 <HAL_GPIO_Init+0x14c>
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	e002      	b.n	800401a <HAL_GPIO_Init+0x152>
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	3b08      	subs	r3, #8
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	210f      	movs	r1, #15
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	6a39      	ldr	r1, [r7, #32]
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	fa01 f303 	lsl.w	r3, r1, r3
 8004034:	431a      	orrs	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80b1 	beq.w	80041aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004048:	4b4d      	ldr	r3, [pc, #308]	; (8004180 <HAL_GPIO_Init+0x2b8>)
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	4a4c      	ldr	r2, [pc, #304]	; (8004180 <HAL_GPIO_Init+0x2b8>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	6193      	str	r3, [r2, #24]
 8004054:	4b4a      	ldr	r3, [pc, #296]	; (8004180 <HAL_GPIO_Init+0x2b8>)
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004060:	4a48      	ldr	r2, [pc, #288]	; (8004184 <HAL_GPIO_Init+0x2bc>)
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	089b      	lsrs	r3, r3, #2
 8004066:	3302      	adds	r3, #2
 8004068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800406c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	220f      	movs	r2, #15
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a40      	ldr	r2, [pc, #256]	; (8004188 <HAL_GPIO_Init+0x2c0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_GPIO_Init+0x1ec>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3f      	ldr	r2, [pc, #252]	; (800418c <HAL_GPIO_Init+0x2c4>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00d      	beq.n	80040b0 <HAL_GPIO_Init+0x1e8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a3e      	ldr	r2, [pc, #248]	; (8004190 <HAL_GPIO_Init+0x2c8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d007      	beq.n	80040ac <HAL_GPIO_Init+0x1e4>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <HAL_GPIO_Init+0x2cc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <HAL_GPIO_Init+0x1e0>
 80040a4:	2303      	movs	r3, #3
 80040a6:	e006      	b.n	80040b6 <HAL_GPIO_Init+0x1ee>
 80040a8:	2304      	movs	r3, #4
 80040aa:	e004      	b.n	80040b6 <HAL_GPIO_Init+0x1ee>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e002      	b.n	80040b6 <HAL_GPIO_Init+0x1ee>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_GPIO_Init+0x1ee>
 80040b4:	2300      	movs	r3, #0
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	f002 0203 	and.w	r2, r2, #3
 80040bc:	0092      	lsls	r2, r2, #2
 80040be:	4093      	lsls	r3, r2
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040c6:	492f      	ldr	r1, [pc, #188]	; (8004184 <HAL_GPIO_Init+0x2bc>)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	3302      	adds	r3, #2
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	492c      	ldr	r1, [pc, #176]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
 80040ec:	e006      	b.n	80040fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040ee:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	4928      	ldr	r1, [pc, #160]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d006      	beq.n	8004116 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004108:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	4922      	ldr	r1, [pc, #136]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
 8004114:	e006      	b.n	8004124 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	43db      	mvns	r3, r3
 800411e:	491e      	ldr	r1, [pc, #120]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 8004120:	4013      	ands	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d006      	beq.n	800413e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004130:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4918      	ldr	r1, [pc, #96]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
 800413c:	e006      	b.n	800414c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	43db      	mvns	r3, r3
 8004146:	4914      	ldr	r1, [pc, #80]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 8004148:	4013      	ands	r3, r2
 800414a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d021      	beq.n	800419c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004158:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	490e      	ldr	r1, [pc, #56]	; (8004198 <HAL_GPIO_Init+0x2d0>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	60cb      	str	r3, [r1, #12]
 8004164:	e021      	b.n	80041aa <HAL_GPIO_Init+0x2e2>
 8004166:	bf00      	nop
 8004168:	10320000 	.word	0x10320000
 800416c:	10310000 	.word	0x10310000
 8004170:	10220000 	.word	0x10220000
 8004174:	10210000 	.word	0x10210000
 8004178:	10120000 	.word	0x10120000
 800417c:	10110000 	.word	0x10110000
 8004180:	40021000 	.word	0x40021000
 8004184:	40010000 	.word	0x40010000
 8004188:	40010800 	.word	0x40010800
 800418c:	40010c00 	.word	0x40010c00
 8004190:	40011000 	.word	0x40011000
 8004194:	40011400 	.word	0x40011400
 8004198:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_GPIO_Init+0x304>)
 800419e:	68da      	ldr	r2, [r3, #12]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	4909      	ldr	r1, [pc, #36]	; (80041cc <HAL_GPIO_Init+0x304>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	3301      	adds	r3, #1
 80041ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f47f ae8e 	bne.w	8003edc <HAL_GPIO_Init+0x14>
  }
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	372c      	adds	r7, #44	; 0x2c
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	40010400 	.word	0x40010400

080041d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
 80041dc:	4613      	mov	r3, r2
 80041de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041e0:	787b      	ldrb	r3, [r7, #1]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041e6:	887a      	ldrh	r2, [r7, #2]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041ec:	e003      	b.n	80041f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ee:	887b      	ldrh	r3, [r7, #2]
 80041f0:	041a      	lsls	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]
}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e12b      	b.n	800446a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fc fdf4 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2224      	movs	r2, #36	; 0x24
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004264:	f002 ffbe 	bl	80071e4 <HAL_RCC_GetPCLK1Freq>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a81      	ldr	r2, [pc, #516]	; (8004474 <HAL_I2C_Init+0x274>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d807      	bhi.n	8004284 <HAL_I2C_Init+0x84>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a80      	ldr	r2, [pc, #512]	; (8004478 <HAL_I2C_Init+0x278>)
 8004278:	4293      	cmp	r3, r2
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e006      	b.n	8004292 <HAL_I2C_Init+0x92>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a7d      	ldr	r2, [pc, #500]	; (800447c <HAL_I2C_Init+0x27c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	bf94      	ite	ls
 800428c:	2301      	movls	r3, #1
 800428e:	2300      	movhi	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e0e7      	b.n	800446a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a78      	ldr	r2, [pc, #480]	; (8004480 <HAL_I2C_Init+0x280>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0c9b      	lsrs	r3, r3, #18
 80042a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a6a      	ldr	r2, [pc, #424]	; (8004474 <HAL_I2C_Init+0x274>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d802      	bhi.n	80042d4 <HAL_I2C_Init+0xd4>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	3301      	adds	r3, #1
 80042d2:	e009      	b.n	80042e8 <HAL_I2C_Init+0xe8>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042da:	fb02 f303 	mul.w	r3, r2, r3
 80042de:	4a69      	ldr	r2, [pc, #420]	; (8004484 <HAL_I2C_Init+0x284>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	3301      	adds	r3, #1
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	495c      	ldr	r1, [pc, #368]	; (8004474 <HAL_I2C_Init+0x274>)
 8004304:	428b      	cmp	r3, r1
 8004306:	d819      	bhi.n	800433c <HAL_I2C_Init+0x13c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	1e59      	subs	r1, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	fbb1 f3f3 	udiv	r3, r1, r3
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	f640 73fc 	movw	r3, #4092	; 0xffc
 800431c:	400b      	ands	r3, r1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_I2C_Init+0x138>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1e59      	subs	r1, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004330:	3301      	adds	r3, #1
 8004332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004336:	e051      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 8004338:	2304      	movs	r3, #4
 800433a:	e04f      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d111      	bne.n	8004368 <HAL_I2C_Init+0x168>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	440b      	add	r3, r1
 8004352:	fbb0 f3f3 	udiv	r3, r0, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e012      	b.n	800438e <HAL_I2C_Init+0x18e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e58      	subs	r0, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	0099      	lsls	r1, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	fbb0 f3f3 	udiv	r3, r0, r3
 800437e:	3301      	adds	r3, #1
 8004380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004384:	2b00      	cmp	r3, #0
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Init+0x196>
 8004392:	2301      	movs	r3, #1
 8004394:	e022      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10e      	bne.n	80043bc <HAL_I2C_Init+0x1bc>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1e58      	subs	r0, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6859      	ldr	r1, [r3, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	440b      	add	r3, r1
 80043ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b0:	3301      	adds	r3, #1
 80043b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ba:	e00f      	b.n	80043dc <HAL_I2C_Init+0x1dc>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e58      	subs	r0, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	0099      	lsls	r1, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80043d2:	3301      	adds	r3, #1
 80043d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043dc:	6879      	ldr	r1, [r7, #4]
 80043de:	6809      	ldr	r1, [r1, #0]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800440a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6911      	ldr	r1, [r2, #16]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68d2      	ldr	r2, [r2, #12]
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2220      	movs	r2, #32
 8004456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	000186a0 	.word	0x000186a0
 8004478:	001e847f 	.word	0x001e847f
 800447c:	003d08ff 	.word	0x003d08ff
 8004480:	431bde83 	.word	0x431bde83
 8004484:	10624dd3 	.word	0x10624dd3

08004488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b088      	sub	sp, #32
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	460b      	mov	r3, r1
 8004496:	817b      	strh	r3, [r7, #10]
 8004498:	4613      	mov	r3, r2
 800449a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800449c:	f7fe fd10 	bl	8002ec0 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	f040 80e0 	bne.w	8004670 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	2319      	movs	r3, #25
 80044b6:	2201      	movs	r2, #1
 80044b8:	4970      	ldr	r1, [pc, #448]	; (800467c <HAL_I2C_Master_Transmit+0x1f4>)
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f002 f8ec 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0d3      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_I2C_Master_Transmit+0x50>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e0cc      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d007      	beq.n	80044fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2221      	movs	r2, #33	; 0x21
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2210      	movs	r2, #16
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	893a      	ldrh	r2, [r7, #8]
 800452e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a50      	ldr	r2, [pc, #320]	; (8004680 <HAL_I2C_Master_Transmit+0x1f8>)
 800453e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004540:	8979      	ldrh	r1, [r7, #10]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f001 fdda 	bl	8006100 <I2C_MasterRequestWrite>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e08d      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800456c:	e066      	b.n	800463c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	6a39      	ldr	r1, [r7, #32]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f002 f966 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	2b04      	cmp	r3, #4
 8004584:	d107      	bne.n	8004596 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e06b      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f003 0304 	and.w	r3, r3, #4
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d11b      	bne.n	8004610 <HAL_I2C_Master_Transmit+0x188>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d017      	beq.n	8004610 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	6a39      	ldr	r1, [r7, #32]
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f002 f956 	bl	80068c6 <I2C_WaitOnBTFFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00d      	beq.n	800463c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	2b04      	cmp	r3, #4
 8004626:	d107      	bne.n	8004638 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004636:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e01a      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d194      	bne.n	800456e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	00100002 	.word	0x00100002
 8004680:	ffff0000 	.word	0xffff0000

08004684 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	; 0x28
 8004688:	af02      	add	r7, sp, #8
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	4608      	mov	r0, r1
 800468e:	4611      	mov	r1, r2
 8004690:	461a      	mov	r2, r3
 8004692:	4603      	mov	r3, r0
 8004694:	817b      	strh	r3, [r7, #10]
 8004696:	460b      	mov	r3, r1
 8004698:	813b      	strh	r3, [r7, #8]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046a2:	f7fe fc0d 	bl	8002ec0 <HAL_GetTick>
 80046a6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	f040 8126 	bne.w	8004902 <HAL_I2C_Mem_Write_DMA+0x27e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046b6:	4b95      	ldr	r3, [pc, #596]	; (800490c <HAL_I2C_Mem_Write_DMA+0x288>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	08db      	lsrs	r3, r3, #3
 80046bc:	4a94      	ldr	r2, [pc, #592]	; (8004910 <HAL_I2C_Mem_Write_DMA+0x28c>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	0a1a      	lsrs	r2, r3, #8
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009a      	lsls	r2, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d116      	bne.n	800470a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0fc      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b02      	cmp	r3, #2
 8004716:	d0db      	beq.n	80046d0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Write_DMA+0xa2>
 8004722:	2302      	movs	r3, #2
 8004724:	e0ee      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a62      	ldr	r2, [pc, #392]	; (8004914 <HAL_I2C_Mem_Write_DMA+0x290>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80a1 	beq.w	80048da <HAL_I2C_Mem_Write_DMA+0x256>
    {
      if (hi2c->hdmatx != NULL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	2b00      	cmp	r3, #0
 800479e:	d022      	beq.n	80047e6 <HAL_I2C_Mem_Write_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	4a5c      	ldr	r2, [pc, #368]	; (8004918 <HAL_I2C_Mem_Write_DMA+0x294>)
 80047a6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	4a5b      	ldr	r2, [pc, #364]	; (800491c <HAL_I2C_Mem_Write_DMA+0x298>)
 80047ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	2200      	movs	r2, #0
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	2200      	movs	r2, #0
 80047be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	4619      	mov	r1, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3310      	adds	r3, #16
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	f7ff f961 	bl	8003a9c <HAL_DMA_Start_IT>
 80047da:	4603      	mov	r3, r0
 80047dc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80047de:	7efb      	ldrb	r3, [r7, #27]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d166      	bne.n	80048b2 <HAL_I2C_Mem_Write_DMA+0x22e>
 80047e4:	e013      	b.n	800480e <HAL_I2C_Mem_Write_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e07a      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800480e:	88f8      	ldrh	r0, [r7, #6]
 8004810:	893a      	ldrh	r2, [r7, #8]
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	2323      	movs	r3, #35	; 0x23
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4603      	mov	r3, r0
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f001 fcf0 	bl	8006204 <I2C_RequestMemoryWrite>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d022      	beq.n	8004870 <HAL_I2C_Mem_Write_DMA+0x1ec>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff f994 	bl	8003b5c <HAL_DMA_Abort_IT>
 8004834:	4603      	mov	r3, r0
 8004836:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483c:	2200      	movs	r2, #0
 800483e:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e049      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800489c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048ac:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e028      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	f043 0210 	orr.w	r2, r3, #16
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e014      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_I2C_Mem_Write_DMA+0x280>
    }
  }
  else
  {
    return HAL_BUSY;
 8004902:	2302      	movs	r3, #2
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000010 	.word	0x20000010
 8004910:	14f8b589 	.word	0x14f8b589
 8004914:	ffff0000 	.word	0xffff0000
 8004918:	08006331 	.word	0x08006331
 800491c:	080064db 	.word	0x080064db

08004920 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08a      	sub	sp, #40	; 0x28
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	607a      	str	r2, [r7, #4]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	460b      	mov	r3, r1
 800492e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004930:	f7fe fac6 	bl	8002ec0 <HAL_GetTick>
 8004934:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004936:	2301      	movs	r3, #1
 8004938:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b20      	cmp	r3, #32
 8004944:	f040 8111 	bne.w	8004b6a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2319      	movs	r3, #25
 800494e:	2201      	movs	r2, #1
 8004950:	4988      	ldr	r1, [pc, #544]	; (8004b74 <HAL_I2C_IsDeviceReady+0x254>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f001 fea0 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800495e:	2302      	movs	r3, #2
 8004960:	e104      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_I2C_IsDeviceReady+0x50>
 800496c:	2302      	movs	r3, #2
 800496e:	e0fd      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b01      	cmp	r3, #1
 8004984:	d007      	beq.n	8004996 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2224      	movs	r2, #36	; 0x24
 80049aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4a70      	ldr	r2, [pc, #448]	; (8004b78 <HAL_I2C_IsDeviceReady+0x258>)
 80049b8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f001 fe5e 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00d      	beq.n	80049fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d103      	bne.n	80049fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e0b6      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049fe:	897b      	ldrh	r3, [r7, #10]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a0c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a0e:	f7fe fa57 	bl	8002ec0 <HAL_GetTick>
 8004a12:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a42:	e025      	b.n	8004a90 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe fa3c 	bl	8002ec0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <HAL_I2C_IsDeviceReady+0x13a>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22a0      	movs	r2, #160	; 0xa0
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2ba0      	cmp	r3, #160	; 0xa0
 8004a9a:	d005      	beq.n	8004aa8 <HAL_I2C_IsDeviceReady+0x188>
 8004a9c:	7dfb      	ldrb	r3, [r7, #23]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <HAL_I2C_IsDeviceReady+0x188>
 8004aa2:	7dbb      	ldrb	r3, [r7, #22]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0cd      	beq.n	8004a44 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d129      	bne.n	8004b12 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004acc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2319      	movs	r3, #25
 8004aea:	2201      	movs	r2, #1
 8004aec:	4921      	ldr	r1, [pc, #132]	; (8004b74 <HAL_I2C_IsDeviceReady+0x254>)
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f001 fdd2 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e036      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e02c      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b20:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b2a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	2319      	movs	r3, #25
 8004b32:	2201      	movs	r2, #1
 8004b34:	490f      	ldr	r1, [pc, #60]	; (8004b74 <HAL_I2C_IsDeviceReady+0x254>)
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f001 fdae 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e012      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	f4ff af32 	bcc.w	80049ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
  }
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3720      	adds	r7, #32
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	00100002 	.word	0x00100002
 8004b78:	ffff0000 	.word	0xffff0000

08004b7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b9c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d003      	beq.n	8004bb4 <HAL_I2C_EV_IRQHandler+0x38>
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	f040 80c1 	bne.w	8004d36 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10d      	bne.n	8004bea <HAL_I2C_EV_IRQHandler+0x6e>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bd4:	d003      	beq.n	8004bde <HAL_I2C_EV_IRQHandler+0x62>
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bdc:	d101      	bne.n	8004be2 <HAL_I2C_EV_IRQHandler+0x66>
 8004bde:	2301      	movs	r3, #1
 8004be0:	e000      	b.n	8004be4 <HAL_I2C_EV_IRQHandler+0x68>
 8004be2:	2300      	movs	r3, #0
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	f000 8132 	beq.w	8004e4e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00c      	beq.n	8004c0e <HAL_I2C_EV_IRQHandler+0x92>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	0a5b      	lsrs	r3, r3, #9
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 ff01 	bl	8006a08 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fcc8 	bl	800559c <I2C_Master_SB>
 8004c0c:	e092      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	08db      	lsrs	r3, r3, #3
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_I2C_EV_IRQHandler+0xb2>
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	0a5b      	lsrs	r3, r3, #9
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fd3d 	bl	80056a6 <I2C_Master_ADD10>
 8004c2c:	e082      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <HAL_I2C_EV_IRQHandler+0xd2>
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	0a5b      	lsrs	r3, r3, #9
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fd56 	bl	80056f8 <I2C_Master_ADDR>
 8004c4c:	e072      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	089b      	lsrs	r3, r3, #2
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d03b      	beq.n	8004cd2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	f000 80f3 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	09db      	lsrs	r3, r3, #7
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00f      	beq.n	8004c98 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	0a9b      	lsrs	r3, r3, #10
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d009      	beq.n	8004c98 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	089b      	lsrs	r3, r3, #2
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d103      	bne.n	8004c98 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f942 	bl	8004f1a <I2C_MasterTransmit_TXE>
 8004c96:	e04d      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	089b      	lsrs	r3, r3, #2
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80d6 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	0a5b      	lsrs	r3, r3, #9
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 80cf 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	2b21      	cmp	r3, #33	; 0x21
 8004cb8:	d103      	bne.n	8004cc2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f9c9 	bl	8005052 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc0:	e0c7      	b.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	f040 80c4 	bne.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa37 	bl	800513e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd0:	e0bf      	b.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce0:	f000 80b7 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00f      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x194>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	0a9b      	lsrs	r3, r3, #10
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_I2C_EV_IRQHandler+0x194>
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	089b      	lsrs	r3, r3, #2
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 faac 	bl	8005266 <I2C_MasterReceive_RXNE>
 8004d0e:	e011      	b.n	8004d34 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 809a 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	0a5b      	lsrs	r3, r3, #9
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 8093 	beq.w	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fb4b 	bl	80053c8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d32:	e08e      	b.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d34:	e08d      	b.n	8004e52 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	e007      	b.n	8004d58 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d012      	beq.n	8004d8a <HAL_I2C_EV_IRQHandler+0x20e>
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	0a5b      	lsrs	r3, r3, #9
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00c      	beq.n	8004d8a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d80:	69b9      	ldr	r1, [r7, #24]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 ff0f 	bl	8005ba6 <I2C_Slave_ADDR>
 8004d88:	e066      	b.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x22e>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	0a5b      	lsrs	r3, r3, #9
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 ff4a 	bl	8005c3c <I2C_Slave_STOPF>
 8004da8:	e056      	b.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004daa:	7bbb      	ldrb	r3, [r7, #14]
 8004dac:	2b21      	cmp	r3, #33	; 0x21
 8004dae:	d002      	beq.n	8004db6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004db0:	7bbb      	ldrb	r3, [r7, #14]
 8004db2:	2b29      	cmp	r3, #41	; 0x29
 8004db4:	d125      	bne.n	8004e02 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	09db      	lsrs	r3, r3, #7
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00f      	beq.n	8004de2 <HAL_I2C_EV_IRQHandler+0x266>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	0a9b      	lsrs	r3, r3, #10
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d009      	beq.n	8004de2 <HAL_I2C_EV_IRQHandler+0x266>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	089b      	lsrs	r3, r3, #2
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fe27 	bl	8005a2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004de0:	e039      	b.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	089b      	lsrs	r3, r3, #2
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d033      	beq.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2da>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d02d      	beq.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fe54 	bl	8005aa8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e00:	e029      	b.n	8004e56 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00f      	beq.n	8004e2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	0a9b      	lsrs	r3, r3, #10
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d009      	beq.n	8004e2e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fe5e 	bl	8005ae8 <I2C_SlaveReceive_RXNE>
 8004e2c:	e014      	b.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	089b      	lsrs	r3, r3, #2
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00e      	beq.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	0a5b      	lsrs	r3, r3, #9
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d008      	beq.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fe8c 	bl	8005b64 <I2C_SlaveReceive_BTF>
 8004e4c:	e004      	b.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e56:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e58:	3720      	adds	r7, #32
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bc80      	pop	{r7}
 8004ed0:	4770      	bx	lr

08004ed2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bc80      	pop	{r7}
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f10:	bf00      	nop
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr

08004f1a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f30:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f36:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d150      	bne.n	8004fe2 <I2C_MasterTransmit_TXE+0xc8>
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	2b21      	cmp	r3, #33	; 0x21
 8004f44:	d14d      	bne.n	8004fe2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d01d      	beq.n	8004f88 <I2C_MasterTransmit_TXE+0x6e>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2b20      	cmp	r3, #32
 8004f50:	d01a      	beq.n	8004f88 <I2C_MasterTransmit_TXE+0x6e>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f58:	d016      	beq.n	8004f88 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f68:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2211      	movs	r2, #17
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ff6c 	bl	8004e5e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f86:	e060      	b.n	800504a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f96:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fa6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b40      	cmp	r3, #64	; 0x40
 8004fc0:	d107      	bne.n	8004fd2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff81 	bl	8004ed2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fd0:	e03b      	b.n	800504a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ff3f 	bl	8004e5e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fe0:	e033      	b.n	800504a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b21      	cmp	r3, #33	; 0x21
 8004fe6:	d005      	beq.n	8004ff4 <I2C_MasterTransmit_TXE+0xda>
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	2b40      	cmp	r3, #64	; 0x40
 8004fec:	d12d      	bne.n	800504a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b22      	cmp	r3, #34	; 0x22
 8004ff2:	d12a      	bne.n	800504a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800500e:	e01c      	b.n	800504a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b40      	cmp	r3, #64	; 0x40
 800501a:	d103      	bne.n	8005024 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f88e 	bl	800513e <I2C_MemoryTransmit_TXE_BTF>
}
 8005022:	e012      	b.n	800504a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005048:	e7ff      	b.n	800504a <I2C_MasterTransmit_TXE+0x130>
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b21      	cmp	r3, #33	; 0x21
 800506a:	d164      	bne.n	8005136 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d012      	beq.n	800509c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800509a:	e04c      	b.n	8005136 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d01d      	beq.n	80050de <I2C_MasterTransmit_BTF+0x8c>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d01a      	beq.n	80050de <I2C_MasterTransmit_BTF+0x8c>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ae:	d016      	beq.n	80050de <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050be:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2211      	movs	r2, #17
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fec1 	bl	8004e5e <HAL_I2C_MasterTxCpltCallback>
}
 80050dc:	e02b      	b.n	8005136 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ec:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d107      	bne.n	8005128 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fed6 	bl	8004ed2 <HAL_I2C_MemTxCpltCallback>
}
 8005126:	e006      	b.n	8005136 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fe94 	bl	8004e5e <HAL_I2C_MasterTxCpltCallback>
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005152:	2b00      	cmp	r3, #0
 8005154:	d11d      	bne.n	8005192 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d10b      	bne.n	8005176 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	b2da      	uxtb	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005174:	e073      	b.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	b29b      	uxth	r3, r3
 800517c:	121b      	asrs	r3, r3, #8
 800517e:	b2da      	uxtb	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005190:	e065      	b.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10b      	bne.n	80051b2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519e:	b2da      	uxtb	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051b0:	e055      	b.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d151      	bne.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b22      	cmp	r3, #34	; 0x22
 80051be:	d10d      	bne.n	80051dc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ce:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051da:	e040      	b.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d015      	beq.n	8005212 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051e6:	7bfb      	ldrb	r3, [r7, #15]
 80051e8:	2b21      	cmp	r3, #33	; 0x21
 80051ea:	d112      	bne.n	8005212 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29a      	uxth	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005210:	e025      	b.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d120      	bne.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b21      	cmp	r3, #33	; 0x21
 8005220:	d11d      	bne.n	800525e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005230:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005240:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fe3a 	bl	8004ed2 <HAL_I2C_MemTxCpltCallback>
}
 800525e:	bf00      	nop
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b22      	cmp	r3, #34	; 0x22
 8005278:	f040 80a2 	bne.w	80053c0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005280:	b29b      	uxth	r3, r3
 8005282:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b03      	cmp	r3, #3
 8005288:	d921      	bls.n	80052ce <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	f040 8082 	bne.w	80053c0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80052cc:	e078      	b.n	80053c0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d074      	beq.n	80053c0 <I2C_MasterReceive_RXNE+0x15a>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d002      	beq.n	80052e2 <I2C_MasterReceive_RXNE+0x7c>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d16e      	bne.n	80053c0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f001 fb30 	bl	8006948 <I2C_WaitOnSTOPRequestThroughIT>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d142      	bne.n	8005374 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800530c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005318:	b2d2      	uxtb	r2, r2
 800531a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	1c5a      	adds	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d10a      	bne.n	800535e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fdc4 	bl	8004ee4 <HAL_I2C_MemRxCpltCallback>
}
 800535c:	e030      	b.n	80053c0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2212      	movs	r2, #18
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fd7f 	bl	8004e70 <HAL_I2C_MasterRxCpltCallback>
}
 8005372:	e025      	b.n	80053c0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005382:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff fd9b 	bl	8004ef6 <HAL_I2C_ErrorCallback>
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ee:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005416:	e0bd      	b.n	8005594 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b03      	cmp	r3, #3
 8005420:	d129      	bne.n	8005476 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005430:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d00a      	beq.n	800544e <I2C_MasterReceive_BTF+0x86>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d007      	beq.n	800544e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800544c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005474:	e08e      	b.n	8005594 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d176      	bne.n	800556e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d002      	beq.n	800548c <I2C_MasterReceive_BTF+0xc4>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b10      	cmp	r3, #16
 800548a:	d108      	bne.n	800549e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	e019      	b.n	80054d2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d002      	beq.n	80054aa <I2C_MasterReceive_BTF+0xe2>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d108      	bne.n	80054bc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e00a      	b.n	80054d2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d007      	beq.n	80054d2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691a      	ldr	r2, [r3, #16]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800552c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b40      	cmp	r3, #64	; 0x40
 8005540:	d10a      	bne.n	8005558 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff fcc7 	bl	8004ee4 <HAL_I2C_MemRxCpltCallback>
}
 8005556:	e01d      	b.n	8005594 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2212      	movs	r2, #18
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fc82 	bl	8004e70 <HAL_I2C_MasterRxCpltCallback>
}
 800556c:	e012      	b.n	8005594 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	d117      	bne.n	80055e0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d109      	bne.n	80055cc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055c8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055ca:	e067      	b.n	800569c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	611a      	str	r2, [r3, #16]
}
 80055de:	e05d      	b.n	800569c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e8:	d133      	bne.n	8005652 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b21      	cmp	r3, #33	; 0x21
 80055f4:	d109      	bne.n	800560a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005606:	611a      	str	r2, [r3, #16]
 8005608:	e008      	b.n	800561c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560e:	b2db      	uxtb	r3, r3
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <I2C_Master_SB+0x92>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d032      	beq.n	800569c <I2C_Master_SB+0x100>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	d02d      	beq.n	800569c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564e:	605a      	str	r2, [r3, #4]
}
 8005650:	e024      	b.n	800569c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10e      	bne.n	8005678 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	b29b      	uxth	r3, r3
 8005660:	11db      	asrs	r3, r3, #7
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 0306 	and.w	r3, r3, #6
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f063 030f 	orn	r3, r3, #15
 800566e:	b2da      	uxtb	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	611a      	str	r2, [r3, #16]
}
 8005676:	e011      	b.n	800569c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10d      	bne.n	800569c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	b29b      	uxth	r3, r3
 8005686:	11db      	asrs	r3, r3, #7
 8005688:	b2db      	uxtb	r3, r3
 800568a:	f003 0306 	and.w	r3, r3, #6
 800568e:	b2db      	uxtb	r3, r3
 8005690:	f063 030e 	orn	r3, r3, #14
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d004      	beq.n	80056cc <I2C_Master_ADD10+0x26>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d108      	bne.n	80056de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <I2C_Master_ADD10+0x48>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ec:	605a      	str	r2, [r3, #4]
  }
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr

080056f8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b091      	sub	sp, #68	; 0x44
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005706:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b22      	cmp	r3, #34	; 0x22
 8005720:	f040 8174 	bne.w	8005a0c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10f      	bne.n	800574c <I2C_Master_ADDR+0x54>
 800572c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d10b      	bne.n	800574c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005734:	2300      	movs	r3, #0
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	633b      	str	r3, [r7, #48]	; 0x30
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	e16b      	b.n	8005a24 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005750:	2b00      	cmp	r3, #0
 8005752:	d11d      	bne.n	8005790 <I2C_Master_ADDR+0x98>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800575c:	d118      	bne.n	8005790 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575e:	2300      	movs	r3, #0
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005782:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	651a      	str	r2, [r3, #80]	; 0x50
 800578e:	e149      	b.n	8005a24 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d113      	bne.n	80057c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579a:	2300      	movs	r3, #0
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	e120      	b.n	8005a04 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 808a 	bne.w	80058e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057d4:	d137      	bne.n	8005846 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f4:	d113      	bne.n	800581e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005804:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005806:	2300      	movs	r3, #0
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	627b      	str	r3, [r7, #36]	; 0x24
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	e0f2      	b.n	8005a04 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581e:	2300      	movs	r3, #0
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	623b      	str	r3, [r7, #32]
 8005832:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e0de      	b.n	8005a04 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005848:	2b08      	cmp	r3, #8
 800584a:	d02e      	beq.n	80058aa <I2C_Master_ADDR+0x1b2>
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	2b20      	cmp	r3, #32
 8005850:	d02b      	beq.n	80058aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	2b12      	cmp	r3, #18
 8005856:	d102      	bne.n	800585e <I2C_Master_ADDR+0x166>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b01      	cmp	r3, #1
 800585c:	d125      	bne.n	80058aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b04      	cmp	r3, #4
 8005862:	d00e      	beq.n	8005882 <I2C_Master_ADDR+0x18a>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b02      	cmp	r3, #2
 8005868:	d00b      	beq.n	8005882 <I2C_Master_ADDR+0x18a>
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2b10      	cmp	r3, #16
 800586e:	d008      	beq.n	8005882 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	e007      	b.n	8005892 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005890:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	e0ac      	b.n	8005a04 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e090      	b.n	8005a04 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d158      	bne.n	800599e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d021      	beq.n	8005936 <I2C_Master_ADDR+0x23e>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d01e      	beq.n	8005936 <I2C_Master_ADDR+0x23e>
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d01b      	beq.n	8005936 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800590c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800590e:	2300      	movs	r3, #0
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005932:	601a      	str	r2, [r3, #0]
 8005934:	e012      	b.n	800595c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005944:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005946:	2300      	movs	r3, #0
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596a:	d14b      	bne.n	8005a04 <I2C_Master_ADDR+0x30c>
 800596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005972:	d00b      	beq.n	800598c <I2C_Master_ADDR+0x294>
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	2b01      	cmp	r3, #1
 8005978:	d008      	beq.n	800598c <I2C_Master_ADDR+0x294>
 800597a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597c:	2b08      	cmp	r3, #8
 800597e:	d005      	beq.n	800598c <I2C_Master_ADDR+0x294>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	2b10      	cmp	r3, #16
 8005984:	d002      	beq.n	800598c <I2C_Master_ADDR+0x294>
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	2b20      	cmp	r3, #32
 800598a:	d13b      	bne.n	8005a04 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800599a:	605a      	str	r2, [r3, #4]
 800599c:	e032      	b.n	8005a04 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059ac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059bc:	d117      	bne.n	80059ee <I2C_Master_ADDR+0x2f6>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059c4:	d00b      	beq.n	80059de <I2C_Master_ADDR+0x2e6>
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d008      	beq.n	80059de <I2C_Master_ADDR+0x2e6>
 80059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d005      	beq.n	80059de <I2C_Master_ADDR+0x2e6>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d002      	beq.n	80059de <I2C_Master_ADDR+0x2e6>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d107      	bne.n	80059ee <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a0a:	e00b      	b.n	8005a24 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	60bb      	str	r3, [r7, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	68bb      	ldr	r3, [r7, #8]
}
 8005a22:	e7ff      	b.n	8005a24 <I2C_Master_ADDR+0x32c>
 8005a24:	bf00      	nop
 8005a26:	3744      	adds	r7, #68	; 0x44
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d02b      	beq.n	8005aa0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d114      	bne.n	8005aa0 <I2C_SlaveTransmit_TXE+0x72>
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2b29      	cmp	r3, #41	; 0x29
 8005a7a:	d111      	bne.n	8005aa0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2221      	movs	r2, #33	; 0x21
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2228      	movs	r2, #40	; 0x28
 8005a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff f9f1 	bl	8004e82 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d011      	beq.n	8005ade <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	781a      	ldrb	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02c      	beq.n	8005b5c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d114      	bne.n	8005b5c <I2C_SlaveReceive_RXNE+0x74>
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b2a      	cmp	r3, #42	; 0x2a
 8005b36:	d111      	bne.n	8005b5c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b46:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2222      	movs	r2, #34	; 0x22
 8005b4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2228      	movs	r2, #40	; 0x28
 8005b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff f99c 	bl	8004e94 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	b2d2      	uxtb	r2, r2
 8005b82:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
 8005bae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bc0:	2b28      	cmp	r3, #40	; 0x28
 8005bc2:	d127      	bne.n	8005c14 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bd2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	089b      	lsrs	r3, r3, #2
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	09db      	lsrs	r3, r3, #7
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d103      	bne.n	8005bf8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	81bb      	strh	r3, [r7, #12]
 8005bf6:	e002      	b.n	8005bfe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c06:	89ba      	ldrh	r2, [r7, #12]
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff f94a 	bl	8004ea6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c12:	e00e      	b.n	8005c32 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c14:	2300      	movs	r3, #0
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c4a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c88:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c98:	d172      	bne.n	8005d80 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	2b22      	cmp	r3, #34	; 0x22
 8005c9e:	d002      	beq.n	8005ca6 <I2C_Slave_STOPF+0x6a>
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ca4:	d135      	bne.n	8005d12 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f043 0204 	orr.w	r2, r3, #4
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe f8b8 	bl	8003e54 <HAL_DMA_GetState>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d049      	beq.n	8005d7e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	4a69      	ldr	r2, [pc, #420]	; (8005e94 <I2C_Slave_STOPF+0x258>)
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fd ff30 	bl	8003b5c <HAL_DMA_Abort_IT>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d03d      	beq.n	8005d7e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d10:	e035      	b.n	8005d7e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0204 	orr.w	r2, r3, #4
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe f882 	bl	8003e54 <HAL_DMA_GetState>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d014      	beq.n	8005d80 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5a:	4a4e      	ldr	r2, [pc, #312]	; (8005e94 <I2C_Slave_STOPF+0x258>)
 8005d5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fd fefa 	bl	8003b5c <HAL_DMA_Abort_IT>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	e000      	b.n	8005d80 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d7e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03e      	beq.n	8005e08 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d112      	bne.n	8005dbe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d112      	bne.n	8005df2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b01      	subs	r3, #1
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	f043 0204 	orr.w	r2, r3, #4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f843 	bl	8005e9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e16:	e039      	b.n	8005e8c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e1c:	d109      	bne.n	8005e32 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2228      	movs	r2, #40	; 0x28
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff f831 	bl	8004e94 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b28      	cmp	r3, #40	; 0x28
 8005e3c:	d111      	bne.n	8005e62 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <I2C_Slave_STOPF+0x25c>)
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff f830 	bl	8004ec0 <HAL_I2C_ListenCpltCallback>
}
 8005e60:	e014      	b.n	8005e8c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	2b22      	cmp	r3, #34	; 0x22
 8005e68:	d002      	beq.n	8005e70 <I2C_Slave_STOPF+0x234>
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b22      	cmp	r3, #34	; 0x22
 8005e6e:	d10d      	bne.n	8005e8c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff f804 	bl	8004e94 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	08006549 	.word	0x08006549
 8005e98:	ffff0000 	.word	0xffff0000

08005e9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eaa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d002      	beq.n	8005ec0 <I2C_ITError+0x24>
 8005eba:	7bbb      	ldrb	r3, [r7, #14]
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d10a      	bne.n	8005ed6 <I2C_ITError+0x3a>
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b22      	cmp	r3, #34	; 0x22
 8005ec4:	d107      	bne.n	8005ed6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ed4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005edc:	2b28      	cmp	r3, #40	; 0x28
 8005ede:	d107      	bne.n	8005ef0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2228      	movs	r2, #40	; 0x28
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eee:	e015      	b.n	8005f1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efe:	d00a      	beq.n	8005f16 <I2C_ITError+0x7a>
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b60      	cmp	r3, #96	; 0x60
 8005f04:	d007      	beq.n	8005f16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2a:	d161      	bne.n	8005ff0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d020      	beq.n	8005f8a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4c:	4a6a      	ldr	r2, [pc, #424]	; (80060f8 <I2C_ITError+0x25c>)
 8005f4e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fd fe01 	bl	8003b5c <HAL_DMA_Abort_IT>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 8089 	beq.w	8006074 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f84:	4610      	mov	r0, r2
 8005f86:	4798      	blx	r3
 8005f88:	e074      	b.n	8006074 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8e:	4a5a      	ldr	r2, [pc, #360]	; (80060f8 <I2C_ITError+0x25c>)
 8005f90:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fd fde0 	bl	8003b5c <HAL_DMA_Abort_IT>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d068      	beq.n	8006074 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d10b      	bne.n	8005fc8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fea:	4610      	mov	r0, r2
 8005fec:	4798      	blx	r3
 8005fee:	e041      	b.n	8006074 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b60      	cmp	r3, #96	; 0x60
 8005ffa:	d125      	bne.n	8006048 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d10b      	bne.n	8006030 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 0201 	bic.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7fe ff61 	bl	8004f08 <HAL_I2C_AbortCpltCallback>
 8006046:	e015      	b.n	8006074 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d10b      	bne.n	800606e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691a      	ldr	r2, [r3, #16]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fe ff41 	bl	8004ef6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10e      	bne.n	80060a2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006094:	2b00      	cmp	r3, #0
 8006096:	d104      	bne.n	80060a2 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d007      	beq.n	80060b2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060b0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d113      	bne.n	80060ee <I2C_ITError+0x252>
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b28      	cmp	r3, #40	; 0x28
 80060ca:	d110      	bne.n	80060ee <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a0b      	ldr	r2, [pc, #44]	; (80060fc <I2C_ITError+0x260>)
 80060d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7fe fee9 	bl	8004ec0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	08006549 	.word	0x08006549
 80060fc:	ffff0000 	.word	0xffff0000

08006100 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af02      	add	r7, sp, #8
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	603b      	str	r3, [r7, #0]
 800610c:	460b      	mov	r3, r1
 800610e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b08      	cmp	r3, #8
 800611a:	d006      	beq.n	800612a <I2C_MasterRequestWrite+0x2a>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d003      	beq.n	800612a <I2C_MasterRequestWrite+0x2a>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006128:	d108      	bne.n	800613c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e00b      	b.n	8006154 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006140:	2b12      	cmp	r3, #18
 8006142:	d107      	bne.n	8006154 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fa99 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00d      	beq.n	8006188 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800617a:	d103      	bne.n	8006184 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e035      	b.n	80061f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006190:	d108      	bne.n	80061a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006192:	897b      	ldrh	r3, [r7, #10]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061a0:	611a      	str	r2, [r3, #16]
 80061a2:	e01b      	b.n	80061dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061a4:	897b      	ldrh	r3, [r7, #10]
 80061a6:	11db      	asrs	r3, r3, #7
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 0306 	and.w	r3, r3, #6
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	f063 030f 	orn	r3, r3, #15
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	490e      	ldr	r1, [pc, #56]	; (80061fc <I2C_MasterRequestWrite+0xfc>)
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fabf 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e010      	b.n	80061f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061d2:	897b      	ldrh	r3, [r7, #10]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	4907      	ldr	r1, [pc, #28]	; (8006200 <I2C_MasterRequestWrite+0x100>)
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 faaf 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	00010008 	.word	0x00010008
 8006200:	00010002 	.word	0x00010002

08006204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2200      	movs	r2, #0
 8006236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 fa2c 	bl	8006698 <I2C_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00d      	beq.n	8006262 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006254:	d103      	bne.n	800625e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e05f      	b.n	8006322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006262:	897b      	ldrh	r3, [r7, #10]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006270:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	492d      	ldr	r1, [pc, #180]	; (800632c <I2C_RequestMemoryWrite+0x128>)
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f000 fa64 	bl	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e04c      	b.n	8006322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a0:	6a39      	ldr	r1, [r7, #32]
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 face 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d107      	bne.n	80062c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e02b      	b.n	8006322 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ca:	88fb      	ldrh	r3, [r7, #6]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d105      	bne.n	80062dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062d0:	893b      	ldrh	r3, [r7, #8]
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]
 80062da:	e021      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062dc:	893b      	ldrh	r3, [r7, #8]
 80062de:	0a1b      	lsrs	r3, r3, #8
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ec:	6a39      	ldr	r1, [r7, #32]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 faa8 	bl	8006844 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d107      	bne.n	8006312 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006310:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e005      	b.n	8006322 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006316:	893b      	ldrh	r3, [r7, #8]
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	00010002 	.word	0x00010002

08006330 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800634c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006362:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006370:	2200      	movs	r2, #0
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	2200      	movs	r2, #0
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006384:	7cfb      	ldrb	r3, [r7, #19]
 8006386:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800638a:	2b21      	cmp	r3, #33	; 0x21
 800638c:	d007      	beq.n	800639e <I2C_DMAXferCplt+0x6e>
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006394:	2b22      	cmp	r3, #34	; 0x22
 8006396:	d131      	bne.n	80063fc <I2C_DMAXferCplt+0xcc>
 8006398:	7cbb      	ldrb	r3, [r7, #18]
 800639a:	2b20      	cmp	r3, #32
 800639c:	d12e      	bne.n	80063fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2200      	movs	r2, #0
 80063b2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063b4:	7cfb      	ldrb	r3, [r7, #19]
 80063b6:	2b29      	cmp	r3, #41	; 0x29
 80063b8:	d10a      	bne.n	80063d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2221      	movs	r2, #33	; 0x21
 80063be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2228      	movs	r2, #40	; 0x28
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f7fe fd5a 	bl	8004e82 <HAL_I2C_SlaveTxCpltCallback>
 80063ce:	e00c      	b.n	80063ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063d0:	7cfb      	ldrb	r3, [r7, #19]
 80063d2:	2b2a      	cmp	r3, #42	; 0x2a
 80063d4:	d109      	bne.n	80063ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2222      	movs	r2, #34	; 0x22
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2228      	movs	r2, #40	; 0x28
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063e4:	6978      	ldr	r0, [r7, #20]
 80063e6:	f7fe fd55 	bl	8004e94 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685a      	ldr	r2, [r3, #4]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80063f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80063fa:	e06a      	b.n	80064d2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d064      	beq.n	80064d2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b01      	cmp	r3, #1
 8006410:	d107      	bne.n	8006422 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006420:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006430:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006438:	d009      	beq.n	800644e <I2C_DMAXferCplt+0x11e>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d006      	beq.n	800644e <I2C_DMAXferCplt+0x11e>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006446:	d002      	beq.n	800644e <I2C_DMAXferCplt+0x11e>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b20      	cmp	r3, #32
 800644c:	d107      	bne.n	800645e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800646c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800648c:	6978      	ldr	r0, [r7, #20]
 800648e:	f7fe fd32 	bl	8004ef6 <HAL_I2C_ErrorCallback>
}
 8006492:	e01e      	b.n	80064d2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b40      	cmp	r3, #64	; 0x40
 80064a6:	d10a      	bne.n	80064be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f7fe fd14 	bl	8004ee4 <HAL_I2C_MemRxCpltCallback>
}
 80064bc:	e009      	b.n	80064d2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2212      	movs	r2, #18
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f7fe fccf 	bl	8004e70 <HAL_I2C_MasterRxCpltCallback>
}
 80064d2:	bf00      	nop
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006504:	2200      	movs	r2, #0
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006516:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0210 	orr.w	r2, r3, #16
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f7fe fcdb 	bl	8004ef6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006562:	4b4b      	ldr	r3, [pc, #300]	; (8006690 <I2C_DMAAbort+0x148>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	08db      	lsrs	r3, r3, #3
 8006568:	4a4a      	ldr	r2, [pc, #296]	; (8006694 <I2C_DMAAbort+0x14c>)
 800656a:	fba2 2303 	umull	r2, r3, r2, r3
 800656e:	0a1a      	lsrs	r2, r3, #8
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00da      	lsls	r2, r3, #3
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006586:	f043 0220 	orr.w	r2, r3, #32
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800658e:	e00a      	b.n	80065a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3b01      	subs	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d0ea      	beq.n	800657c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b2:	2200      	movs	r2, #0
 80065b4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	2200      	movs	r2, #0
 80065c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2200      	movs	r2, #0
 80065da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	2200      	movs	r2, #0
 80065ea:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	2200      	movs	r2, #0
 80065fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0201 	bic.w	r2, r2, #1
 800660a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b60      	cmp	r3, #96	; 0x60
 8006616:	d10e      	bne.n	8006636 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2220      	movs	r2, #32
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800662e:	6978      	ldr	r0, [r7, #20]
 8006630:	f7fe fc6a 	bl	8004f08 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006634:	e027      	b.n	8006686 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006636:	7cfb      	ldrb	r3, [r7, #19]
 8006638:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800663c:	2b28      	cmp	r3, #40	; 0x28
 800663e:	d117      	bne.n	8006670 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0201 	orr.w	r2, r2, #1
 800664e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800665e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2200      	movs	r2, #0
 8006664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	2228      	movs	r2, #40	; 0x28
 800666a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800666e:	e007      	b.n	8006680 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006680:	6978      	ldr	r0, [r7, #20]
 8006682:	f7fe fc38 	bl	8004ef6 <HAL_I2C_ErrorCallback>
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000010 	.word	0x20000010
 8006694:	14f8b589 	.word	0x14f8b589

08006698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	4613      	mov	r3, r2
 80066a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066a8:	e025      	b.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d021      	beq.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fc fc05 	bl	8002ec0 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d302      	bcc.n	80066c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d116      	bne.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f043 0220 	orr.w	r2, r3, #32
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e023      	b.n	800673e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	0c1b      	lsrs	r3, r3, #16
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10d      	bne.n	800671c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	43da      	mvns	r2, r3
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	4013      	ands	r3, r2
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	e00c      	b.n	8006736 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	43da      	mvns	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4013      	ands	r3, r2
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf0c      	ite	eq
 800672e:	2301      	moveq	r3, #1
 8006730:	2300      	movne	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d0b6      	beq.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006754:	e051      	b.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006764:	d123      	bne.n	80067ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679a:	f043 0204 	orr.w	r2, r3, #4
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	e046      	b.n	800683c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d021      	beq.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b6:	f7fc fb83 	bl	8002ec0 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d302      	bcc.n	80067cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d116      	bne.n	80067fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	f043 0220 	orr.w	r2, r3, #32
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e020      	b.n	800683c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	0c1b      	lsrs	r3, r3, #16
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b01      	cmp	r3, #1
 8006802:	d10c      	bne.n	800681e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	43da      	mvns	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4013      	ands	r3, r2
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	bf14      	ite	ne
 8006816:	2301      	movne	r3, #1
 8006818:	2300      	moveq	r3, #0
 800681a:	b2db      	uxtb	r3, r3
 800681c:	e00b      	b.n	8006836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	43da      	mvns	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4013      	ands	r3, r2
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d18d      	bne.n	8006756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006850:	e02d      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f8aa 	bl	80069ac <I2C_IsAcknowledgeFailed>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e02d      	b.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d021      	beq.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686a:	f7fc fb29 	bl	8002ec0 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	429a      	cmp	r2, r3
 8006878:	d302      	bcc.n	8006880 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d116      	bne.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f043 0220 	orr.w	r2, r3, #32
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e007      	b.n	80068be <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b80      	cmp	r3, #128	; 0x80
 80068ba:	d1ca      	bne.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068d2:	e02d      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 f869 	bl	80069ac <I2C_IsAcknowledgeFailed>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e02d      	b.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ea:	d021      	beq.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ec:	f7fc fae8 	bl	8002ec0 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d302      	bcc.n	8006902 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d116      	bne.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	f043 0220 	orr.w	r2, r3, #32
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e007      	b.n	8006940 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0304 	and.w	r3, r3, #4
 800693a:	2b04      	cmp	r3, #4
 800693c:	d1ca      	bne.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006954:	4b13      	ldr	r3, [pc, #76]	; (80069a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	4a13      	ldr	r2, [pc, #76]	; (80069a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800695c:	fba2 2303 	umull	r2, r3, r2, r3
 8006960:	0a1a      	lsrs	r2, r3, #8
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3b01      	subs	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d107      	bne.n	8006986 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e008      	b.n	8006998 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006994:	d0e9      	beq.n	800696a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000010 	.word	0x20000010
 80069a8:	14f8b589 	.word	0x14f8b589

080069ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c2:	d11b      	bne.n	80069fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2220      	movs	r2, #32
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	f043 0204 	orr.w	r2, r3, #4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bc80      	pop	{r7}
 8006a06:	4770      	bx	lr

08006a08 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a18:	d103      	bne.n	8006a22 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a20:	e007      	b.n	8006a32 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a2a:	d102      	bne.n	8006a32 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2208      	movs	r2, #8
 8006a30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a32:	bf00      	nop
 8006a34:	370c      	adds	r7, #12
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bc80      	pop	{r7}
 8006a3a:	4770      	bx	lr

08006a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e272      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8087 	beq.w	8006b6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a5c:	4b92      	ldr	r3, [pc, #584]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f003 030c 	and.w	r3, r3, #12
 8006a64:	2b04      	cmp	r3, #4
 8006a66:	d00c      	beq.n	8006a82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a68:	4b8f      	ldr	r3, [pc, #572]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d112      	bne.n	8006a9a <HAL_RCC_OscConfig+0x5e>
 8006a74:	4b8c      	ldr	r3, [pc, #560]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a80:	d10b      	bne.n	8006a9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a82:	4b89      	ldr	r3, [pc, #548]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d06c      	beq.n	8006b68 <HAL_RCC_OscConfig+0x12c>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d168      	bne.n	8006b68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e24c      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x76>
 8006aa4:	4b80      	ldr	r3, [pc, #512]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a7f      	ldr	r2, [pc, #508]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006aaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e02e      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10c      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x98>
 8006aba:	4b7b      	ldr	r3, [pc, #492]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a7a      	ldr	r2, [pc, #488]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	4b78      	ldr	r3, [pc, #480]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a77      	ldr	r2, [pc, #476]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006acc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad0:	6013      	str	r3, [r2, #0]
 8006ad2:	e01d      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0xbc>
 8006ade:	4b72      	ldr	r3, [pc, #456]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a71      	ldr	r2, [pc, #452]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	4b6f      	ldr	r3, [pc, #444]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a6e      	ldr	r2, [pc, #440]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0xd4>
 8006af8:	4b6b      	ldr	r3, [pc, #428]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a6a      	ldr	r2, [pc, #424]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	4b68      	ldr	r3, [pc, #416]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a67      	ldr	r2, [pc, #412]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d013      	beq.n	8006b40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b18:	f7fc f9d2 	bl	8002ec0 <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b20:	f7fc f9ce 	bl	8002ec0 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b64      	cmp	r3, #100	; 0x64
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e200      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b32:	4b5d      	ldr	r3, [pc, #372]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0xe4>
 8006b3e:	e014      	b.n	8006b6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b40:	f7fc f9be 	bl	8002ec0 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b48:	f7fc f9ba 	bl	8002ec0 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b64      	cmp	r3, #100	; 0x64
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e1ec      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b5a:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x10c>
 8006b66:	e000      	b.n	8006b6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d063      	beq.n	8006c3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b76:	4b4c      	ldr	r3, [pc, #304]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b82:	4b49      	ldr	r3, [pc, #292]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d11c      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x18c>
 8006b8e:	4b46      	ldr	r3, [pc, #280]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d116      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b9a:	4b43      	ldr	r3, [pc, #268]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x176>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d001      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e1c0      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bb2:	4b3d      	ldr	r3, [pc, #244]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4939      	ldr	r1, [pc, #228]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bc6:	e03a      	b.n	8006c3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d020      	beq.n	8006c12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bd0:	4b36      	ldr	r3, [pc, #216]	; (8006cac <HAL_RCC_OscConfig+0x270>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd6:	f7fc f973 	bl	8002ec0 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bde:	f7fc f96f 	bl	8002ec0 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e1a1      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf0:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0f0      	beq.n	8006bde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	695b      	ldr	r3, [r3, #20]
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4927      	ldr	r1, [pc, #156]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	600b      	str	r3, [r1, #0]
 8006c10:	e015      	b.n	8006c3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c12:	4b26      	ldr	r3, [pc, #152]	; (8006cac <HAL_RCC_OscConfig+0x270>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c18:	f7fc f952 	bl	8002ec0 <HAL_GetTick>
 8006c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c1e:	e008      	b.n	8006c32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c20:	f7fc f94e 	bl	8002ec0 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d901      	bls.n	8006c32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e180      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c32:	4b1d      	ldr	r3, [pc, #116]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1f0      	bne.n	8006c20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d03a      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d019      	beq.n	8006c86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c52:	4b17      	ldr	r3, [pc, #92]	; (8006cb0 <HAL_RCC_OscConfig+0x274>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c58:	f7fc f932 	bl	8002ec0 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c60:	f7fc f92e 	bl	8002ec0 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e160      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <HAL_RCC_OscConfig+0x26c>)
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c7e:	2001      	movs	r0, #1
 8006c80:	f000 fad8 	bl	8007234 <RCC_Delay>
 8006c84:	e01c      	b.n	8006cc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <HAL_RCC_OscConfig+0x274>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c8c:	f7fc f918 	bl	8002ec0 <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c92:	e00f      	b.n	8006cb4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c94:	f7fc f914 	bl	8002ec0 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d908      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e146      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
 8006ca6:	bf00      	nop
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	42420000 	.word	0x42420000
 8006cb0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cb4:	4b92      	ldr	r3, [pc, #584]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e9      	bne.n	8006c94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80a6 	beq.w	8006e1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cd2:	4b8b      	ldr	r3, [pc, #556]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10d      	bne.n	8006cfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cde:	4b88      	ldr	r3, [pc, #544]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	4a87      	ldr	r2, [pc, #540]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ce8:	61d3      	str	r3, [r2, #28]
 8006cea:	4b85      	ldr	r3, [pc, #532]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf2:	60bb      	str	r3, [r7, #8]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfa:	4b82      	ldr	r3, [pc, #520]	; (8006f04 <HAL_RCC_OscConfig+0x4c8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d118      	bne.n	8006d38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d06:	4b7f      	ldr	r3, [pc, #508]	; (8006f04 <HAL_RCC_OscConfig+0x4c8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a7e      	ldr	r2, [pc, #504]	; (8006f04 <HAL_RCC_OscConfig+0x4c8>)
 8006d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d12:	f7fc f8d5 	bl	8002ec0 <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d18:	e008      	b.n	8006d2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d1a:	f7fc f8d1 	bl	8002ec0 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b64      	cmp	r3, #100	; 0x64
 8006d26:	d901      	bls.n	8006d2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e103      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d2c:	4b75      	ldr	r3, [pc, #468]	; (8006f04 <HAL_RCC_OscConfig+0x4c8>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d0f0      	beq.n	8006d1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d106      	bne.n	8006d4e <HAL_RCC_OscConfig+0x312>
 8006d40:	4b6f      	ldr	r3, [pc, #444]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	4a6e      	ldr	r2, [pc, #440]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6213      	str	r3, [r2, #32]
 8006d4c:	e02d      	b.n	8006daa <HAL_RCC_OscConfig+0x36e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCC_OscConfig+0x334>
 8006d56:	4b6a      	ldr	r3, [pc, #424]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	6a1b      	ldr	r3, [r3, #32]
 8006d5a:	4a69      	ldr	r2, [pc, #420]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	6213      	str	r3, [r2, #32]
 8006d62:	4b67      	ldr	r3, [pc, #412]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	4a66      	ldr	r2, [pc, #408]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d68:	f023 0304 	bic.w	r3, r3, #4
 8006d6c:	6213      	str	r3, [r2, #32]
 8006d6e:	e01c      	b.n	8006daa <HAL_RCC_OscConfig+0x36e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	d10c      	bne.n	8006d92 <HAL_RCC_OscConfig+0x356>
 8006d78:	4b61      	ldr	r3, [pc, #388]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	4a60      	ldr	r2, [pc, #384]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d7e:	f043 0304 	orr.w	r3, r3, #4
 8006d82:	6213      	str	r3, [r2, #32]
 8006d84:	4b5e      	ldr	r3, [pc, #376]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	4a5d      	ldr	r2, [pc, #372]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6213      	str	r3, [r2, #32]
 8006d90:	e00b      	b.n	8006daa <HAL_RCC_OscConfig+0x36e>
 8006d92:	4b5b      	ldr	r3, [pc, #364]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	4a5a      	ldr	r2, [pc, #360]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	6213      	str	r3, [r2, #32]
 8006d9e:	4b58      	ldr	r3, [pc, #352]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	4a57      	ldr	r2, [pc, #348]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d015      	beq.n	8006dde <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db2:	f7fc f885 	bl	8002ec0 <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db8:	e00a      	b.n	8006dd0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fc f881 	bl	8002ec0 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e0b1      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd0:	4b4b      	ldr	r3, [pc, #300]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ee      	beq.n	8006dba <HAL_RCC_OscConfig+0x37e>
 8006ddc:	e014      	b.n	8006e08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dde:	f7fc f86f 	bl	8002ec0 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de4:	e00a      	b.n	8006dfc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de6:	f7fc f86b 	bl	8002ec0 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d901      	bls.n	8006dfc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e09b      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfc:	4b40      	ldr	r3, [pc, #256]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ee      	bne.n	8006de6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006e08:	7dfb      	ldrb	r3, [r7, #23]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d105      	bne.n	8006e1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0e:	4b3c      	ldr	r3, [pc, #240]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	4a3b      	ldr	r2, [pc, #236]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	69db      	ldr	r3, [r3, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8087 	beq.w	8006f32 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e24:	4b36      	ldr	r3, [pc, #216]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f003 030c 	and.w	r3, r3, #12
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d061      	beq.n	8006ef4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d146      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e38:	4b33      	ldr	r3, [pc, #204]	; (8006f08 <HAL_RCC_OscConfig+0x4cc>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3e:	f7fc f83f 	bl	8002ec0 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e46:	f7fc f83b 	bl	8002ec0 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e06d      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e58:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f0      	bne.n	8006e46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e6c:	d108      	bne.n	8006e80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e6e:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	4921      	ldr	r1, [pc, #132]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e80:	4b1f      	ldr	r3, [pc, #124]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a19      	ldr	r1, [r3, #32]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	430b      	orrs	r3, r1
 8006e92:	491b      	ldr	r1, [pc, #108]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e98:	4b1b      	ldr	r3, [pc, #108]	; (8006f08 <HAL_RCC_OscConfig+0x4cc>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9e:	f7fc f80f 	bl	8002ec0 <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea6:	f7fc f80b 	bl	8002ec0 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e03d      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x46a>
 8006ec4:	e035      	b.n	8006f32 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <HAL_RCC_OscConfig+0x4cc>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ecc:	f7fb fff8 	bl	8002ec0 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fb fff4 	bl	8002ec0 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e026      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ee6:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <HAL_RCC_OscConfig+0x4c4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x498>
 8006ef2:	e01e      	b.n	8006f32 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d107      	bne.n	8006f0c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e019      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
 8006f00:	40021000 	.word	0x40021000
 8006f04:	40007000 	.word	0x40007000
 8006f08:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <HAL_RCC_OscConfig+0x500>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d106      	bne.n	8006f2e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40021000 	.word	0x40021000

08006f40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0d0      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f54:	4b6a      	ldr	r3, [pc, #424]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d910      	bls.n	8006f84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f62:	4b67      	ldr	r3, [pc, #412]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 0207 	bic.w	r2, r3, #7
 8006f6a:	4965      	ldr	r1, [pc, #404]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f72:	4b63      	ldr	r3, [pc, #396]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d001      	beq.n	8006f84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0b8      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d020      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f9c:	4b59      	ldr	r3, [pc, #356]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	4a58      	ldr	r2, [pc, #352]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006fa6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d005      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb4:	4b53      	ldr	r3, [pc, #332]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	4a52      	ldr	r2, [pc, #328]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006fba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006fbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc0:	4b50      	ldr	r3, [pc, #320]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	494d      	ldr	r1, [pc, #308]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d040      	beq.n	8007060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d107      	bne.n	8006ff6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe6:	4b47      	ldr	r3, [pc, #284]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d115      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e07f      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d107      	bne.n	800700e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ffe:	4b41      	ldr	r3, [pc, #260]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e073      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800700e:	4b3d      	ldr	r3, [pc, #244]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e06b      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800701e:	4b39      	ldr	r3, [pc, #228]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f023 0203 	bic.w	r2, r3, #3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4936      	ldr	r1, [pc, #216]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	4313      	orrs	r3, r2
 800702e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007030:	f7fb ff46 	bl	8002ec0 <HAL_GetTick>
 8007034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007036:	e00a      	b.n	800704e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007038:	f7fb ff42 	bl	8002ec0 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	f241 3288 	movw	r2, #5000	; 0x1388
 8007046:	4293      	cmp	r3, r2
 8007048:	d901      	bls.n	800704e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e053      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800704e:	4b2d      	ldr	r3, [pc, #180]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 020c 	and.w	r2, r3, #12
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	429a      	cmp	r2, r3
 800705e:	d1eb      	bne.n	8007038 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d210      	bcs.n	8007090 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800706e:	4b24      	ldr	r3, [pc, #144]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f023 0207 	bic.w	r2, r3, #7
 8007076:	4922      	ldr	r1, [pc, #136]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	4313      	orrs	r3, r2
 800707c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800707e:	4b20      	ldr	r3, [pc, #128]	; (8007100 <HAL_RCC_ClockConfig+0x1c0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0307 	and.w	r3, r3, #7
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	429a      	cmp	r2, r3
 800708a:	d001      	beq.n	8007090 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e032      	b.n	80070f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d008      	beq.n	80070ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800709c:	4b19      	ldr	r3, [pc, #100]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4916      	ldr	r1, [pc, #88]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d009      	beq.n	80070ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070ba:	4b12      	ldr	r3, [pc, #72]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	490e      	ldr	r1, [pc, #56]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070ce:	f000 f821 	bl	8007114 <HAL_RCC_GetSysClockFreq>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	091b      	lsrs	r3, r3, #4
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	490a      	ldr	r1, [pc, #40]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070e0:	5ccb      	ldrb	r3, [r1, r3]
 80070e2:	fa22 f303 	lsr.w	r3, r2, r3
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1cc>)
 80070e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <HAL_RCC_ClockConfig+0x1d0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fb fea4 	bl	8002e3c <HAL_InitTick>

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	40022000 	.word	0x40022000
 8007104:	40021000 	.word	0x40021000
 8007108:	0800b088 	.word	0x0800b088
 800710c:	20000010 	.word	0x20000010
 8007110:	20000014 	.word	0x20000014

08007114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007114:	b490      	push	{r4, r7}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800711a:	4b29      	ldr	r3, [pc, #164]	; (80071c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800711c:	1d3c      	adds	r4, r7, #4
 800711e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007120:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007124:	f240 2301 	movw	r3, #513	; 0x201
 8007128:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	61fb      	str	r3, [r7, #28]
 800712e:	2300      	movs	r3, #0
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	2300      	movs	r3, #0
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800713e:	4b21      	ldr	r3, [pc, #132]	; (80071c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b04      	cmp	r3, #4
 800714c:	d002      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x40>
 800714e:	2b08      	cmp	r3, #8
 8007150:	d003      	beq.n	800715a <HAL_RCC_GetSysClockFreq+0x46>
 8007152:	e02b      	b.n	80071ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007154:	4b1c      	ldr	r3, [pc, #112]	; (80071c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007156:	623b      	str	r3, [r7, #32]
      break;
 8007158:	e02b      	b.n	80071b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	0c9b      	lsrs	r3, r3, #18
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	3328      	adds	r3, #40	; 0x28
 8007164:	443b      	add	r3, r7
 8007166:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800716a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d012      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007176:	4b13      	ldr	r3, [pc, #76]	; (80071c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	0c5b      	lsrs	r3, r3, #17
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	3328      	adds	r3, #40	; 0x28
 8007182:	443b      	add	r3, r7
 8007184:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007188:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800718e:	fb03 f202 	mul.w	r2, r3, r2
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	fbb2 f3f3 	udiv	r3, r2, r3
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
 800719a:	e004      	b.n	80071a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	4a0b      	ldr	r2, [pc, #44]	; (80071cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a0:	fb02 f303 	mul.w	r3, r2, r3
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	623b      	str	r3, [r7, #32]
      break;
 80071aa:	e002      	b.n	80071b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80071ae:	623b      	str	r3, [r7, #32]
      break;
 80071b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071b2:	6a3b      	ldr	r3, [r7, #32]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3728      	adds	r7, #40	; 0x28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bc90      	pop	{r4, r7}
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	0800a9c0 	.word	0x0800a9c0
 80071c4:	40021000 	.word	0x40021000
 80071c8:	007a1200 	.word	0x007a1200
 80071cc:	003d0900 	.word	0x003d0900

080071d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071d4:	4b02      	ldr	r3, [pc, #8]	; (80071e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80071d6:	681b      	ldr	r3, [r3, #0]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	46bd      	mov	sp, r7
 80071dc:	bc80      	pop	{r7}
 80071de:	4770      	bx	lr
 80071e0:	20000010 	.word	0x20000010

080071e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071e8:	f7ff fff2 	bl	80071d0 <HAL_RCC_GetHCLKFreq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4b05      	ldr	r3, [pc, #20]	; (8007204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	4903      	ldr	r1, [pc, #12]	; (8007208 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071fa:	5ccb      	ldrb	r3, [r1, r3]
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007200:	4618      	mov	r0, r3
 8007202:	bd80      	pop	{r7, pc}
 8007204:	40021000 	.word	0x40021000
 8007208:	0800b098 	.word	0x0800b098

0800720c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007210:	f7ff ffde 	bl	80071d0 <HAL_RCC_GetHCLKFreq>
 8007214:	4602      	mov	r2, r0
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	0adb      	lsrs	r3, r3, #11
 800721c:	f003 0307 	and.w	r3, r3, #7
 8007220:	4903      	ldr	r1, [pc, #12]	; (8007230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007222:	5ccb      	ldrb	r3, [r1, r3]
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007228:	4618      	mov	r0, r3
 800722a:	bd80      	pop	{r7, pc}
 800722c:	40021000 	.word	0x40021000
 8007230:	0800b098 	.word	0x0800b098

08007234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800723c:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <RCC_Delay+0x34>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a0a      	ldr	r2, [pc, #40]	; (800726c <RCC_Delay+0x38>)
 8007242:	fba2 2303 	umull	r2, r3, r2, r3
 8007246:	0a5b      	lsrs	r3, r3, #9
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	fb02 f303 	mul.w	r3, r2, r3
 800724e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007250:	bf00      	nop
  }
  while (Delay --);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1e5a      	subs	r2, r3, #1
 8007256:	60fa      	str	r2, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1f9      	bne.n	8007250 <RCC_Delay+0x1c>
}
 800725c:	bf00      	nop
 800725e:	bf00      	nop
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr
 8007268:	20000010 	.word	0x20000010
 800726c:	10624dd3 	.word	0x10624dd3

08007270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0301 	and.w	r3, r3, #1
 8007288:	2b00      	cmp	r3, #0
 800728a:	d07d      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800728c:	2300      	movs	r3, #0
 800728e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007290:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10d      	bne.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800729c:	4b4c      	ldr	r3, [pc, #304]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	4a4b      	ldr	r2, [pc, #300]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a6:	61d3      	str	r3, [r2, #28]
 80072a8:	4b49      	ldr	r3, [pc, #292]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072b4:	2301      	movs	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b8:	4b46      	ldr	r3, [pc, #280]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d118      	bne.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072c4:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a42      	ldr	r2, [pc, #264]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072d0:	f7fb fdf6 	bl	8002ec0 <HAL_GetTick>
 80072d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072d6:	e008      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072d8:	f7fb fdf2 	bl	8002ec0 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b64      	cmp	r3, #100	; 0x64
 80072e4:	d901      	bls.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e06d      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ea:	4b3a      	ldr	r3, [pc, #232]	; (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072f6:	4b36      	ldr	r3, [pc, #216]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d02e      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	429a      	cmp	r2, r3
 8007312:	d027      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007314:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007324:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007326:	2200      	movs	r2, #0
 8007328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800732a:	4a29      	ldr	r2, [pc, #164]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d014      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733a:	f7fb fdc1 	bl	8002ec0 <HAL_GetTick>
 800733e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007340:	e00a      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007342:	f7fb fdbd 	bl	8002ec0 <HAL_GetTick>
 8007346:	4602      	mov	r2, r0
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007350:	4293      	cmp	r3, r2
 8007352:	d901      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e036      	b.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007358:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0ee      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007364:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4917      	ldr	r1, [pc, #92]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007372:	4313      	orrs	r3, r2
 8007374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d105      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800737c:	4b14      	ldr	r3, [pc, #80]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d008      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007394:	4b0e      	ldr	r3, [pc, #56]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	490b      	ldr	r1, [pc, #44]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073a2:	4313      	orrs	r3, r2
 80073a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0310 	and.w	r3, r3, #16
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d008      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073b2:	4b07      	ldr	r3, [pc, #28]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	4904      	ldr	r1, [pc, #16]	; (80073d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40021000 	.word	0x40021000
 80073d4:	40007000 	.word	0x40007000
 80073d8:	42420440 	.word	0x42420440

080073dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b08d      	sub	sp, #52	; 0x34
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073e4:	4b58      	ldr	r3, [pc, #352]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80073e6:	f107 040c 	add.w	r4, r7, #12
 80073ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80073f0:	f240 2301 	movw	r3, #513	; 0x201
 80073f4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	627b      	str	r3, [r7, #36]	; 0x24
 80073fa:	2300      	movs	r3, #0
 80073fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073fe:	2300      	movs	r3, #0
 8007400:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	2300      	movs	r3, #0
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b10      	cmp	r3, #16
 800740e:	d00a      	beq.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b10      	cmp	r3, #16
 8007414:	f200 808e 	bhi.w	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d049      	beq.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b02      	cmp	r3, #2
 8007422:	d079      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007424:	e086      	b.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8007426:	4b49      	ldr	r3, [pc, #292]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800742c:	4b47      	ldr	r3, [pc, #284]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d07f      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	0c9b      	lsrs	r3, r3, #18
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	3330      	adds	r3, #48	; 0x30
 8007442:	443b      	add	r3, r7
 8007444:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007448:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d017      	beq.n	8007484 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007454:	4b3d      	ldr	r3, [pc, #244]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	0c5b      	lsrs	r3, r3, #17
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	3330      	adds	r3, #48	; 0x30
 8007460:	443b      	add	r3, r7
 8007462:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007472:	4a37      	ldr	r2, [pc, #220]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	fbb2 f2f3 	udiv	r2, r2, r3
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	fb02 f303 	mul.w	r3, r2, r3
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007482:	e004      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	4a33      	ldr	r2, [pc, #204]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007488:	fb02 f303 	mul.w	r3, r2, r3
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800748e:	4b2f      	ldr	r3, [pc, #188]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800749a:	d102      	bne.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074a0:	e04a      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80074a8:	fba2 2303 	umull	r2, r3, r2, r3
 80074ac:	085b      	lsrs	r3, r3, #1
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074b0:	e042      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80074b2:	4b26      	ldr	r3, [pc, #152]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c2:	d108      	bne.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80074ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d4:	e01f      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e0:	d109      	bne.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80074e2:	4b1a      	ldr	r3, [pc, #104]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80074ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80074f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074f4:	e00f      	b.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007500:	d11c      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007502:	4b12      	ldr	r3, [pc, #72]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d016      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800750e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007514:	e012      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007516:	e011      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007518:	f7ff fe78 	bl	800720c <HAL_RCC_GetPCLK2Freq>
 800751c:	4602      	mov	r2, r0
 800751e:	4b0b      	ldr	r3, [pc, #44]	; (800754c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	0b9b      	lsrs	r3, r3, #14
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	3301      	adds	r3, #1
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007530:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007532:	e004      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007534:	bf00      	nop
 8007536:	e002      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007538:	bf00      	nop
 800753a:	e000      	b.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800753c:	bf00      	nop
    }
  }
  return (frequency);
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007540:	4618      	mov	r0, r3
 8007542:	3734      	adds	r7, #52	; 0x34
 8007544:	46bd      	mov	sp, r7
 8007546:	bd90      	pop	{r4, r7, pc}
 8007548:	0800a9d0 	.word	0x0800a9d0
 800754c:	40021000 	.word	0x40021000
 8007550:	007a1200 	.word	0x007a1200
 8007554:	003d0900 	.word	0x003d0900
 8007558:	aaaaaaab 	.word	0xaaaaaaab

0800755c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e076      	b.n	800765c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	d108      	bne.n	8007588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800757e:	d009      	beq.n	8007594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	61da      	str	r2, [r3, #28]
 8007586:	e005      	b.n	8007594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fa fe9e 	bl	80022f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a1b      	ldr	r3, [r3, #32]
 8007614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007618:	ea42 0103 	orr.w	r1, r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007620:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	0c1a      	lsrs	r2, r3, #16
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f002 0204 	and.w	r2, r2, #4
 800763a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69da      	ldr	r2, [r3, #28]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800764a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800767c:	2b01      	cmp	r3, #1
 800767e:	d101      	bne.n	8007684 <HAL_SPI_Transmit_DMA+0x20>
 8007680:	2302      	movs	r3, #2
 8007682:	e09b      	b.n	80077bc <HAL_SPI_Transmit_DMA+0x158>
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007692:	b2db      	uxtb	r3, r3
 8007694:	2b01      	cmp	r3, #1
 8007696:	d002      	beq.n	800769e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007698:	2302      	movs	r3, #2
 800769a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800769c:	e089      	b.n	80077b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <HAL_SPI_Transmit_DMA+0x46>
 80076a4:	88fb      	ldrh	r3, [r7, #6]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076ae:	e080      	b.n	80077b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2203      	movs	r2, #3
 80076b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	88fa      	ldrh	r2, [r7, #6]
 80076c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	88fa      	ldrh	r2, [r7, #6]
 80076ce:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076f6:	d10f      	bne.n	8007718 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007706:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007716:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771c:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <HAL_SPI_Transmit_DMA+0x160>)
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007724:	4a28      	ldr	r2, [pc, #160]	; (80077c8 <HAL_SPI_Transmit_DMA+0x164>)
 8007726:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800772c:	4a27      	ldr	r2, [pc, #156]	; (80077cc <HAL_SPI_Transmit_DMA+0x168>)
 800772e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007734:	2200      	movs	r2, #0
 8007736:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007740:	4619      	mov	r1, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800774e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007750:	f7fc f9a4 	bl	8003a9c <HAL_DMA_Start_IT>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00c      	beq.n	8007774 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	f043 0210 	orr.w	r2, r3, #16
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007772:	e01e      	b.n	80077b2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d007      	beq.n	8007792 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007790:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0220 	orr.w	r2, r2, #32
 80077a0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0202 	orr.w	r2, r2, #2
 80077b0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	080078ad 	.word	0x080078ad
 80077c8:	08007807 	.word	0x08007807
 80077cc:	080078c9 	.word	0x080078c9

080077d0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	bc80      	pop	{r7}
 80077e0:	4770      	bx	lr

080077e2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077e2:	b480      	push	{r7}
 80077e4:	b083      	sub	sp, #12
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80077ea:	bf00      	nop
 80077ec:	370c      	adds	r7, #12
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr

08007806 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007814:	f7fb fb54 	bl	8002ec0 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b20      	cmp	r3, #32
 8007826:	d03b      	beq.n	80078a0 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0220 	bic.w	r2, r2, #32
 8007836:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 0202 	bic.w	r2, r2, #2
 8007846:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	2164      	movs	r1, #100	; 0x64
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	f000 f8e3 	bl	8007a18 <SPI_EndRxTxTransaction>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	2200      	movs	r2, #0
 8007886:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007898:	6978      	ldr	r0, [r7, #20]
 800789a:	f7ff ffab 	bl	80077f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800789e:	e002      	b.n	80078a6 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80078a0:	6978      	ldr	r0, [r7, #20]
 80078a2:	f7ff ff95 	bl	80077d0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f7ff ff91 	bl	80077e2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0203 	bic.w	r2, r2, #3
 80078e4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	f043 0210 	orr.w	r2, r3, #16
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff ff7a 	bl	80077f4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4613      	mov	r3, r2
 8007916:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007918:	f7fb fad2 	bl	8002ec0 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007920:	1a9b      	subs	r3, r3, r2
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	4413      	add	r3, r2
 8007926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007928:	f7fb faca 	bl	8002ec0 <HAL_GetTick>
 800792c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800792e:	4b39      	ldr	r3, [pc, #228]	; (8007a14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	015b      	lsls	r3, r3, #5
 8007934:	0d1b      	lsrs	r3, r3, #20
 8007936:	69fa      	ldr	r2, [r7, #28]
 8007938:	fb02 f303 	mul.w	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800793e:	e054      	b.n	80079ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007946:	d050      	beq.n	80079ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007948:	f7fb faba 	bl	8002ec0 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	429a      	cmp	r2, r3
 8007956:	d902      	bls.n	800795e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d13d      	bne.n	80079da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800796c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007976:	d111      	bne.n	800799c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007980:	d004      	beq.n	800798c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798a:	d107      	bne.n	800799c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800799a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079a4:	d10f      	bne.n	80079c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e017      	b.n	8007a0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	3b01      	subs	r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4013      	ands	r3, r2
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	bf0c      	ite	eq
 80079fa:	2301      	moveq	r3, #1
 80079fc:	2300      	movne	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d19b      	bne.n	8007940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000010 	.word	0x20000010

08007a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff ff6a 	bl	8007908 <SPI_WaitFlagStateUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d007      	beq.n	8007a4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e000      	b.n	8007a4c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d101      	bne.n	8007a66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e041      	b.n	8007aea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fb f97c 	bl	8002d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f000 fa70 	bl	8007f78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d001      	beq.n	8007b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e03a      	b.n	8007b82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2202      	movs	r2, #2
 8007b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68da      	ldr	r2, [r3, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <HAL_TIM_Base_Start_IT+0x98>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00e      	beq.n	8007b4c <HAL_TIM_Base_Start_IT+0x58>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b36:	d009      	beq.n	8007b4c <HAL_TIM_Base_Start_IT+0x58>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a14      	ldr	r2, [pc, #80]	; (8007b90 <HAL_TIM_Base_Start_IT+0x9c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d004      	beq.n	8007b4c <HAL_TIM_Base_Start_IT+0x58>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d111      	bne.n	8007b70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d010      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0201 	orr.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6e:	e007      	b.n	8007b80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0201 	orr.w	r2, r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bc80      	pop	{r7}
 8007b8a:	4770      	bx	lr
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40000400 	.word	0x40000400
 8007b94:	40000800 	.word	0x40000800

08007b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d122      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d11b      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0202 	mvn.w	r2, #2
 8007bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9b1 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 8007be0:	e005      	b.n	8007bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9a4 	bl	8007f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f9b3 	bl	8007f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d122      	bne.n	8007c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d11b      	bne.n	8007c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0204 	mvn.w	r2, #4
 8007c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f987 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 8007c34:	e005      	b.n	8007c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f97a 	bl	8007f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f989 	bl	8007f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d122      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d11b      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0208 	mvn.w	r2, #8
 8007c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2204      	movs	r2, #4
 8007c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f95d 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 8007c88:	e005      	b.n	8007c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 f950 	bl	8007f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f95f 	bl	8007f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b10      	cmp	r3, #16
 8007ca8:	d122      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b10      	cmp	r3, #16
 8007cb6:	d11b      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0210 	mvn.w	r2, #16
 8007cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2208      	movs	r2, #8
 8007cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f933 	bl	8007f42 <HAL_TIM_IC_CaptureCallback>
 8007cdc:	e005      	b.n	8007cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f926 	bl	8007f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f935 	bl	8007f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d10e      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d107      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0201 	mvn.w	r2, #1
 8007d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7f9 f8ec 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	691b      	ldr	r3, [r3, #16]
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b80      	cmp	r3, #128	; 0x80
 8007d28:	d10e      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b80      	cmp	r3, #128	; 0x80
 8007d36:	d107      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa77 	bl	8008236 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d10e      	bne.n	8007d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d107      	bne.n	8007d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f8f9 	bl	8007f66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b20      	cmp	r3, #32
 8007d80:	d10e      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d107      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f06f 0220 	mvn.w	r2, #32
 8007d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa42 	bl	8008224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007da0:	bf00      	nop
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d101      	bne.n	8007dc0 <HAL_TIM_ConfigClockSource+0x18>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	e0b3      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x180>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007de6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df8:	d03e      	beq.n	8007e78 <HAL_TIM_ConfigClockSource+0xd0>
 8007dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dfe:	f200 8087 	bhi.w	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e06:	f000 8085 	beq.w	8007f14 <HAL_TIM_ConfigClockSource+0x16c>
 8007e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e0e:	d87f      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e10:	2b70      	cmp	r3, #112	; 0x70
 8007e12:	d01a      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0xa2>
 8007e14:	2b70      	cmp	r3, #112	; 0x70
 8007e16:	d87b      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e18:	2b60      	cmp	r3, #96	; 0x60
 8007e1a:	d050      	beq.n	8007ebe <HAL_TIM_ConfigClockSource+0x116>
 8007e1c:	2b60      	cmp	r3, #96	; 0x60
 8007e1e:	d877      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e20:	2b50      	cmp	r3, #80	; 0x50
 8007e22:	d03c      	beq.n	8007e9e <HAL_TIM_ConfigClockSource+0xf6>
 8007e24:	2b50      	cmp	r3, #80	; 0x50
 8007e26:	d873      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e28:	2b40      	cmp	r3, #64	; 0x40
 8007e2a:	d058      	beq.n	8007ede <HAL_TIM_ConfigClockSource+0x136>
 8007e2c:	2b40      	cmp	r3, #64	; 0x40
 8007e2e:	d86f      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e30:	2b30      	cmp	r3, #48	; 0x30
 8007e32:	d064      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x156>
 8007e34:	2b30      	cmp	r3, #48	; 0x30
 8007e36:	d86b      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e38:	2b20      	cmp	r3, #32
 8007e3a:	d060      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x156>
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d867      	bhi.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d05c      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x156>
 8007e44:	2b10      	cmp	r3, #16
 8007e46:	d05a      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007e48:	e062      	b.n	8007f10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6818      	ldr	r0, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6899      	ldr	r1, [r3, #8]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f000 f966 	bl	800812a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	609a      	str	r2, [r3, #8]
      break;
 8007e76:	e04e      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	6899      	ldr	r1, [r3, #8]
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	685a      	ldr	r2, [r3, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f000 f94f 	bl	800812a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e9a:	609a      	str	r2, [r3, #8]
      break;
 8007e9c:	e03b      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6818      	ldr	r0, [r3, #0]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	6859      	ldr	r1, [r3, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f000 f8c6 	bl	800803c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2150      	movs	r1, #80	; 0x50
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f91d 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007ebc:	e02b      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6818      	ldr	r0, [r3, #0]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	6859      	ldr	r1, [r3, #4]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f000 f8e4 	bl	8008098 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2160      	movs	r1, #96	; 0x60
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f000 f90d 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007edc:	e01b      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6818      	ldr	r0, [r3, #0]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	461a      	mov	r2, r3
 8007eec:	f000 f8a6 	bl	800803c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2140      	movs	r1, #64	; 0x40
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f8fd 	bl	80080f6 <TIM_ITRx_SetConfig>
      break;
 8007efc:	e00b      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4619      	mov	r1, r3
 8007f08:	4610      	mov	r0, r2
 8007f0a:	f000 f8f4 	bl	80080f6 <TIM_ITRx_SetConfig>
        break;
 8007f0e:	e002      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f10:	bf00      	nop
 8007f12:	e000      	b.n	8007f16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a29      	ldr	r2, [pc, #164]	; (8008030 <TIM_Base_SetConfig+0xb8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00b      	beq.n	8007fa8 <TIM_Base_SetConfig+0x30>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f96:	d007      	beq.n	8007fa8 <TIM_Base_SetConfig+0x30>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a26      	ldr	r2, [pc, #152]	; (8008034 <TIM_Base_SetConfig+0xbc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d003      	beq.n	8007fa8 <TIM_Base_SetConfig+0x30>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a25      	ldr	r2, [pc, #148]	; (8008038 <TIM_Base_SetConfig+0xc0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d108      	bne.n	8007fba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a1c      	ldr	r2, [pc, #112]	; (8008030 <TIM_Base_SetConfig+0xb8>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d00b      	beq.n	8007fda <TIM_Base_SetConfig+0x62>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fc8:	d007      	beq.n	8007fda <TIM_Base_SetConfig+0x62>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a19      	ldr	r2, [pc, #100]	; (8008034 <TIM_Base_SetConfig+0xbc>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d003      	beq.n	8007fda <TIM_Base_SetConfig+0x62>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a18      	ldr	r2, [pc, #96]	; (8008038 <TIM_Base_SetConfig+0xc0>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d108      	bne.n	8007fec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a07      	ldr	r2, [pc, #28]	; (8008030 <TIM_Base_SetConfig+0xb8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d103      	bne.n	8008020 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	615a      	str	r2, [r3, #20]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	bc80      	pop	{r7}
 800802e:	4770      	bx	lr
 8008030:	40012c00 	.word	0x40012c00
 8008034:	40000400 	.word	0x40000400
 8008038:	40000800 	.word	0x40000800

0800803c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f023 0201 	bic.w	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	4313      	orrs	r3, r2
 8008070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f023 030a 	bic.w	r3, r3, #10
 8008078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	621a      	str	r2, [r3, #32]
}
 800808e:	bf00      	nop
 8008090:	371c      	adds	r7, #28
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr

08008098 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	f023 0210 	bic.w	r2, r3, #16
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	031b      	lsls	r3, r3, #12
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4313      	orrs	r3, r2
 80080de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	621a      	str	r2, [r3, #32]
}
 80080ec:	bf00      	nop
 80080ee:	371c      	adds	r7, #28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bc80      	pop	{r7}
 80080f4:	4770      	bx	lr

080080f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b085      	sub	sp, #20
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
 80080fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4313      	orrs	r3, r2
 8008114:	f043 0307 	orr.w	r3, r3, #7
 8008118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	609a      	str	r2, [r3, #8]
}
 8008120:	bf00      	nop
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr

0800812a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800812a:	b480      	push	{r7}
 800812c:	b087      	sub	sp, #28
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	607a      	str	r2, [r7, #4]
 8008136:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008144:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	021a      	lsls	r2, r3, #8
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	431a      	orrs	r2, r3
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4313      	orrs	r3, r2
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4313      	orrs	r3, r2
 8008156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	609a      	str	r2, [r3, #8]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	bc80      	pop	{r7}
 8008166:	4770      	bx	lr

08008168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800817c:	2302      	movs	r3, #2
 800817e:	e046      	b.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2202      	movs	r2, #2
 800818c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a16      	ldr	r2, [pc, #88]	; (8008218 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d00e      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081cc:	d009      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a12      	ldr	r2, [pc, #72]	; (800821c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d004      	beq.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a10      	ldr	r2, [pc, #64]	; (8008220 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d10c      	bne.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr
 8008218:	40012c00 	.word	0x40012c00
 800821c:	40000400 	.word	0x40000400
 8008220:	40000800 	.word	0x40000800

08008224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr

08008236 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008236:	b480      	push	{r7}
 8008238:	b083      	sub	sp, #12
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <cos>:
 8008248:	b530      	push	{r4, r5, lr}
 800824a:	4a20      	ldr	r2, [pc, #128]	; (80082cc <cos+0x84>)
 800824c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008250:	4293      	cmp	r3, r2
 8008252:	b087      	sub	sp, #28
 8008254:	dc06      	bgt.n	8008264 <cos+0x1c>
 8008256:	2200      	movs	r2, #0
 8008258:	2300      	movs	r3, #0
 800825a:	b007      	add	sp, #28
 800825c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008260:	f000 bbba 	b.w	80089d8 <__kernel_cos>
 8008264:	4a1a      	ldr	r2, [pc, #104]	; (80082d0 <cos+0x88>)
 8008266:	4293      	cmp	r3, r2
 8008268:	dd05      	ble.n	8008276 <cos+0x2e>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	f7f7 ff73 	bl	8000158 <__aeabi_dsub>
 8008272:	b007      	add	sp, #28
 8008274:	bd30      	pop	{r4, r5, pc}
 8008276:	aa02      	add	r2, sp, #8
 8008278:	f000 f906 	bl	8008488 <__ieee754_rem_pio2>
 800827c:	f000 0003 	and.w	r0, r0, #3
 8008280:	2801      	cmp	r0, #1
 8008282:	d009      	beq.n	8008298 <cos+0x50>
 8008284:	2802      	cmp	r0, #2
 8008286:	d011      	beq.n	80082ac <cos+0x64>
 8008288:	b9b8      	cbnz	r0, 80082ba <cos+0x72>
 800828a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800828e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008292:	f000 fba1 	bl	80089d8 <__kernel_cos>
 8008296:	e7ec      	b.n	8008272 <cos+0x2a>
 8008298:	9000      	str	r0, [sp, #0]
 800829a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800829e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a2:	f000 ff99 	bl	80091d8 <__kernel_sin>
 80082a6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80082aa:	e7e2      	b.n	8008272 <cos+0x2a>
 80082ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b4:	f000 fb90 	bl	80089d8 <__kernel_cos>
 80082b8:	e7f5      	b.n	80082a6 <cos+0x5e>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082c6:	f000 ff87 	bl	80091d8 <__kernel_sin>
 80082ca:	e7d2      	b.n	8008272 <cos+0x2a>
 80082cc:	3fe921fb 	.word	0x3fe921fb
 80082d0:	7fefffff 	.word	0x7fefffff

080082d4 <log10>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	4604      	mov	r4, r0
 80082d8:	460d      	mov	r5, r1
 80082da:	f000 f851 	bl	8008380 <__ieee754_log10>
 80082de:	4622      	mov	r2, r4
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	462b      	mov	r3, r5
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 fb87 	bl	80009fc <__aeabi_dcmpun>
 80082ee:	b998      	cbnz	r0, 8008318 <log10+0x44>
 80082f0:	2200      	movs	r2, #0
 80082f2:	2300      	movs	r3, #0
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f8 fb62 	bl	80009c0 <__aeabi_dcmple>
 80082fc:	b160      	cbz	r0, 8008318 <log10+0x44>
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f7f8 fb47 	bl	8000998 <__aeabi_dcmpeq>
 800830a:	b140      	cbz	r0, 800831e <log10+0x4a>
 800830c:	f001 fada 	bl	80098c4 <__errno>
 8008310:	2322      	movs	r3, #34	; 0x22
 8008312:	2600      	movs	r6, #0
 8008314:	4f06      	ldr	r7, [pc, #24]	; (8008330 <log10+0x5c>)
 8008316:	6003      	str	r3, [r0, #0]
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831e:	f001 fad1 	bl	80098c4 <__errno>
 8008322:	2321      	movs	r3, #33	; 0x21
 8008324:	6003      	str	r3, [r0, #0]
 8008326:	4803      	ldr	r0, [pc, #12]	; (8008334 <log10+0x60>)
 8008328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800832c:	f001 b890 	b.w	8009450 <nan>
 8008330:	fff00000 	.word	0xfff00000
 8008334:	0800b329 	.word	0x0800b329

08008338 <sqrt>:
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	4606      	mov	r6, r0
 800833c:	460f      	mov	r7, r1
 800833e:	f000 fa9b 	bl	8008878 <__ieee754_sqrt>
 8008342:	4632      	mov	r2, r6
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	463b      	mov	r3, r7
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f8 fb55 	bl	80009fc <__aeabi_dcmpun>
 8008352:	b990      	cbnz	r0, 800837a <sqrt+0x42>
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fb26 	bl	80009ac <__aeabi_dcmplt>
 8008360:	b158      	cbz	r0, 800837a <sqrt+0x42>
 8008362:	f001 faaf 	bl	80098c4 <__errno>
 8008366:	2321      	movs	r3, #33	; 0x21
 8008368:	2200      	movs	r2, #0
 800836a:	6003      	str	r3, [r0, #0]
 800836c:	2300      	movs	r3, #0
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	f7f8 f9d3 	bl	800071c <__aeabi_ddiv>
 8008376:	4604      	mov	r4, r0
 8008378:	460d      	mov	r5, r1
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008380 <__ieee754_log10>:
 8008380:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008388:	4604      	mov	r4, r0
 800838a:	460d      	mov	r5, r1
 800838c:	460b      	mov	r3, r1
 800838e:	da26      	bge.n	80083de <__ieee754_log10+0x5e>
 8008390:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008394:	4302      	orrs	r2, r0
 8008396:	d107      	bne.n	80083a8 <__ieee754_log10+0x28>
 8008398:	2200      	movs	r2, #0
 800839a:	2300      	movs	r3, #0
 800839c:	2000      	movs	r0, #0
 800839e:	4936      	ldr	r1, [pc, #216]	; (8008478 <__ieee754_log10+0xf8>)
 80083a0:	f7f8 f9bc 	bl	800071c <__aeabi_ddiv>
 80083a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a8:	2900      	cmp	r1, #0
 80083aa:	da05      	bge.n	80083b8 <__ieee754_log10+0x38>
 80083ac:	4602      	mov	r2, r0
 80083ae:	f7f7 fed3 	bl	8000158 <__aeabi_dsub>
 80083b2:	2200      	movs	r2, #0
 80083b4:	2300      	movs	r3, #0
 80083b6:	e7f3      	b.n	80083a0 <__ieee754_log10+0x20>
 80083b8:	2200      	movs	r2, #0
 80083ba:	4b30      	ldr	r3, [pc, #192]	; (800847c <__ieee754_log10+0xfc>)
 80083bc:	f7f8 f884 	bl	80004c8 <__aeabi_dmul>
 80083c0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80083c4:	4604      	mov	r4, r0
 80083c6:	460d      	mov	r5, r1
 80083c8:	460b      	mov	r3, r1
 80083ca:	492d      	ldr	r1, [pc, #180]	; (8008480 <__ieee754_log10+0x100>)
 80083cc:	428b      	cmp	r3, r1
 80083ce:	dd08      	ble.n	80083e2 <__ieee754_log10+0x62>
 80083d0:	4622      	mov	r2, r4
 80083d2:	462b      	mov	r3, r5
 80083d4:	4620      	mov	r0, r4
 80083d6:	4629      	mov	r1, r5
 80083d8:	f7f7 fec0 	bl	800015c <__adddf3>
 80083dc:	e7e2      	b.n	80083a4 <__ieee754_log10+0x24>
 80083de:	2200      	movs	r2, #0
 80083e0:	e7f3      	b.n	80083ca <__ieee754_log10+0x4a>
 80083e2:	1518      	asrs	r0, r3, #20
 80083e4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80083e8:	4410      	add	r0, r2
 80083ea:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80083ee:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80083f2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80083f6:	f7f7 fffd 	bl	80003f4 <__aeabi_i2d>
 80083fa:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80083fe:	3303      	adds	r3, #3
 8008400:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	4620      	mov	r0, r4
 800840a:	4629      	mov	r1, r5
 800840c:	f001 f8a8 	bl	8009560 <__ieee754_log>
 8008410:	a313      	add	r3, pc, #76	; (adr r3, 8008460 <__ieee754_log10+0xe0>)
 8008412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008416:	4680      	mov	r8, r0
 8008418:	4689      	mov	r9, r1
 800841a:	4630      	mov	r0, r6
 800841c:	4639      	mov	r1, r7
 800841e:	f7f8 f853 	bl	80004c8 <__aeabi_dmul>
 8008422:	a311      	add	r3, pc, #68	; (adr r3, 8008468 <__ieee754_log10+0xe8>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 f84a 	bl	80004c8 <__aeabi_dmul>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	4620      	mov	r0, r4
 800843a:	4629      	mov	r1, r5
 800843c:	f7f7 fe8e 	bl	800015c <__adddf3>
 8008440:	a30b      	add	r3, pc, #44	; (adr r3, 8008470 <__ieee754_log10+0xf0>)
 8008442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008446:	4604      	mov	r4, r0
 8008448:	460d      	mov	r5, r1
 800844a:	4630      	mov	r0, r6
 800844c:	4639      	mov	r1, r7
 800844e:	f7f8 f83b 	bl	80004c8 <__aeabi_dmul>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4620      	mov	r0, r4
 8008458:	4629      	mov	r1, r5
 800845a:	e7bd      	b.n	80083d8 <__ieee754_log10+0x58>
 800845c:	f3af 8000 	nop.w
 8008460:	11f12b36 	.word	0x11f12b36
 8008464:	3d59fef3 	.word	0x3d59fef3
 8008468:	1526e50e 	.word	0x1526e50e
 800846c:	3fdbcb7b 	.word	0x3fdbcb7b
 8008470:	509f6000 	.word	0x509f6000
 8008474:	3fd34413 	.word	0x3fd34413
 8008478:	c3500000 	.word	0xc3500000
 800847c:	43500000 	.word	0x43500000
 8008480:	7fefffff 	.word	0x7fefffff
 8008484:	00000000 	.word	0x00000000

08008488 <__ieee754_rem_pio2>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	4614      	mov	r4, r2
 800848e:	4ac4      	ldr	r2, [pc, #784]	; (80087a0 <__ieee754_rem_pio2+0x318>)
 8008490:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008494:	b08d      	sub	sp, #52	; 0x34
 8008496:	4592      	cmp	sl, r2
 8008498:	9104      	str	r1, [sp, #16]
 800849a:	dc07      	bgt.n	80084ac <__ieee754_rem_pio2+0x24>
 800849c:	2200      	movs	r2, #0
 800849e:	2300      	movs	r3, #0
 80084a0:	e9c4 0100 	strd	r0, r1, [r4]
 80084a4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80084a8:	2500      	movs	r5, #0
 80084aa:	e024      	b.n	80084f6 <__ieee754_rem_pio2+0x6e>
 80084ac:	4abd      	ldr	r2, [pc, #756]	; (80087a4 <__ieee754_rem_pio2+0x31c>)
 80084ae:	4592      	cmp	sl, r2
 80084b0:	dc72      	bgt.n	8008598 <__ieee754_rem_pio2+0x110>
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	4dbc      	ldr	r5, [pc, #752]	; (80087a8 <__ieee754_rem_pio2+0x320>)
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008768 <__ieee754_rem_pio2+0x2e0>)
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	dd36      	ble.n	800852e <__ieee754_rem_pio2+0xa6>
 80084c0:	f7f7 fe4a 	bl	8000158 <__aeabi_dsub>
 80084c4:	45aa      	cmp	sl, r5
 80084c6:	4606      	mov	r6, r0
 80084c8:	460f      	mov	r7, r1
 80084ca:	d018      	beq.n	80084fe <__ieee754_rem_pio2+0x76>
 80084cc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2e8>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	f7f7 fe41 	bl	8000158 <__aeabi_dsub>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4630      	mov	r0, r6
 80084dc:	e9c4 2300 	strd	r2, r3, [r4]
 80084e0:	4639      	mov	r1, r7
 80084e2:	f7f7 fe39 	bl	8000158 <__aeabi_dsub>
 80084e6:	a3a2      	add	r3, pc, #648	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2e8>)
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f7f7 fe34 	bl	8000158 <__aeabi_dsub>
 80084f0:	2501      	movs	r5, #1
 80084f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80084f6:	4628      	mov	r0, r5
 80084f8:	b00d      	add	sp, #52	; 0x34
 80084fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084fe:	a39e      	add	r3, pc, #632	; (adr r3, 8008778 <__ieee754_rem_pio2+0x2f0>)
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f7f7 fe28 	bl	8000158 <__aeabi_dsub>
 8008508:	a39d      	add	r3, pc, #628	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2f8>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	f7f7 fe21 	bl	8000158 <__aeabi_dsub>
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4630      	mov	r0, r6
 800851c:	e9c4 2300 	strd	r2, r3, [r4]
 8008520:	4639      	mov	r1, r7
 8008522:	f7f7 fe19 	bl	8000158 <__aeabi_dsub>
 8008526:	a396      	add	r3, pc, #600	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2f8>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	e7de      	b.n	80084ec <__ieee754_rem_pio2+0x64>
 800852e:	f7f7 fe15 	bl	800015c <__adddf3>
 8008532:	45aa      	cmp	sl, r5
 8008534:	4606      	mov	r6, r0
 8008536:	460f      	mov	r7, r1
 8008538:	d016      	beq.n	8008568 <__ieee754_rem_pio2+0xe0>
 800853a:	a38d      	add	r3, pc, #564	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2e8>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f7 fe0c 	bl	800015c <__adddf3>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4630      	mov	r0, r6
 800854a:	e9c4 2300 	strd	r2, r3, [r4]
 800854e:	4639      	mov	r1, r7
 8008550:	f7f7 fe02 	bl	8000158 <__aeabi_dsub>
 8008554:	a386      	add	r3, pc, #536	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2e8>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 fdff 	bl	800015c <__adddf3>
 800855e:	f04f 35ff 	mov.w	r5, #4294967295
 8008562:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008566:	e7c6      	b.n	80084f6 <__ieee754_rem_pio2+0x6e>
 8008568:	a383      	add	r3, pc, #524	; (adr r3, 8008778 <__ieee754_rem_pio2+0x2f0>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f7 fdf5 	bl	800015c <__adddf3>
 8008572:	a383      	add	r3, pc, #524	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2f8>)
 8008574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	f7f7 fdee 	bl	800015c <__adddf3>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4630      	mov	r0, r6
 8008586:	e9c4 2300 	strd	r2, r3, [r4]
 800858a:	4639      	mov	r1, r7
 800858c:	f7f7 fde4 	bl	8000158 <__aeabi_dsub>
 8008590:	a37b      	add	r3, pc, #492	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2f8>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	e7e0      	b.n	800855a <__ieee754_rem_pio2+0xd2>
 8008598:	4a84      	ldr	r2, [pc, #528]	; (80087ac <__ieee754_rem_pio2+0x324>)
 800859a:	4592      	cmp	sl, r2
 800859c:	f300 80d5 	bgt.w	800874a <__ieee754_rem_pio2+0x2c2>
 80085a0:	f000 fed0 	bl	8009344 <fabs>
 80085a4:	a378      	add	r3, pc, #480	; (adr r3, 8008788 <__ieee754_rem_pio2+0x300>)
 80085a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	f7f7 ff8b 	bl	80004c8 <__aeabi_dmul>
 80085b2:	2200      	movs	r2, #0
 80085b4:	4b7e      	ldr	r3, [pc, #504]	; (80087b0 <__ieee754_rem_pio2+0x328>)
 80085b6:	f7f7 fdd1 	bl	800015c <__adddf3>
 80085ba:	f7f8 fa35 	bl	8000a28 <__aeabi_d2iz>
 80085be:	4605      	mov	r5, r0
 80085c0:	f7f7 ff18 	bl	80003f4 <__aeabi_i2d>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085cc:	a366      	add	r3, pc, #408	; (adr r3, 8008768 <__ieee754_rem_pio2+0x2e0>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 ff79 	bl	80004c8 <__aeabi_dmul>
 80085d6:	4602      	mov	r2, r0
 80085d8:	460b      	mov	r3, r1
 80085da:	4630      	mov	r0, r6
 80085dc:	4639      	mov	r1, r7
 80085de:	f7f7 fdbb 	bl	8000158 <__aeabi_dsub>
 80085e2:	a363      	add	r3, pc, #396	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2e8>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	4680      	mov	r8, r0
 80085ea:	4689      	mov	r9, r1
 80085ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f0:	f7f7 ff6a 	bl	80004c8 <__aeabi_dmul>
 80085f4:	2d1f      	cmp	r5, #31
 80085f6:	4606      	mov	r6, r0
 80085f8:	460f      	mov	r7, r1
 80085fa:	dc0e      	bgt.n	800861a <__ieee754_rem_pio2+0x192>
 80085fc:	4b6d      	ldr	r3, [pc, #436]	; (80087b4 <__ieee754_rem_pio2+0x32c>)
 80085fe:	1e6a      	subs	r2, r5, #1
 8008600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008604:	4553      	cmp	r3, sl
 8008606:	d008      	beq.n	800861a <__ieee754_rem_pio2+0x192>
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	4640      	mov	r0, r8
 800860e:	4649      	mov	r1, r9
 8008610:	f7f7 fda2 	bl	8000158 <__aeabi_dsub>
 8008614:	e9c4 0100 	strd	r0, r1, [r4]
 8008618:	e013      	b.n	8008642 <__ieee754_rem_pio2+0x1ba>
 800861a:	463b      	mov	r3, r7
 800861c:	4632      	mov	r2, r6
 800861e:	4640      	mov	r0, r8
 8008620:	4649      	mov	r1, r9
 8008622:	f7f7 fd99 	bl	8000158 <__aeabi_dsub>
 8008626:	ea4f 532a 	mov.w	r3, sl, asr #20
 800862a:	9305      	str	r3, [sp, #20]
 800862c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008630:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008634:	f1ba 0f10 	cmp.w	sl, #16
 8008638:	dc1f      	bgt.n	800867a <__ieee754_rem_pio2+0x1f2>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	e9c4 2300 	strd	r2, r3, [r4]
 8008642:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008646:	4640      	mov	r0, r8
 8008648:	4653      	mov	r3, sl
 800864a:	4649      	mov	r1, r9
 800864c:	f7f7 fd84 	bl	8000158 <__aeabi_dsub>
 8008650:	4632      	mov	r2, r6
 8008652:	463b      	mov	r3, r7
 8008654:	f7f7 fd80 	bl	8000158 <__aeabi_dsub>
 8008658:	460b      	mov	r3, r1
 800865a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800865e:	9904      	ldr	r1, [sp, #16]
 8008660:	4602      	mov	r2, r0
 8008662:	2900      	cmp	r1, #0
 8008664:	f6bf af47 	bge.w	80084f6 <__ieee754_rem_pio2+0x6e>
 8008668:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800866c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008674:	60e3      	str	r3, [r4, #12]
 8008676:	426d      	negs	r5, r5
 8008678:	e73d      	b.n	80084f6 <__ieee754_rem_pio2+0x6e>
 800867a:	a33f      	add	r3, pc, #252	; (adr r3, 8008778 <__ieee754_rem_pio2+0x2f0>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008684:	f7f7 ff20 	bl	80004c8 <__aeabi_dmul>
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f7 fd60 	bl	8000158 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4682      	mov	sl, r0
 800869e:	468b      	mov	fp, r1
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f7 fd58 	bl	8000158 <__aeabi_dsub>
 80086a8:	4632      	mov	r2, r6
 80086aa:	463b      	mov	r3, r7
 80086ac:	f7f7 fd54 	bl	8000158 <__aeabi_dsub>
 80086b0:	a333      	add	r3, pc, #204	; (adr r3, 8008780 <__ieee754_rem_pio2+0x2f8>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086be:	f7f7 ff03 	bl	80004c8 <__aeabi_dmul>
 80086c2:	4632      	mov	r2, r6
 80086c4:	463b      	mov	r3, r7
 80086c6:	f7f7 fd47 	bl	8000158 <__aeabi_dsub>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	f7f7 fd3f 	bl	8000158 <__aeabi_dsub>
 80086da:	9a05      	ldr	r2, [sp, #20]
 80086dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b31      	cmp	r3, #49	; 0x31
 80086e4:	dc06      	bgt.n	80086f4 <__ieee754_rem_pio2+0x26c>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	46d0      	mov	r8, sl
 80086ec:	46d9      	mov	r9, fp
 80086ee:	e9c4 2300 	strd	r2, r3, [r4]
 80086f2:	e7a6      	b.n	8008642 <__ieee754_rem_pio2+0x1ba>
 80086f4:	a326      	add	r3, pc, #152	; (adr r3, 8008790 <__ieee754_rem_pio2+0x308>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086fe:	f7f7 fee3 	bl	80004c8 <__aeabi_dmul>
 8008702:	4606      	mov	r6, r0
 8008704:	460f      	mov	r7, r1
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4650      	mov	r0, sl
 800870c:	4659      	mov	r1, fp
 800870e:	f7f7 fd23 	bl	8000158 <__aeabi_dsub>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4680      	mov	r8, r0
 8008718:	4689      	mov	r9, r1
 800871a:	4650      	mov	r0, sl
 800871c:	4659      	mov	r1, fp
 800871e:	f7f7 fd1b 	bl	8000158 <__aeabi_dsub>
 8008722:	4632      	mov	r2, r6
 8008724:	463b      	mov	r3, r7
 8008726:	f7f7 fd17 	bl	8000158 <__aeabi_dsub>
 800872a:	a31b      	add	r3, pc, #108	; (adr r3, 8008798 <__ieee754_rem_pio2+0x310>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	4606      	mov	r6, r0
 8008732:	460f      	mov	r7, r1
 8008734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008738:	f7f7 fec6 	bl	80004c8 <__aeabi_dmul>
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	f7f7 fd0a 	bl	8000158 <__aeabi_dsub>
 8008744:	4606      	mov	r6, r0
 8008746:	460f      	mov	r7, r1
 8008748:	e75e      	b.n	8008608 <__ieee754_rem_pio2+0x180>
 800874a:	4a1b      	ldr	r2, [pc, #108]	; (80087b8 <__ieee754_rem_pio2+0x330>)
 800874c:	4592      	cmp	sl, r2
 800874e:	dd35      	ble.n	80087bc <__ieee754_rem_pio2+0x334>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	f7f7 fd00 	bl	8000158 <__aeabi_dsub>
 8008758:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800875c:	e9c4 0100 	strd	r0, r1, [r4]
 8008760:	e6a2      	b.n	80084a8 <__ieee754_rem_pio2+0x20>
 8008762:	bf00      	nop
 8008764:	f3af 8000 	nop.w
 8008768:	54400000 	.word	0x54400000
 800876c:	3ff921fb 	.word	0x3ff921fb
 8008770:	1a626331 	.word	0x1a626331
 8008774:	3dd0b461 	.word	0x3dd0b461
 8008778:	1a600000 	.word	0x1a600000
 800877c:	3dd0b461 	.word	0x3dd0b461
 8008780:	2e037073 	.word	0x2e037073
 8008784:	3ba3198a 	.word	0x3ba3198a
 8008788:	6dc9c883 	.word	0x6dc9c883
 800878c:	3fe45f30 	.word	0x3fe45f30
 8008790:	2e000000 	.word	0x2e000000
 8008794:	3ba3198a 	.word	0x3ba3198a
 8008798:	252049c1 	.word	0x252049c1
 800879c:	397b839a 	.word	0x397b839a
 80087a0:	3fe921fb 	.word	0x3fe921fb
 80087a4:	4002d97b 	.word	0x4002d97b
 80087a8:	3ff921fb 	.word	0x3ff921fb
 80087ac:	413921fb 	.word	0x413921fb
 80087b0:	3fe00000 	.word	0x3fe00000
 80087b4:	0800b0a0 	.word	0x0800b0a0
 80087b8:	7fefffff 	.word	0x7fefffff
 80087bc:	ea4f 552a 	mov.w	r5, sl, asr #20
 80087c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80087c4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80087c8:	460f      	mov	r7, r1
 80087ca:	4606      	mov	r6, r0
 80087cc:	f7f8 f92c 	bl	8000a28 <__aeabi_d2iz>
 80087d0:	f7f7 fe10 	bl	80003f4 <__aeabi_i2d>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4630      	mov	r0, r6
 80087da:	4639      	mov	r1, r7
 80087dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087e0:	f7f7 fcba 	bl	8000158 <__aeabi_dsub>
 80087e4:	2200      	movs	r2, #0
 80087e6:	4b22      	ldr	r3, [pc, #136]	; (8008870 <__ieee754_rem_pio2+0x3e8>)
 80087e8:	f7f7 fe6e 	bl	80004c8 <__aeabi_dmul>
 80087ec:	460f      	mov	r7, r1
 80087ee:	4606      	mov	r6, r0
 80087f0:	f7f8 f91a 	bl	8000a28 <__aeabi_d2iz>
 80087f4:	f7f7 fdfe 	bl	80003f4 <__aeabi_i2d>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4630      	mov	r0, r6
 80087fe:	4639      	mov	r1, r7
 8008800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008804:	f7f7 fca8 	bl	8000158 <__aeabi_dsub>
 8008808:	2200      	movs	r2, #0
 800880a:	4b19      	ldr	r3, [pc, #100]	; (8008870 <__ieee754_rem_pio2+0x3e8>)
 800880c:	f7f7 fe5c 	bl	80004c8 <__aeabi_dmul>
 8008810:	f04f 0803 	mov.w	r8, #3
 8008814:	2600      	movs	r6, #0
 8008816:	2700      	movs	r7, #0
 8008818:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800881c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008820:	4632      	mov	r2, r6
 8008822:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008826:	463b      	mov	r3, r7
 8008828:	46c2      	mov	sl, r8
 800882a:	f108 38ff 	add.w	r8, r8, #4294967295
 800882e:	f7f8 f8b3 	bl	8000998 <__aeabi_dcmpeq>
 8008832:	2800      	cmp	r0, #0
 8008834:	d1f4      	bne.n	8008820 <__ieee754_rem_pio2+0x398>
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <__ieee754_rem_pio2+0x3ec>)
 8008838:	462a      	mov	r2, r5
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	2302      	movs	r3, #2
 800883e:	4621      	mov	r1, r4
 8008840:	9300      	str	r3, [sp, #0]
 8008842:	a806      	add	r0, sp, #24
 8008844:	4653      	mov	r3, sl
 8008846:	f000 f985 	bl	8008b54 <__kernel_rem_pio2>
 800884a:	9b04      	ldr	r3, [sp, #16]
 800884c:	4605      	mov	r5, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	f6bf ae51 	bge.w	80084f6 <__ieee754_rem_pio2+0x6e>
 8008854:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008858:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800885c:	e9c4 2300 	strd	r2, r3, [r4]
 8008860:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008868:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800886c:	e703      	b.n	8008676 <__ieee754_rem_pio2+0x1ee>
 800886e:	bf00      	nop
 8008870:	41700000 	.word	0x41700000
 8008874:	0800b120 	.word	0x0800b120

08008878 <__ieee754_sqrt>:
 8008878:	f8df c158 	ldr.w	ip, [pc, #344]	; 80089d4 <__ieee754_sqrt+0x15c>
 800887c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008880:	ea3c 0c01 	bics.w	ip, ip, r1
 8008884:	4606      	mov	r6, r0
 8008886:	460d      	mov	r5, r1
 8008888:	460c      	mov	r4, r1
 800888a:	460a      	mov	r2, r1
 800888c:	4607      	mov	r7, r0
 800888e:	4603      	mov	r3, r0
 8008890:	d10f      	bne.n	80088b2 <__ieee754_sqrt+0x3a>
 8008892:	4602      	mov	r2, r0
 8008894:	460b      	mov	r3, r1
 8008896:	f7f7 fe17 	bl	80004c8 <__aeabi_dmul>
 800889a:	4602      	mov	r2, r0
 800889c:	460b      	mov	r3, r1
 800889e:	4630      	mov	r0, r6
 80088a0:	4629      	mov	r1, r5
 80088a2:	f7f7 fc5b 	bl	800015c <__adddf3>
 80088a6:	4606      	mov	r6, r0
 80088a8:	460d      	mov	r5, r1
 80088aa:	4630      	mov	r0, r6
 80088ac:	4629      	mov	r1, r5
 80088ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b2:	2900      	cmp	r1, #0
 80088b4:	dc0e      	bgt.n	80088d4 <__ieee754_sqrt+0x5c>
 80088b6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80088ba:	ea5c 0707 	orrs.w	r7, ip, r7
 80088be:	d0f4      	beq.n	80088aa <__ieee754_sqrt+0x32>
 80088c0:	b141      	cbz	r1, 80088d4 <__ieee754_sqrt+0x5c>
 80088c2:	4602      	mov	r2, r0
 80088c4:	460b      	mov	r3, r1
 80088c6:	f7f7 fc47 	bl	8000158 <__aeabi_dsub>
 80088ca:	4602      	mov	r2, r0
 80088cc:	460b      	mov	r3, r1
 80088ce:	f7f7 ff25 	bl	800071c <__aeabi_ddiv>
 80088d2:	e7e8      	b.n	80088a6 <__ieee754_sqrt+0x2e>
 80088d4:	1521      	asrs	r1, r4, #20
 80088d6:	d075      	beq.n	80089c4 <__ieee754_sqrt+0x14c>
 80088d8:	07cc      	lsls	r4, r1, #31
 80088da:	f04f 0400 	mov.w	r4, #0
 80088de:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80088e2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80088e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80088ea:	bf5e      	ittt	pl
 80088ec:	0fd9      	lsrpl	r1, r3, #31
 80088ee:	005b      	lslpl	r3, r3, #1
 80088f0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80088f4:	0fd9      	lsrs	r1, r3, #31
 80088f6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80088fa:	2516      	movs	r5, #22
 80088fc:	4620      	mov	r0, r4
 80088fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008902:	107f      	asrs	r7, r7, #1
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	1846      	adds	r6, r0, r1
 8008908:	4296      	cmp	r6, r2
 800890a:	bfde      	ittt	le
 800890c:	1b92      	suble	r2, r2, r6
 800890e:	1870      	addle	r0, r6, r1
 8008910:	1864      	addle	r4, r4, r1
 8008912:	0052      	lsls	r2, r2, #1
 8008914:	3d01      	subs	r5, #1
 8008916:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800891a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800891e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008922:	d1f0      	bne.n	8008906 <__ieee754_sqrt+0x8e>
 8008924:	4629      	mov	r1, r5
 8008926:	f04f 0e20 	mov.w	lr, #32
 800892a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800892e:	4282      	cmp	r2, r0
 8008930:	eb06 0c05 	add.w	ip, r6, r5
 8008934:	dc02      	bgt.n	800893c <__ieee754_sqrt+0xc4>
 8008936:	d113      	bne.n	8008960 <__ieee754_sqrt+0xe8>
 8008938:	459c      	cmp	ip, r3
 800893a:	d811      	bhi.n	8008960 <__ieee754_sqrt+0xe8>
 800893c:	f1bc 0f00 	cmp.w	ip, #0
 8008940:	eb0c 0506 	add.w	r5, ip, r6
 8008944:	da43      	bge.n	80089ce <__ieee754_sqrt+0x156>
 8008946:	2d00      	cmp	r5, #0
 8008948:	db41      	blt.n	80089ce <__ieee754_sqrt+0x156>
 800894a:	f100 0801 	add.w	r8, r0, #1
 800894e:	1a12      	subs	r2, r2, r0
 8008950:	4640      	mov	r0, r8
 8008952:	459c      	cmp	ip, r3
 8008954:	bf88      	it	hi
 8008956:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800895a:	eba3 030c 	sub.w	r3, r3, ip
 800895e:	4431      	add	r1, r6
 8008960:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008964:	f1be 0e01 	subs.w	lr, lr, #1
 8008968:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800896c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008970:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008974:	d1db      	bne.n	800892e <__ieee754_sqrt+0xb6>
 8008976:	4313      	orrs	r3, r2
 8008978:	d006      	beq.n	8008988 <__ieee754_sqrt+0x110>
 800897a:	1c48      	adds	r0, r1, #1
 800897c:	bf0b      	itete	eq
 800897e:	4671      	moveq	r1, lr
 8008980:	3101      	addne	r1, #1
 8008982:	3401      	addeq	r4, #1
 8008984:	f021 0101 	bicne.w	r1, r1, #1
 8008988:	1063      	asrs	r3, r4, #1
 800898a:	0849      	lsrs	r1, r1, #1
 800898c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008990:	07e2      	lsls	r2, r4, #31
 8008992:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008996:	bf48      	it	mi
 8008998:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800899c:	460e      	mov	r6, r1
 800899e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80089a2:	e782      	b.n	80088aa <__ieee754_sqrt+0x32>
 80089a4:	0ada      	lsrs	r2, r3, #11
 80089a6:	3815      	subs	r0, #21
 80089a8:	055b      	lsls	r3, r3, #21
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	d0fa      	beq.n	80089a4 <__ieee754_sqrt+0x12c>
 80089ae:	02d5      	lsls	r5, r2, #11
 80089b0:	d50a      	bpl.n	80089c8 <__ieee754_sqrt+0x150>
 80089b2:	f1c1 0420 	rsb	r4, r1, #32
 80089b6:	fa23 f404 	lsr.w	r4, r3, r4
 80089ba:	1e4d      	subs	r5, r1, #1
 80089bc:	408b      	lsls	r3, r1
 80089be:	4322      	orrs	r2, r4
 80089c0:	1b41      	subs	r1, r0, r5
 80089c2:	e789      	b.n	80088d8 <__ieee754_sqrt+0x60>
 80089c4:	4608      	mov	r0, r1
 80089c6:	e7f0      	b.n	80089aa <__ieee754_sqrt+0x132>
 80089c8:	0052      	lsls	r2, r2, #1
 80089ca:	3101      	adds	r1, #1
 80089cc:	e7ef      	b.n	80089ae <__ieee754_sqrt+0x136>
 80089ce:	4680      	mov	r8, r0
 80089d0:	e7bd      	b.n	800894e <__ieee754_sqrt+0xd6>
 80089d2:	bf00      	nop
 80089d4:	7ff00000 	.word	0x7ff00000

080089d8 <__kernel_cos>:
 80089d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089e0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80089e4:	4680      	mov	r8, r0
 80089e6:	460f      	mov	r7, r1
 80089e8:	e9cd 2300 	strd	r2, r3, [sp]
 80089ec:	da04      	bge.n	80089f8 <__kernel_cos+0x20>
 80089ee:	f7f8 f81b 	bl	8000a28 <__aeabi_d2iz>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	f000 8086 	beq.w	8008b04 <__kernel_cos+0x12c>
 80089f8:	4642      	mov	r2, r8
 80089fa:	463b      	mov	r3, r7
 80089fc:	4640      	mov	r0, r8
 80089fe:	4639      	mov	r1, r7
 8008a00:	f7f7 fd62 	bl	80004c8 <__aeabi_dmul>
 8008a04:	2200      	movs	r2, #0
 8008a06:	4b4e      	ldr	r3, [pc, #312]	; (8008b40 <__kernel_cos+0x168>)
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	f7f7 fd5c 	bl	80004c8 <__aeabi_dmul>
 8008a10:	a33f      	add	r3, pc, #252	; (adr r3, 8008b10 <__kernel_cos+0x138>)
 8008a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a16:	4682      	mov	sl, r0
 8008a18:	468b      	mov	fp, r1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f7f7 fd53 	bl	80004c8 <__aeabi_dmul>
 8008a22:	a33d      	add	r3, pc, #244	; (adr r3, 8008b18 <__kernel_cos+0x140>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fb98 	bl	800015c <__adddf3>
 8008a2c:	4622      	mov	r2, r4
 8008a2e:	462b      	mov	r3, r5
 8008a30:	f7f7 fd4a 	bl	80004c8 <__aeabi_dmul>
 8008a34:	a33a      	add	r3, pc, #232	; (adr r3, 8008b20 <__kernel_cos+0x148>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fb8d 	bl	8000158 <__aeabi_dsub>
 8008a3e:	4622      	mov	r2, r4
 8008a40:	462b      	mov	r3, r5
 8008a42:	f7f7 fd41 	bl	80004c8 <__aeabi_dmul>
 8008a46:	a338      	add	r3, pc, #224	; (adr r3, 8008b28 <__kernel_cos+0x150>)
 8008a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4c:	f7f7 fb86 	bl	800015c <__adddf3>
 8008a50:	4622      	mov	r2, r4
 8008a52:	462b      	mov	r3, r5
 8008a54:	f7f7 fd38 	bl	80004c8 <__aeabi_dmul>
 8008a58:	a335      	add	r3, pc, #212	; (adr r3, 8008b30 <__kernel_cos+0x158>)
 8008a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a5e:	f7f7 fb7b 	bl	8000158 <__aeabi_dsub>
 8008a62:	4622      	mov	r2, r4
 8008a64:	462b      	mov	r3, r5
 8008a66:	f7f7 fd2f 	bl	80004c8 <__aeabi_dmul>
 8008a6a:	a333      	add	r3, pc, #204	; (adr r3, 8008b38 <__kernel_cos+0x160>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fb74 	bl	800015c <__adddf3>
 8008a74:	4622      	mov	r2, r4
 8008a76:	462b      	mov	r3, r5
 8008a78:	f7f7 fd26 	bl	80004c8 <__aeabi_dmul>
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	462b      	mov	r3, r5
 8008a80:	f7f7 fd22 	bl	80004c8 <__aeabi_dmul>
 8008a84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4639      	mov	r1, r7
 8008a90:	f7f7 fd1a 	bl	80004c8 <__aeabi_dmul>
 8008a94:	460b      	mov	r3, r1
 8008a96:	4602      	mov	r2, r0
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f7f7 fb5c 	bl	8000158 <__aeabi_dsub>
 8008aa0:	4b28      	ldr	r3, [pc, #160]	; (8008b44 <__kernel_cos+0x16c>)
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	429e      	cmp	r6, r3
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	dc0e      	bgt.n	8008ac8 <__kernel_cos+0xf0>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	4650      	mov	r0, sl
 8008ab0:	4659      	mov	r1, fp
 8008ab2:	f7f7 fb51 	bl	8000158 <__aeabi_dsub>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	2000      	movs	r0, #0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4922      	ldr	r1, [pc, #136]	; (8008b48 <__kernel_cos+0x170>)
 8008abe:	f7f7 fb4b 	bl	8000158 <__aeabi_dsub>
 8008ac2:	b003      	add	sp, #12
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	2400      	movs	r4, #0
 8008aca:	4b20      	ldr	r3, [pc, #128]	; (8008b4c <__kernel_cos+0x174>)
 8008acc:	4622      	mov	r2, r4
 8008ace:	429e      	cmp	r6, r3
 8008ad0:	bfcc      	ite	gt
 8008ad2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008b50 <__kernel_cos+0x178>)
 8008ad4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008ad8:	462b      	mov	r3, r5
 8008ada:	2000      	movs	r0, #0
 8008adc:	491a      	ldr	r1, [pc, #104]	; (8008b48 <__kernel_cos+0x170>)
 8008ade:	f7f7 fb3b 	bl	8000158 <__aeabi_dsub>
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	462b      	mov	r3, r5
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	f7f7 fb33 	bl	8000158 <__aeabi_dsub>
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	f7f7 fb2f 	bl	8000158 <__aeabi_dsub>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4630      	mov	r0, r6
 8008b00:	4639      	mov	r1, r7
 8008b02:	e7dc      	b.n	8008abe <__kernel_cos+0xe6>
 8008b04:	2000      	movs	r0, #0
 8008b06:	4910      	ldr	r1, [pc, #64]	; (8008b48 <__kernel_cos+0x170>)
 8008b08:	e7db      	b.n	8008ac2 <__kernel_cos+0xea>
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w
 8008b10:	be8838d4 	.word	0xbe8838d4
 8008b14:	bda8fae9 	.word	0xbda8fae9
 8008b18:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b1c:	3e21ee9e 	.word	0x3e21ee9e
 8008b20:	809c52ad 	.word	0x809c52ad
 8008b24:	3e927e4f 	.word	0x3e927e4f
 8008b28:	19cb1590 	.word	0x19cb1590
 8008b2c:	3efa01a0 	.word	0x3efa01a0
 8008b30:	16c15177 	.word	0x16c15177
 8008b34:	3f56c16c 	.word	0x3f56c16c
 8008b38:	5555554c 	.word	0x5555554c
 8008b3c:	3fa55555 	.word	0x3fa55555
 8008b40:	3fe00000 	.word	0x3fe00000
 8008b44:	3fd33332 	.word	0x3fd33332
 8008b48:	3ff00000 	.word	0x3ff00000
 8008b4c:	3fe90000 	.word	0x3fe90000
 8008b50:	3fd20000 	.word	0x3fd20000

08008b54 <__kernel_rem_pio2>:
 8008b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008b5c:	9308      	str	r3, [sp, #32]
 8008b5e:	9106      	str	r1, [sp, #24]
 8008b60:	4bb6      	ldr	r3, [pc, #728]	; (8008e3c <__kernel_rem_pio2+0x2e8>)
 8008b62:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008b64:	f112 0f14 	cmn.w	r2, #20
 8008b68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b6c:	bfa8      	it	ge
 8008b6e:	1ed4      	subge	r4, r2, #3
 8008b70:	9302      	str	r3, [sp, #8]
 8008b72:	9b08      	ldr	r3, [sp, #32]
 8008b74:	bfb8      	it	lt
 8008b76:	2400      	movlt	r4, #0
 8008b78:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b7c:	9307      	str	r3, [sp, #28]
 8008b7e:	bfa4      	itt	ge
 8008b80:	2318      	movge	r3, #24
 8008b82:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b86:	f06f 0317 	mvn.w	r3, #23
 8008b8a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b8e:	eb03 0b02 	add.w	fp, r3, r2
 8008b92:	9a07      	ldr	r2, [sp, #28]
 8008b94:	9b02      	ldr	r3, [sp, #8]
 8008b96:	1aa7      	subs	r7, r4, r2
 8008b98:	eb03 0802 	add.w	r8, r3, r2
 8008b9c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008b9e:	2500      	movs	r5, #0
 8008ba0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	9009      	str	r0, [sp, #36]	; 0x24
 8008baa:	ae20      	add	r6, sp, #128	; 0x80
 8008bac:	4545      	cmp	r5, r8
 8008bae:	dd14      	ble.n	8008bda <__kernel_rem_pio2+0x86>
 8008bb0:	f04f 0800 	mov.w	r8, #0
 8008bb4:	9a08      	ldr	r2, [sp, #32]
 8008bb6:	ab20      	add	r3, sp, #128	; 0x80
 8008bb8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008bbc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008bc0:	9b02      	ldr	r3, [sp, #8]
 8008bc2:	4598      	cmp	r8, r3
 8008bc4:	dc35      	bgt.n	8008c32 <__kernel_rem_pio2+0xde>
 8008bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f1a3 0908 	sub.w	r9, r3, #8
 8008bce:	2300      	movs	r3, #0
 8008bd0:	462f      	mov	r7, r5
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	e9cd 2300 	strd	r2, r3, [sp]
 8008bd8:	e01f      	b.n	8008c1a <__kernel_rem_pio2+0xc6>
 8008bda:	42ef      	cmn	r7, r5
 8008bdc:	d40b      	bmi.n	8008bf6 <__kernel_rem_pio2+0xa2>
 8008bde:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008be2:	e9cd 2300 	strd	r2, r3, [sp]
 8008be6:	f7f7 fc05 	bl	80003f4 <__aeabi_i2d>
 8008bea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bee:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008bf2:	3501      	adds	r5, #1
 8008bf4:	e7da      	b.n	8008bac <__kernel_rem_pio2+0x58>
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	e7f8      	b.n	8008bee <__kernel_rem_pio2+0x9a>
 8008bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c00:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008c04:	f7f7 fc60 	bl	80004c8 <__aeabi_dmul>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c10:	f7f7 faa4 	bl	800015c <__adddf3>
 8008c14:	e9cd 0100 	strd	r0, r1, [sp]
 8008c18:	3601      	adds	r6, #1
 8008c1a:	9b07      	ldr	r3, [sp, #28]
 8008c1c:	3f08      	subs	r7, #8
 8008c1e:	429e      	cmp	r6, r3
 8008c20:	ddec      	ble.n	8008bfc <__kernel_rem_pio2+0xa8>
 8008c22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c26:	f108 0801 	add.w	r8, r8, #1
 8008c2a:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008c2e:	3508      	adds	r5, #8
 8008c30:	e7c6      	b.n	8008bc0 <__kernel_rem_pio2+0x6c>
 8008c32:	9b02      	ldr	r3, [sp, #8]
 8008c34:	aa0c      	add	r2, sp, #48	; 0x30
 8008c36:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c3c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008c3e:	9e02      	ldr	r6, [sp, #8]
 8008c40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c44:	930a      	str	r3, [sp, #40]	; 0x28
 8008c46:	ab98      	add	r3, sp, #608	; 0x260
 8008c48:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c4c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008c50:	ab70      	add	r3, sp, #448	; 0x1c0
 8008c52:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008c56:	46d0      	mov	r8, sl
 8008c58:	46b1      	mov	r9, r6
 8008c5a:	af0c      	add	r7, sp, #48	; 0x30
 8008c5c:	9700      	str	r7, [sp, #0]
 8008c5e:	f1b9 0f00 	cmp.w	r9, #0
 8008c62:	f1a8 0808 	sub.w	r8, r8, #8
 8008c66:	dc71      	bgt.n	8008d4c <__kernel_rem_pio2+0x1f8>
 8008c68:	465a      	mov	r2, fp
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	f000 fbf7 	bl	8009460 <scalbn>
 8008c72:	2200      	movs	r2, #0
 8008c74:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	f7f7 fc24 	bl	80004c8 <__aeabi_dmul>
 8008c80:	f000 fb66 	bl	8009350 <floor>
 8008c84:	2200      	movs	r2, #0
 8008c86:	4b6e      	ldr	r3, [pc, #440]	; (8008e40 <__kernel_rem_pio2+0x2ec>)
 8008c88:	f7f7 fc1e 	bl	80004c8 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fa60 	bl	8000158 <__aeabi_dsub>
 8008c98:	460d      	mov	r5, r1
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	f7f7 fec4 	bl	8000a28 <__aeabi_d2iz>
 8008ca0:	9004      	str	r0, [sp, #16]
 8008ca2:	f7f7 fba7 	bl	80003f4 <__aeabi_i2d>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4620      	mov	r0, r4
 8008cac:	4629      	mov	r1, r5
 8008cae:	f7f7 fa53 	bl	8000158 <__aeabi_dsub>
 8008cb2:	f1bb 0f00 	cmp.w	fp, #0
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	4689      	mov	r9, r1
 8008cba:	dd70      	ble.n	8008d9e <__kernel_rem_pio2+0x24a>
 8008cbc:	1e72      	subs	r2, r6, #1
 8008cbe:	ab0c      	add	r3, sp, #48	; 0x30
 8008cc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cc4:	9c04      	ldr	r4, [sp, #16]
 8008cc6:	f1cb 0118 	rsb	r1, fp, #24
 8008cca:	fa40 f301 	asr.w	r3, r0, r1
 8008cce:	441c      	add	r4, r3
 8008cd0:	408b      	lsls	r3, r1
 8008cd2:	1ac0      	subs	r0, r0, r3
 8008cd4:	ab0c      	add	r3, sp, #48	; 0x30
 8008cd6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008cda:	f1cb 0317 	rsb	r3, fp, #23
 8008cde:	9404      	str	r4, [sp, #16]
 8008ce0:	fa40 f303 	asr.w	r3, r0, r3
 8008ce4:	9300      	str	r3, [sp, #0]
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	dd66      	ble.n	8008dba <__kernel_rem_pio2+0x266>
 8008cec:	2200      	movs	r2, #0
 8008cee:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008cf2:	4614      	mov	r4, r2
 8008cf4:	9b04      	ldr	r3, [sp, #16]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	4296      	cmp	r6, r2
 8008cfc:	f300 80ac 	bgt.w	8008e58 <__kernel_rem_pio2+0x304>
 8008d00:	f1bb 0f00 	cmp.w	fp, #0
 8008d04:	dd07      	ble.n	8008d16 <__kernel_rem_pio2+0x1c2>
 8008d06:	f1bb 0f01 	cmp.w	fp, #1
 8008d0a:	f000 80b4 	beq.w	8008e76 <__kernel_rem_pio2+0x322>
 8008d0e:	f1bb 0f02 	cmp.w	fp, #2
 8008d12:	f000 80ba 	beq.w	8008e8a <__kernel_rem_pio2+0x336>
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d14e      	bne.n	8008dba <__kernel_rem_pio2+0x266>
 8008d1c:	4642      	mov	r2, r8
 8008d1e:	464b      	mov	r3, r9
 8008d20:	2000      	movs	r0, #0
 8008d22:	4948      	ldr	r1, [pc, #288]	; (8008e44 <__kernel_rem_pio2+0x2f0>)
 8008d24:	f7f7 fa18 	bl	8000158 <__aeabi_dsub>
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	2c00      	cmp	r4, #0
 8008d2e:	d044      	beq.n	8008dba <__kernel_rem_pio2+0x266>
 8008d30:	465a      	mov	r2, fp
 8008d32:	2000      	movs	r0, #0
 8008d34:	4943      	ldr	r1, [pc, #268]	; (8008e44 <__kernel_rem_pio2+0x2f0>)
 8008d36:	f000 fb93 	bl	8009460 <scalbn>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 fa09 	bl	8000158 <__aeabi_dsub>
 8008d46:	4680      	mov	r8, r0
 8008d48:	4689      	mov	r9, r1
 8008d4a:	e036      	b.n	8008dba <__kernel_rem_pio2+0x266>
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	4b3e      	ldr	r3, [pc, #248]	; (8008e48 <__kernel_rem_pio2+0x2f4>)
 8008d50:	4620      	mov	r0, r4
 8008d52:	4629      	mov	r1, r5
 8008d54:	f7f7 fbb8 	bl	80004c8 <__aeabi_dmul>
 8008d58:	f7f7 fe66 	bl	8000a28 <__aeabi_d2iz>
 8008d5c:	f7f7 fb4a 	bl	80003f4 <__aeabi_i2d>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	4b38      	ldr	r3, [pc, #224]	; (8008e4c <__kernel_rem_pio2+0x2f8>)
 8008d6c:	f7f7 fbac 	bl	80004c8 <__aeabi_dmul>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 f9ee 	bl	8000158 <__aeabi_dsub>
 8008d7c:	f7f7 fe54 	bl	8000a28 <__aeabi_d2iz>
 8008d80:	9b00      	ldr	r3, [sp, #0]
 8008d82:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d86:	f843 0b04 	str.w	r0, [r3], #4
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d90:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d94:	f7f7 f9e2 	bl	800015c <__adddf3>
 8008d98:	4604      	mov	r4, r0
 8008d9a:	460d      	mov	r5, r1
 8008d9c:	e75f      	b.n	8008c5e <__kernel_rem_pio2+0x10a>
 8008d9e:	d105      	bne.n	8008dac <__kernel_rem_pio2+0x258>
 8008da0:	1e73      	subs	r3, r6, #1
 8008da2:	aa0c      	add	r2, sp, #48	; 0x30
 8008da4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008da8:	15c3      	asrs	r3, r0, #23
 8008daa:	e79b      	b.n	8008ce4 <__kernel_rem_pio2+0x190>
 8008dac:	2200      	movs	r2, #0
 8008dae:	4b28      	ldr	r3, [pc, #160]	; (8008e50 <__kernel_rem_pio2+0x2fc>)
 8008db0:	f7f7 fe10 	bl	80009d4 <__aeabi_dcmpge>
 8008db4:	2800      	cmp	r0, #0
 8008db6:	d13e      	bne.n	8008e36 <__kernel_rem_pio2+0x2e2>
 8008db8:	9000      	str	r0, [sp, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	f7f7 fde9 	bl	8000998 <__aeabi_dcmpeq>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f000 80b1 	beq.w	8008f2e <__kernel_rem_pio2+0x3da>
 8008dcc:	1e74      	subs	r4, r6, #1
 8008dce:	4623      	mov	r3, r4
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	9902      	ldr	r1, [sp, #8]
 8008dd4:	428b      	cmp	r3, r1
 8008dd6:	da5f      	bge.n	8008e98 <__kernel_rem_pio2+0x344>
 8008dd8:	2a00      	cmp	r2, #0
 8008dda:	d074      	beq.n	8008ec6 <__kernel_rem_pio2+0x372>
 8008ddc:	ab0c      	add	r3, sp, #48	; 0x30
 8008dde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008de2:	f1ab 0b18 	sub.w	fp, fp, #24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 809f 	beq.w	8008f2a <__kernel_rem_pio2+0x3d6>
 8008dec:	465a      	mov	r2, fp
 8008dee:	2000      	movs	r0, #0
 8008df0:	4914      	ldr	r1, [pc, #80]	; (8008e44 <__kernel_rem_pio2+0x2f0>)
 8008df2:	f000 fb35 	bl	8009460 <scalbn>
 8008df6:	46a2      	mov	sl, r4
 8008df8:	4606      	mov	r6, r0
 8008dfa:	460f      	mov	r7, r1
 8008dfc:	f04f 0800 	mov.w	r8, #0
 8008e00:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e02:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008e48 <__kernel_rem_pio2+0x2f4>
 8008e06:	00e5      	lsls	r5, r4, #3
 8008e08:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008e0c:	f1ba 0f00 	cmp.w	sl, #0
 8008e10:	f280 80c3 	bge.w	8008f9a <__kernel_rem_pio2+0x446>
 8008e14:	4626      	mov	r6, r4
 8008e16:	2e00      	cmp	r6, #0
 8008e18:	f2c0 80f5 	blt.w	8009006 <__kernel_rem_pio2+0x4b2>
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	; (8008e54 <__kernel_rem_pio2+0x300>)
 8008e1e:	f04f 0a00 	mov.w	sl, #0
 8008e22:	9307      	str	r3, [sp, #28]
 8008e24:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e26:	f04f 0b00 	mov.w	fp, #0
 8008e2a:	f04f 0800 	mov.w	r8, #0
 8008e2e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e32:	1ba7      	subs	r7, r4, r6
 8008e34:	e0db      	b.n	8008fee <__kernel_rem_pio2+0x49a>
 8008e36:	2302      	movs	r3, #2
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	e757      	b.n	8008cec <__kernel_rem_pio2+0x198>
 8008e3c:	0800b268 	.word	0x0800b268
 8008e40:	40200000 	.word	0x40200000
 8008e44:	3ff00000 	.word	0x3ff00000
 8008e48:	3e700000 	.word	0x3e700000
 8008e4c:	41700000 	.word	0x41700000
 8008e50:	3fe00000 	.word	0x3fe00000
 8008e54:	0800b228 	.word	0x0800b228
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	b944      	cbnz	r4, 8008e6e <__kernel_rem_pio2+0x31a>
 8008e5c:	b11b      	cbz	r3, 8008e66 <__kernel_rem_pio2+0x312>
 8008e5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e62:	603b      	str	r3, [r7, #0]
 8008e64:	2301      	movs	r3, #1
 8008e66:	461c      	mov	r4, r3
 8008e68:	3201      	adds	r2, #1
 8008e6a:	3704      	adds	r7, #4
 8008e6c:	e745      	b.n	8008cfa <__kernel_rem_pio2+0x1a6>
 8008e6e:	1acb      	subs	r3, r1, r3
 8008e70:	603b      	str	r3, [r7, #0]
 8008e72:	4623      	mov	r3, r4
 8008e74:	e7f7      	b.n	8008e66 <__kernel_rem_pio2+0x312>
 8008e76:	1e72      	subs	r2, r6, #1
 8008e78:	ab0c      	add	r3, sp, #48	; 0x30
 8008e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e82:	a90c      	add	r1, sp, #48	; 0x30
 8008e84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e88:	e745      	b.n	8008d16 <__kernel_rem_pio2+0x1c2>
 8008e8a:	1e72      	subs	r2, r6, #1
 8008e8c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e92:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e96:	e7f4      	b.n	8008e82 <__kernel_rem_pio2+0x32e>
 8008e98:	a90c      	add	r1, sp, #48	; 0x30
 8008e9a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	e796      	b.n	8008dd2 <__kernel_rem_pio2+0x27e>
 8008ea4:	3401      	adds	r4, #1
 8008ea6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008eaa:	2a00      	cmp	r2, #0
 8008eac:	d0fa      	beq.n	8008ea4 <__kernel_rem_pio2+0x350>
 8008eae:	9b08      	ldr	r3, [sp, #32]
 8008eb0:	f106 0801 	add.w	r8, r6, #1
 8008eb4:	18f5      	adds	r5, r6, r3
 8008eb6:	ab20      	add	r3, sp, #128	; 0x80
 8008eb8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008ebc:	4434      	add	r4, r6
 8008ebe:	4544      	cmp	r4, r8
 8008ec0:	da04      	bge.n	8008ecc <__kernel_rem_pio2+0x378>
 8008ec2:	4626      	mov	r6, r4
 8008ec4:	e6bf      	b.n	8008c46 <__kernel_rem_pio2+0xf2>
 8008ec6:	2401      	movs	r4, #1
 8008ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eca:	e7ec      	b.n	8008ea6 <__kernel_rem_pio2+0x352>
 8008ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ece:	f04f 0900 	mov.w	r9, #0
 8008ed2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ed6:	f7f7 fa8d 	bl	80003f4 <__aeabi_i2d>
 8008eda:	2600      	movs	r6, #0
 8008edc:	2700      	movs	r7, #0
 8008ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ee0:	e9c5 0100 	strd	r0, r1, [r5]
 8008ee4:	3b08      	subs	r3, #8
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	9504      	str	r5, [sp, #16]
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	4599      	cmp	r9, r3
 8008eee:	dd05      	ble.n	8008efc <__kernel_rem_pio2+0x3a8>
 8008ef0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008ef4:	f108 0801 	add.w	r8, r8, #1
 8008ef8:	3508      	adds	r5, #8
 8008efa:	e7e0      	b.n	8008ebe <__kernel_rem_pio2+0x36a>
 8008efc:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008f00:	9900      	ldr	r1, [sp, #0]
 8008f02:	f109 0901 	add.w	r9, r9, #1
 8008f06:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008f0a:	9100      	str	r1, [sp, #0]
 8008f0c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008f10:	f8cd c010 	str.w	ip, [sp, #16]
 8008f14:	f7f7 fad8 	bl	80004c8 <__aeabi_dmul>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 f91c 	bl	800015c <__adddf3>
 8008f24:	4606      	mov	r6, r0
 8008f26:	460f      	mov	r7, r1
 8008f28:	e7df      	b.n	8008eea <__kernel_rem_pio2+0x396>
 8008f2a:	3c01      	subs	r4, #1
 8008f2c:	e756      	b.n	8008ddc <__kernel_rem_pio2+0x288>
 8008f2e:	f1cb 0200 	rsb	r2, fp, #0
 8008f32:	4640      	mov	r0, r8
 8008f34:	4649      	mov	r1, r9
 8008f36:	f000 fa93 	bl	8009460 <scalbn>
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	4ba4      	ldr	r3, [pc, #656]	; (80091d0 <__kernel_rem_pio2+0x67c>)
 8008f3e:	4604      	mov	r4, r0
 8008f40:	460d      	mov	r5, r1
 8008f42:	f7f7 fd47 	bl	80009d4 <__aeabi_dcmpge>
 8008f46:	b1f8      	cbz	r0, 8008f88 <__kernel_rem_pio2+0x434>
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4ba2      	ldr	r3, [pc, #648]	; (80091d4 <__kernel_rem_pio2+0x680>)
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	4629      	mov	r1, r5
 8008f50:	f7f7 faba 	bl	80004c8 <__aeabi_dmul>
 8008f54:	f7f7 fd68 	bl	8000a28 <__aeabi_d2iz>
 8008f58:	4607      	mov	r7, r0
 8008f5a:	f7f7 fa4b 	bl	80003f4 <__aeabi_i2d>
 8008f5e:	2200      	movs	r2, #0
 8008f60:	4b9b      	ldr	r3, [pc, #620]	; (80091d0 <__kernel_rem_pio2+0x67c>)
 8008f62:	f7f7 fab1 	bl	80004c8 <__aeabi_dmul>
 8008f66:	460b      	mov	r3, r1
 8008f68:	4602      	mov	r2, r0
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f7f7 f8f3 	bl	8000158 <__aeabi_dsub>
 8008f72:	f7f7 fd59 	bl	8000a28 <__aeabi_d2iz>
 8008f76:	1c74      	adds	r4, r6, #1
 8008f78:	ab0c      	add	r3, sp, #48	; 0x30
 8008f7a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008f7e:	f10b 0b18 	add.w	fp, fp, #24
 8008f82:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008f86:	e731      	b.n	8008dec <__kernel_rem_pio2+0x298>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	f7f7 fd4c 	bl	8000a28 <__aeabi_d2iz>
 8008f90:	ab0c      	add	r3, sp, #48	; 0x30
 8008f92:	4634      	mov	r4, r6
 8008f94:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008f98:	e728      	b.n	8008dec <__kernel_rem_pio2+0x298>
 8008f9a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f9c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008fa0:	f7f7 fa28 	bl	80003f4 <__aeabi_i2d>
 8008fa4:	4632      	mov	r2, r6
 8008fa6:	463b      	mov	r3, r7
 8008fa8:	f7f7 fa8e 	bl	80004c8 <__aeabi_dmul>
 8008fac:	4642      	mov	r2, r8
 8008fae:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008fb2:	464b      	mov	r3, r9
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	f7f7 fa86 	bl	80004c8 <__aeabi_dmul>
 8008fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	460f      	mov	r7, r1
 8008fc4:	e722      	b.n	8008e0c <__kernel_rem_pio2+0x2b8>
 8008fc6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008fca:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008fce:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008fd2:	f8cd c01c 	str.w	ip, [sp, #28]
 8008fd6:	f7f7 fa77 	bl	80004c8 <__aeabi_dmul>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4650      	mov	r0, sl
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 f8bb 	bl	800015c <__adddf3>
 8008fe6:	4682      	mov	sl, r0
 8008fe8:	468b      	mov	fp, r1
 8008fea:	f108 0801 	add.w	r8, r8, #1
 8008fee:	9b02      	ldr	r3, [sp, #8]
 8008ff0:	4598      	cmp	r8, r3
 8008ff2:	dc01      	bgt.n	8008ff8 <__kernel_rem_pio2+0x4a4>
 8008ff4:	45b8      	cmp	r8, r7
 8008ff6:	dde6      	ble.n	8008fc6 <__kernel_rem_pio2+0x472>
 8008ff8:	ab48      	add	r3, sp, #288	; 0x120
 8008ffa:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008ffe:	e9c7 ab00 	strd	sl, fp, [r7]
 8009002:	3e01      	subs	r6, #1
 8009004:	e707      	b.n	8008e16 <__kernel_rem_pio2+0x2c2>
 8009006:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009008:	2b02      	cmp	r3, #2
 800900a:	dc09      	bgt.n	8009020 <__kernel_rem_pio2+0x4cc>
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc32      	bgt.n	8009076 <__kernel_rem_pio2+0x522>
 8009010:	d05a      	beq.n	80090c8 <__kernel_rem_pio2+0x574>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	f003 0007 	and.w	r0, r3, #7
 8009018:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800901c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009020:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009022:	2b03      	cmp	r3, #3
 8009024:	d1f5      	bne.n	8009012 <__kernel_rem_pio2+0x4be>
 8009026:	ab48      	add	r3, sp, #288	; 0x120
 8009028:	441d      	add	r5, r3
 800902a:	46aa      	mov	sl, r5
 800902c:	46a3      	mov	fp, r4
 800902e:	f1bb 0f00 	cmp.w	fp, #0
 8009032:	dc76      	bgt.n	8009122 <__kernel_rem_pio2+0x5ce>
 8009034:	46aa      	mov	sl, r5
 8009036:	46a3      	mov	fp, r4
 8009038:	f1bb 0f01 	cmp.w	fp, #1
 800903c:	f300 8090 	bgt.w	8009160 <__kernel_rem_pio2+0x60c>
 8009040:	2700      	movs	r7, #0
 8009042:	463e      	mov	r6, r7
 8009044:	2c01      	cmp	r4, #1
 8009046:	f300 80aa 	bgt.w	800919e <__kernel_rem_pio2+0x64a>
 800904a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800904e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009052:	9b00      	ldr	r3, [sp, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	f040 80ac 	bne.w	80091b2 <__kernel_rem_pio2+0x65e>
 800905a:	4603      	mov	r3, r0
 800905c:	462a      	mov	r2, r5
 800905e:	9806      	ldr	r0, [sp, #24]
 8009060:	e9c0 2300 	strd	r2, r3, [r0]
 8009064:	4622      	mov	r2, r4
 8009066:	460b      	mov	r3, r1
 8009068:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800906c:	463a      	mov	r2, r7
 800906e:	4633      	mov	r3, r6
 8009070:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009074:	e7cd      	b.n	8009012 <__kernel_rem_pio2+0x4be>
 8009076:	2000      	movs	r0, #0
 8009078:	46a0      	mov	r8, r4
 800907a:	4601      	mov	r1, r0
 800907c:	ab48      	add	r3, sp, #288	; 0x120
 800907e:	441d      	add	r5, r3
 8009080:	f1b8 0f00 	cmp.w	r8, #0
 8009084:	da3a      	bge.n	80090fc <__kernel_rem_pio2+0x5a8>
 8009086:	9b00      	ldr	r3, [sp, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d03e      	beq.n	800910a <__kernel_rem_pio2+0x5b6>
 800908c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009090:	4602      	mov	r2, r0
 8009092:	462b      	mov	r3, r5
 8009094:	9d06      	ldr	r5, [sp, #24]
 8009096:	2601      	movs	r6, #1
 8009098:	e9c5 2300 	strd	r2, r3, [r5]
 800909c:	460b      	mov	r3, r1
 800909e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80090a2:	f7f7 f859 	bl	8000158 <__aeabi_dsub>
 80090a6:	4684      	mov	ip, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	ad48      	add	r5, sp, #288	; 0x120
 80090ac:	42b4      	cmp	r4, r6
 80090ae:	f105 0508 	add.w	r5, r5, #8
 80090b2:	da2c      	bge.n	800910e <__kernel_rem_pio2+0x5ba>
 80090b4:	9b00      	ldr	r3, [sp, #0]
 80090b6:	b10b      	cbz	r3, 80090bc <__kernel_rem_pio2+0x568>
 80090b8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80090bc:	4662      	mov	r2, ip
 80090be:	463b      	mov	r3, r7
 80090c0:	9906      	ldr	r1, [sp, #24]
 80090c2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80090c6:	e7a4      	b.n	8009012 <__kernel_rem_pio2+0x4be>
 80090c8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80090ca:	ab48      	add	r3, sp, #288	; 0x120
 80090cc:	4637      	mov	r7, r6
 80090ce:	441d      	add	r5, r3
 80090d0:	2c00      	cmp	r4, #0
 80090d2:	da09      	bge.n	80090e8 <__kernel_rem_pio2+0x594>
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	b10b      	cbz	r3, 80090dc <__kernel_rem_pio2+0x588>
 80090d8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80090dc:	4632      	mov	r2, r6
 80090de:	463b      	mov	r3, r7
 80090e0:	9906      	ldr	r1, [sp, #24]
 80090e2:	e9c1 2300 	strd	r2, r3, [r1]
 80090e6:	e794      	b.n	8009012 <__kernel_rem_pio2+0x4be>
 80090e8:	4630      	mov	r0, r6
 80090ea:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80090ee:	4639      	mov	r1, r7
 80090f0:	f7f7 f834 	bl	800015c <__adddf3>
 80090f4:	3c01      	subs	r4, #1
 80090f6:	4606      	mov	r6, r0
 80090f8:	460f      	mov	r7, r1
 80090fa:	e7e9      	b.n	80090d0 <__kernel_rem_pio2+0x57c>
 80090fc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009100:	f7f7 f82c 	bl	800015c <__adddf3>
 8009104:	f108 38ff 	add.w	r8, r8, #4294967295
 8009108:	e7ba      	b.n	8009080 <__kernel_rem_pio2+0x52c>
 800910a:	460d      	mov	r5, r1
 800910c:	e7c0      	b.n	8009090 <__kernel_rem_pio2+0x53c>
 800910e:	4660      	mov	r0, ip
 8009110:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 f821 	bl	800015c <__adddf3>
 800911a:	3601      	adds	r6, #1
 800911c:	4684      	mov	ip, r0
 800911e:	460f      	mov	r7, r1
 8009120:	e7c4      	b.n	80090ac <__kernel_rem_pio2+0x558>
 8009122:	e9da 6700 	ldrd	r6, r7, [sl]
 8009126:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800912a:	4632      	mov	r2, r6
 800912c:	463b      	mov	r3, r7
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 f813 	bl	800015c <__adddf3>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800913e:	4640      	mov	r0, r8
 8009140:	4649      	mov	r1, r9
 8009142:	f7f7 f809 	bl	8000158 <__aeabi_dsub>
 8009146:	4632      	mov	r2, r6
 8009148:	463b      	mov	r3, r7
 800914a:	f7f7 f807 	bl	800015c <__adddf3>
 800914e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009152:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009156:	f10b 3bff 	add.w	fp, fp, #4294967295
 800915a:	e9ca 2300 	strd	r2, r3, [sl]
 800915e:	e766      	b.n	800902e <__kernel_rem_pio2+0x4da>
 8009160:	e9da 8900 	ldrd	r8, r9, [sl]
 8009164:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f6 fff4 	bl	800015c <__adddf3>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800917c:	4630      	mov	r0, r6
 800917e:	4639      	mov	r1, r7
 8009180:	f7f6 ffea 	bl	8000158 <__aeabi_dsub>
 8009184:	4642      	mov	r2, r8
 8009186:	464b      	mov	r3, r9
 8009188:	f7f6 ffe8 	bl	800015c <__adddf3>
 800918c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009190:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009194:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009198:	e9ca 2300 	strd	r2, r3, [sl]
 800919c:	e74c      	b.n	8009038 <__kernel_rem_pio2+0x4e4>
 800919e:	4638      	mov	r0, r7
 80091a0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80091a4:	4631      	mov	r1, r6
 80091a6:	f7f6 ffd9 	bl	800015c <__adddf3>
 80091aa:	3c01      	subs	r4, #1
 80091ac:	4607      	mov	r7, r0
 80091ae:	460e      	mov	r6, r1
 80091b0:	e748      	b.n	8009044 <__kernel_rem_pio2+0x4f0>
 80091b2:	9b06      	ldr	r3, [sp, #24]
 80091b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80091b8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80091bc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80091c0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80091c4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80091c8:	601d      	str	r5, [r3, #0]
 80091ca:	615e      	str	r6, [r3, #20]
 80091cc:	e721      	b.n	8009012 <__kernel_rem_pio2+0x4be>
 80091ce:	bf00      	nop
 80091d0:	41700000 	.word	0x41700000
 80091d4:	3e700000 	.word	0x3e700000

080091d8 <__kernel_sin>:
 80091d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091dc:	b086      	sub	sp, #24
 80091de:	e9cd 2300 	strd	r2, r3, [sp]
 80091e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091e6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091ea:	4682      	mov	sl, r0
 80091ec:	460c      	mov	r4, r1
 80091ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80091f0:	da03      	bge.n	80091fa <__kernel_sin+0x22>
 80091f2:	f7f7 fc19 	bl	8000a28 <__aeabi_d2iz>
 80091f6:	2800      	cmp	r0, #0
 80091f8:	d050      	beq.n	800929c <__kernel_sin+0xc4>
 80091fa:	4652      	mov	r2, sl
 80091fc:	4623      	mov	r3, r4
 80091fe:	4650      	mov	r0, sl
 8009200:	4621      	mov	r1, r4
 8009202:	f7f7 f961 	bl	80004c8 <__aeabi_dmul>
 8009206:	4606      	mov	r6, r0
 8009208:	460f      	mov	r7, r1
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	4650      	mov	r0, sl
 8009210:	4621      	mov	r1, r4
 8009212:	f7f7 f959 	bl	80004c8 <__aeabi_dmul>
 8009216:	a33e      	add	r3, pc, #248	; (adr r3, 8009310 <__kernel_sin+0x138>)
 8009218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921c:	4680      	mov	r8, r0
 800921e:	4689      	mov	r9, r1
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 f950 	bl	80004c8 <__aeabi_dmul>
 8009228:	a33b      	add	r3, pc, #236	; (adr r3, 8009318 <__kernel_sin+0x140>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f6 ff93 	bl	8000158 <__aeabi_dsub>
 8009232:	4632      	mov	r2, r6
 8009234:	463b      	mov	r3, r7
 8009236:	f7f7 f947 	bl	80004c8 <__aeabi_dmul>
 800923a:	a339      	add	r3, pc, #228	; (adr r3, 8009320 <__kernel_sin+0x148>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f6 ff8c 	bl	800015c <__adddf3>
 8009244:	4632      	mov	r2, r6
 8009246:	463b      	mov	r3, r7
 8009248:	f7f7 f93e 	bl	80004c8 <__aeabi_dmul>
 800924c:	a336      	add	r3, pc, #216	; (adr r3, 8009328 <__kernel_sin+0x150>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f7f6 ff81 	bl	8000158 <__aeabi_dsub>
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	f7f7 f935 	bl	80004c8 <__aeabi_dmul>
 800925e:	a334      	add	r3, pc, #208	; (adr r3, 8009330 <__kernel_sin+0x158>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	f7f6 ff7a 	bl	800015c <__adddf3>
 8009268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800926c:	b9dd      	cbnz	r5, 80092a6 <__kernel_sin+0xce>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4630      	mov	r0, r6
 8009274:	4639      	mov	r1, r7
 8009276:	f7f7 f927 	bl	80004c8 <__aeabi_dmul>
 800927a:	a32f      	add	r3, pc, #188	; (adr r3, 8009338 <__kernel_sin+0x160>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f6 ff6a 	bl	8000158 <__aeabi_dsub>
 8009284:	4642      	mov	r2, r8
 8009286:	464b      	mov	r3, r9
 8009288:	f7f7 f91e 	bl	80004c8 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4650      	mov	r0, sl
 8009292:	4621      	mov	r1, r4
 8009294:	f7f6 ff62 	bl	800015c <__adddf3>
 8009298:	4682      	mov	sl, r0
 800929a:	460c      	mov	r4, r1
 800929c:	4650      	mov	r0, sl
 800929e:	4621      	mov	r1, r4
 80092a0:	b006      	add	sp, #24
 80092a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a6:	2200      	movs	r2, #0
 80092a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <__kernel_sin+0x168>)
 80092ae:	f7f7 f90b 	bl	80004c8 <__aeabi_dmul>
 80092b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092ba:	4640      	mov	r0, r8
 80092bc:	4649      	mov	r1, r9
 80092be:	f7f7 f903 	bl	80004c8 <__aeabi_dmul>
 80092c2:	4602      	mov	r2, r0
 80092c4:	460b      	mov	r3, r1
 80092c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ca:	f7f6 ff45 	bl	8000158 <__aeabi_dsub>
 80092ce:	4632      	mov	r2, r6
 80092d0:	463b      	mov	r3, r7
 80092d2:	f7f7 f8f9 	bl	80004c8 <__aeabi_dmul>
 80092d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092da:	f7f6 ff3d 	bl	8000158 <__aeabi_dsub>
 80092de:	a316      	add	r3, pc, #88	; (adr r3, 8009338 <__kernel_sin+0x160>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	4606      	mov	r6, r0
 80092e6:	460f      	mov	r7, r1
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f7 f8ec 	bl	80004c8 <__aeabi_dmul>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f6 ff30 	bl	800015c <__adddf3>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4650      	mov	r0, sl
 8009302:	4621      	mov	r1, r4
 8009304:	f7f6 ff28 	bl	8000158 <__aeabi_dsub>
 8009308:	e7c6      	b.n	8009298 <__kernel_sin+0xc0>
 800930a:	bf00      	nop
 800930c:	f3af 8000 	nop.w
 8009310:	5acfd57c 	.word	0x5acfd57c
 8009314:	3de5d93a 	.word	0x3de5d93a
 8009318:	8a2b9ceb 	.word	0x8a2b9ceb
 800931c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009320:	57b1fe7d 	.word	0x57b1fe7d
 8009324:	3ec71de3 	.word	0x3ec71de3
 8009328:	19c161d5 	.word	0x19c161d5
 800932c:	3f2a01a0 	.word	0x3f2a01a0
 8009330:	1110f8a6 	.word	0x1110f8a6
 8009334:	3f811111 	.word	0x3f811111
 8009338:	55555549 	.word	0x55555549
 800933c:	3fc55555 	.word	0x3fc55555
 8009340:	3fe00000 	.word	0x3fe00000

08009344 <fabs>:
 8009344:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009348:	4770      	bx	lr
 800934a:	0000      	movs	r0, r0
 800934c:	0000      	movs	r0, r0
	...

08009350 <floor>:
 8009350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009354:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009358:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800935c:	2e13      	cmp	r6, #19
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4607      	mov	r7, r0
 8009364:	460c      	mov	r4, r1
 8009366:	4605      	mov	r5, r0
 8009368:	dc33      	bgt.n	80093d2 <floor+0x82>
 800936a:	2e00      	cmp	r6, #0
 800936c:	da14      	bge.n	8009398 <floor+0x48>
 800936e:	a334      	add	r3, pc, #208	; (adr r3, 8009440 <floor+0xf0>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	f7f6 fef2 	bl	800015c <__adddf3>
 8009378:	2200      	movs	r2, #0
 800937a:	2300      	movs	r3, #0
 800937c:	f7f7 fb34 	bl	80009e8 <__aeabi_dcmpgt>
 8009380:	b138      	cbz	r0, 8009392 <floor+0x42>
 8009382:	2c00      	cmp	r4, #0
 8009384:	da58      	bge.n	8009438 <floor+0xe8>
 8009386:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800938a:	431d      	orrs	r5, r3
 800938c:	d001      	beq.n	8009392 <floor+0x42>
 800938e:	2500      	movs	r5, #0
 8009390:	4c2d      	ldr	r4, [pc, #180]	; (8009448 <floor+0xf8>)
 8009392:	4623      	mov	r3, r4
 8009394:	462f      	mov	r7, r5
 8009396:	e025      	b.n	80093e4 <floor+0x94>
 8009398:	4a2c      	ldr	r2, [pc, #176]	; (800944c <floor+0xfc>)
 800939a:	fa42 f806 	asr.w	r8, r2, r6
 800939e:	ea01 0208 	and.w	r2, r1, r8
 80093a2:	4302      	orrs	r2, r0
 80093a4:	d01e      	beq.n	80093e4 <floor+0x94>
 80093a6:	a326      	add	r3, pc, #152	; (adr r3, 8009440 <floor+0xf0>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	f7f6 fed6 	bl	800015c <__adddf3>
 80093b0:	2200      	movs	r2, #0
 80093b2:	2300      	movs	r3, #0
 80093b4:	f7f7 fb18 	bl	80009e8 <__aeabi_dcmpgt>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d0ea      	beq.n	8009392 <floor+0x42>
 80093bc:	2c00      	cmp	r4, #0
 80093be:	bfbe      	ittt	lt
 80093c0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093c4:	fa43 f606 	asrlt.w	r6, r3, r6
 80093c8:	19a4      	addlt	r4, r4, r6
 80093ca:	2500      	movs	r5, #0
 80093cc:	ea24 0408 	bic.w	r4, r4, r8
 80093d0:	e7df      	b.n	8009392 <floor+0x42>
 80093d2:	2e33      	cmp	r6, #51	; 0x33
 80093d4:	dd0a      	ble.n	80093ec <floor+0x9c>
 80093d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80093da:	d103      	bne.n	80093e4 <floor+0x94>
 80093dc:	f7f6 febe 	bl	800015c <__adddf3>
 80093e0:	4607      	mov	r7, r0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4638      	mov	r0, r7
 80093e6:	4619      	mov	r1, r3
 80093e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ec:	f04f 32ff 	mov.w	r2, #4294967295
 80093f0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80093f4:	fa22 f808 	lsr.w	r8, r2, r8
 80093f8:	ea18 0f00 	tst.w	r8, r0
 80093fc:	d0f2      	beq.n	80093e4 <floor+0x94>
 80093fe:	a310      	add	r3, pc, #64	; (adr r3, 8009440 <floor+0xf0>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f6 feaa 	bl	800015c <__adddf3>
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	f7f7 faec 	bl	80009e8 <__aeabi_dcmpgt>
 8009410:	2800      	cmp	r0, #0
 8009412:	d0be      	beq.n	8009392 <floor+0x42>
 8009414:	2c00      	cmp	r4, #0
 8009416:	da02      	bge.n	800941e <floor+0xce>
 8009418:	2e14      	cmp	r6, #20
 800941a:	d103      	bne.n	8009424 <floor+0xd4>
 800941c:	3401      	adds	r4, #1
 800941e:	ea25 0508 	bic.w	r5, r5, r8
 8009422:	e7b6      	b.n	8009392 <floor+0x42>
 8009424:	2301      	movs	r3, #1
 8009426:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800942a:	fa03 f606 	lsl.w	r6, r3, r6
 800942e:	4435      	add	r5, r6
 8009430:	42bd      	cmp	r5, r7
 8009432:	bf38      	it	cc
 8009434:	18e4      	addcc	r4, r4, r3
 8009436:	e7f2      	b.n	800941e <floor+0xce>
 8009438:	2500      	movs	r5, #0
 800943a:	462c      	mov	r4, r5
 800943c:	e7a9      	b.n	8009392 <floor+0x42>
 800943e:	bf00      	nop
 8009440:	8800759c 	.word	0x8800759c
 8009444:	7e37e43c 	.word	0x7e37e43c
 8009448:	bff00000 	.word	0xbff00000
 800944c:	000fffff 	.word	0x000fffff

08009450 <nan>:
 8009450:	2000      	movs	r0, #0
 8009452:	4901      	ldr	r1, [pc, #4]	; (8009458 <nan+0x8>)
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	7ff80000 	.word	0x7ff80000
 800945c:	00000000 	.word	0x00000000

08009460 <scalbn>:
 8009460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009462:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009466:	4604      	mov	r4, r0
 8009468:	460d      	mov	r5, r1
 800946a:	4617      	mov	r7, r2
 800946c:	460b      	mov	r3, r1
 800946e:	b996      	cbnz	r6, 8009496 <scalbn+0x36>
 8009470:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009474:	4303      	orrs	r3, r0
 8009476:	d039      	beq.n	80094ec <scalbn+0x8c>
 8009478:	4b33      	ldr	r3, [pc, #204]	; (8009548 <scalbn+0xe8>)
 800947a:	2200      	movs	r2, #0
 800947c:	f7f7 f824 	bl	80004c8 <__aeabi_dmul>
 8009480:	4b32      	ldr	r3, [pc, #200]	; (800954c <scalbn+0xec>)
 8009482:	4604      	mov	r4, r0
 8009484:	429f      	cmp	r7, r3
 8009486:	460d      	mov	r5, r1
 8009488:	da0f      	bge.n	80094aa <scalbn+0x4a>
 800948a:	a32b      	add	r3, pc, #172	; (adr r3, 8009538 <scalbn+0xd8>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f7 f81a 	bl	80004c8 <__aeabi_dmul>
 8009494:	e006      	b.n	80094a4 <scalbn+0x44>
 8009496:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800949a:	4296      	cmp	r6, r2
 800949c:	d10a      	bne.n	80094b4 <scalbn+0x54>
 800949e:	4602      	mov	r2, r0
 80094a0:	f7f6 fe5c 	bl	800015c <__adddf3>
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	e020      	b.n	80094ec <scalbn+0x8c>
 80094aa:	460b      	mov	r3, r1
 80094ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80094b0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80094b4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80094b8:	19b9      	adds	r1, r7, r6
 80094ba:	4291      	cmp	r1, r2
 80094bc:	dd0e      	ble.n	80094dc <scalbn+0x7c>
 80094be:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80094c2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80094c6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80094ca:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80094ce:	4820      	ldr	r0, [pc, #128]	; (8009550 <scalbn+0xf0>)
 80094d0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80094d4:	a31a      	add	r3, pc, #104	; (adr r3, 8009540 <scalbn+0xe0>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	e7d9      	b.n	8009490 <scalbn+0x30>
 80094dc:	2900      	cmp	r1, #0
 80094de:	dd08      	ble.n	80094f2 <scalbn+0x92>
 80094e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80094ec:	4620      	mov	r0, r4
 80094ee:	4629      	mov	r1, r5
 80094f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094f2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80094f6:	da12      	bge.n	800951e <scalbn+0xbe>
 80094f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094fc:	429f      	cmp	r7, r3
 80094fe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009502:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8009506:	dcdc      	bgt.n	80094c2 <scalbn+0x62>
 8009508:	a30b      	add	r3, pc, #44	; (adr r3, 8009538 <scalbn+0xd8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009512:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009516:	480f      	ldr	r0, [pc, #60]	; (8009554 <scalbn+0xf4>)
 8009518:	f041 011f 	orr.w	r1, r1, #31
 800951c:	e7b8      	b.n	8009490 <scalbn+0x30>
 800951e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009522:	3136      	adds	r1, #54	; 0x36
 8009524:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009528:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800952c:	4620      	mov	r0, r4
 800952e:	4629      	mov	r1, r5
 8009530:	2200      	movs	r2, #0
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <scalbn+0xf8>)
 8009534:	e7ac      	b.n	8009490 <scalbn+0x30>
 8009536:	bf00      	nop
 8009538:	c2f8f359 	.word	0xc2f8f359
 800953c:	01a56e1f 	.word	0x01a56e1f
 8009540:	8800759c 	.word	0x8800759c
 8009544:	7e37e43c 	.word	0x7e37e43c
 8009548:	43500000 	.word	0x43500000
 800954c:	ffff3cb0 	.word	0xffff3cb0
 8009550:	8800759c 	.word	0x8800759c
 8009554:	c2f8f359 	.word	0xc2f8f359
 8009558:	3c900000 	.word	0x3c900000
 800955c:	00000000 	.word	0x00000000

08009560 <__ieee754_log>:
 8009560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009564:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	460d      	mov	r5, r1
 800956e:	b087      	sub	sp, #28
 8009570:	da24      	bge.n	80095bc <__ieee754_log+0x5c>
 8009572:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009576:	4304      	orrs	r4, r0
 8009578:	d108      	bne.n	800958c <__ieee754_log+0x2c>
 800957a:	2200      	movs	r2, #0
 800957c:	2300      	movs	r3, #0
 800957e:	2000      	movs	r0, #0
 8009580:	49cb      	ldr	r1, [pc, #812]	; (80098b0 <__ieee754_log+0x350>)
 8009582:	f7f7 f8cb 	bl	800071c <__aeabi_ddiv>
 8009586:	b007      	add	sp, #28
 8009588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800958c:	2900      	cmp	r1, #0
 800958e:	da04      	bge.n	800959a <__ieee754_log+0x3a>
 8009590:	f7f6 fde2 	bl	8000158 <__aeabi_dsub>
 8009594:	2200      	movs	r2, #0
 8009596:	2300      	movs	r3, #0
 8009598:	e7f3      	b.n	8009582 <__ieee754_log+0x22>
 800959a:	2200      	movs	r2, #0
 800959c:	4bc5      	ldr	r3, [pc, #788]	; (80098b4 <__ieee754_log+0x354>)
 800959e:	f7f6 ff93 	bl	80004c8 <__aeabi_dmul>
 80095a2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	460d      	mov	r5, r1
 80095ac:	49c2      	ldr	r1, [pc, #776]	; (80098b8 <__ieee754_log+0x358>)
 80095ae:	428d      	cmp	r5, r1
 80095b0:	dd06      	ble.n	80095c0 <__ieee754_log+0x60>
 80095b2:	4610      	mov	r0, r2
 80095b4:	4619      	mov	r1, r3
 80095b6:	f7f6 fdd1 	bl	800015c <__adddf3>
 80095ba:	e7e4      	b.n	8009586 <__ieee754_log+0x26>
 80095bc:	2600      	movs	r6, #0
 80095be:	e7f5      	b.n	80095ac <__ieee754_log+0x4c>
 80095c0:	152c      	asrs	r4, r5, #20
 80095c2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80095c6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80095ca:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80095ce:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80095d2:	4426      	add	r6, r4
 80095d4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80095d8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80095dc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80095e0:	ea41 0305 	orr.w	r3, r1, r5
 80095e4:	4610      	mov	r0, r2
 80095e6:	4619      	mov	r1, r3
 80095e8:	2200      	movs	r2, #0
 80095ea:	4bb4      	ldr	r3, [pc, #720]	; (80098bc <__ieee754_log+0x35c>)
 80095ec:	f7f6 fdb4 	bl	8000158 <__aeabi_dsub>
 80095f0:	1cab      	adds	r3, r5, #2
 80095f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8009604:	dc53      	bgt.n	80096ae <__ieee754_log+0x14e>
 8009606:	2300      	movs	r3, #0
 8009608:	f7f7 f9c6 	bl	8000998 <__aeabi_dcmpeq>
 800960c:	b1d0      	cbz	r0, 8009644 <__ieee754_log+0xe4>
 800960e:	2c00      	cmp	r4, #0
 8009610:	f000 8122 	beq.w	8009858 <__ieee754_log+0x2f8>
 8009614:	4620      	mov	r0, r4
 8009616:	f7f6 feed 	bl	80003f4 <__aeabi_i2d>
 800961a:	a391      	add	r3, pc, #580	; (adr r3, 8009860 <__ieee754_log+0x300>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	f7f6 ff50 	bl	80004c8 <__aeabi_dmul>
 8009628:	a38f      	add	r3, pc, #572	; (adr r3, 8009868 <__ieee754_log+0x308>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	4604      	mov	r4, r0
 8009630:	460d      	mov	r5, r1
 8009632:	4630      	mov	r0, r6
 8009634:	4639      	mov	r1, r7
 8009636:	f7f6 ff47 	bl	80004c8 <__aeabi_dmul>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4620      	mov	r0, r4
 8009640:	4629      	mov	r1, r5
 8009642:	e7b8      	b.n	80095b6 <__ieee754_log+0x56>
 8009644:	a38a      	add	r3, pc, #552	; (adr r3, 8009870 <__ieee754_log+0x310>)
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	4650      	mov	r0, sl
 800964c:	4659      	mov	r1, fp
 800964e:	f7f6 ff3b 	bl	80004c8 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	2000      	movs	r0, #0
 8009658:	4999      	ldr	r1, [pc, #612]	; (80098c0 <__ieee754_log+0x360>)
 800965a:	f7f6 fd7d 	bl	8000158 <__aeabi_dsub>
 800965e:	4652      	mov	r2, sl
 8009660:	4606      	mov	r6, r0
 8009662:	460f      	mov	r7, r1
 8009664:	465b      	mov	r3, fp
 8009666:	4650      	mov	r0, sl
 8009668:	4659      	mov	r1, fp
 800966a:	f7f6 ff2d 	bl	80004c8 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	4630      	mov	r0, r6
 8009674:	4639      	mov	r1, r7
 8009676:	f7f6 ff27 	bl	80004c8 <__aeabi_dmul>
 800967a:	4606      	mov	r6, r0
 800967c:	460f      	mov	r7, r1
 800967e:	b914      	cbnz	r4, 8009686 <__ieee754_log+0x126>
 8009680:	4632      	mov	r2, r6
 8009682:	463b      	mov	r3, r7
 8009684:	e0a2      	b.n	80097cc <__ieee754_log+0x26c>
 8009686:	4620      	mov	r0, r4
 8009688:	f7f6 feb4 	bl	80003f4 <__aeabi_i2d>
 800968c:	a374      	add	r3, pc, #464	; (adr r3, 8009860 <__ieee754_log+0x300>)
 800968e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009692:	4680      	mov	r8, r0
 8009694:	4689      	mov	r9, r1
 8009696:	f7f6 ff17 	bl	80004c8 <__aeabi_dmul>
 800969a:	a373      	add	r3, pc, #460	; (adr r3, 8009868 <__ieee754_log+0x308>)
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	4604      	mov	r4, r0
 80096a2:	460d      	mov	r5, r1
 80096a4:	4640      	mov	r0, r8
 80096a6:	4649      	mov	r1, r9
 80096a8:	f7f6 ff0e 	bl	80004c8 <__aeabi_dmul>
 80096ac:	e0a7      	b.n	80097fe <__ieee754_log+0x29e>
 80096ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096b2:	f7f6 fd53 	bl	800015c <__adddf3>
 80096b6:	4602      	mov	r2, r0
 80096b8:	460b      	mov	r3, r1
 80096ba:	4650      	mov	r0, sl
 80096bc:	4659      	mov	r1, fp
 80096be:	f7f7 f82d 	bl	800071c <__aeabi_ddiv>
 80096c2:	e9cd 0100 	strd	r0, r1, [sp]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f7f6 fe94 	bl	80003f4 <__aeabi_i2d>
 80096cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d4:	4610      	mov	r0, r2
 80096d6:	4619      	mov	r1, r3
 80096d8:	f7f6 fef6 	bl	80004c8 <__aeabi_dmul>
 80096dc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80096e0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80096e4:	4602      	mov	r2, r0
 80096e6:	9305      	str	r3, [sp, #20]
 80096e8:	460b      	mov	r3, r1
 80096ea:	4606      	mov	r6, r0
 80096ec:	460f      	mov	r7, r1
 80096ee:	f7f6 feeb 	bl	80004c8 <__aeabi_dmul>
 80096f2:	a361      	add	r3, pc, #388	; (adr r3, 8009878 <__ieee754_log+0x318>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	4680      	mov	r8, r0
 80096fa:	4689      	mov	r9, r1
 80096fc:	f7f6 fee4 	bl	80004c8 <__aeabi_dmul>
 8009700:	a35f      	add	r3, pc, #380	; (adr r3, 8009880 <__ieee754_log+0x320>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 fd29 	bl	800015c <__adddf3>
 800970a:	4642      	mov	r2, r8
 800970c:	464b      	mov	r3, r9
 800970e:	f7f6 fedb 	bl	80004c8 <__aeabi_dmul>
 8009712:	a35d      	add	r3, pc, #372	; (adr r3, 8009888 <__ieee754_log+0x328>)
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 fd20 	bl	800015c <__adddf3>
 800971c:	4642      	mov	r2, r8
 800971e:	464b      	mov	r3, r9
 8009720:	f7f6 fed2 	bl	80004c8 <__aeabi_dmul>
 8009724:	a35a      	add	r3, pc, #360	; (adr r3, 8009890 <__ieee754_log+0x330>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	f7f6 fd17 	bl	800015c <__adddf3>
 800972e:	4632      	mov	r2, r6
 8009730:	463b      	mov	r3, r7
 8009732:	f7f6 fec9 	bl	80004c8 <__aeabi_dmul>
 8009736:	a358      	add	r3, pc, #352	; (adr r3, 8009898 <__ieee754_log+0x338>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	4606      	mov	r6, r0
 800973e:	460f      	mov	r7, r1
 8009740:	4640      	mov	r0, r8
 8009742:	4649      	mov	r1, r9
 8009744:	f7f6 fec0 	bl	80004c8 <__aeabi_dmul>
 8009748:	a355      	add	r3, pc, #340	; (adr r3, 80098a0 <__ieee754_log+0x340>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f6 fd05 	bl	800015c <__adddf3>
 8009752:	4642      	mov	r2, r8
 8009754:	464b      	mov	r3, r9
 8009756:	f7f6 feb7 	bl	80004c8 <__aeabi_dmul>
 800975a:	a353      	add	r3, pc, #332	; (adr r3, 80098a8 <__ieee754_log+0x348>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 fcfc 	bl	800015c <__adddf3>
 8009764:	4642      	mov	r2, r8
 8009766:	464b      	mov	r3, r9
 8009768:	f7f6 feae 	bl	80004c8 <__aeabi_dmul>
 800976c:	460b      	mov	r3, r1
 800976e:	4602      	mov	r2, r0
 8009770:	4639      	mov	r1, r7
 8009772:	4630      	mov	r0, r6
 8009774:	f7f6 fcf2 	bl	800015c <__adddf3>
 8009778:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800977c:	9b05      	ldr	r3, [sp, #20]
 800977e:	3551      	adds	r5, #81	; 0x51
 8009780:	431d      	orrs	r5, r3
 8009782:	2d00      	cmp	r5, #0
 8009784:	4680      	mov	r8, r0
 8009786:	4689      	mov	r9, r1
 8009788:	dd48      	ble.n	800981c <__ieee754_log+0x2bc>
 800978a:	2200      	movs	r2, #0
 800978c:	4b4c      	ldr	r3, [pc, #304]	; (80098c0 <__ieee754_log+0x360>)
 800978e:	4650      	mov	r0, sl
 8009790:	4659      	mov	r1, fp
 8009792:	f7f6 fe99 	bl	80004c8 <__aeabi_dmul>
 8009796:	4652      	mov	r2, sl
 8009798:	465b      	mov	r3, fp
 800979a:	f7f6 fe95 	bl	80004c8 <__aeabi_dmul>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4606      	mov	r6, r0
 80097a4:	460f      	mov	r7, r1
 80097a6:	4640      	mov	r0, r8
 80097a8:	4649      	mov	r1, r9
 80097aa:	f7f6 fcd7 	bl	800015c <__adddf3>
 80097ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097b2:	f7f6 fe89 	bl	80004c8 <__aeabi_dmul>
 80097b6:	4680      	mov	r8, r0
 80097b8:	4689      	mov	r9, r1
 80097ba:	b964      	cbnz	r4, 80097d6 <__ieee754_log+0x276>
 80097bc:	4602      	mov	r2, r0
 80097be:	460b      	mov	r3, r1
 80097c0:	4630      	mov	r0, r6
 80097c2:	4639      	mov	r1, r7
 80097c4:	f7f6 fcc8 	bl	8000158 <__aeabi_dsub>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4650      	mov	r0, sl
 80097ce:	4659      	mov	r1, fp
 80097d0:	f7f6 fcc2 	bl	8000158 <__aeabi_dsub>
 80097d4:	e6d7      	b.n	8009586 <__ieee754_log+0x26>
 80097d6:	a322      	add	r3, pc, #136	; (adr r3, 8009860 <__ieee754_log+0x300>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e0:	f7f6 fe72 	bl	80004c8 <__aeabi_dmul>
 80097e4:	a320      	add	r3, pc, #128	; (adr r3, 8009868 <__ieee754_log+0x308>)
 80097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ea:	4604      	mov	r4, r0
 80097ec:	460d      	mov	r5, r1
 80097ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097f2:	f7f6 fe69 	bl	80004c8 <__aeabi_dmul>
 80097f6:	4642      	mov	r2, r8
 80097f8:	464b      	mov	r3, r9
 80097fa:	f7f6 fcaf 	bl	800015c <__adddf3>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4630      	mov	r0, r6
 8009804:	4639      	mov	r1, r7
 8009806:	f7f6 fca7 	bl	8000158 <__aeabi_dsub>
 800980a:	4652      	mov	r2, sl
 800980c:	465b      	mov	r3, fp
 800980e:	f7f6 fca3 	bl	8000158 <__aeabi_dsub>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4620      	mov	r0, r4
 8009818:	4629      	mov	r1, r5
 800981a:	e7d9      	b.n	80097d0 <__ieee754_log+0x270>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4650      	mov	r0, sl
 8009822:	4659      	mov	r1, fp
 8009824:	f7f6 fc98 	bl	8000158 <__aeabi_dsub>
 8009828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800982c:	f7f6 fe4c 	bl	80004c8 <__aeabi_dmul>
 8009830:	4606      	mov	r6, r0
 8009832:	460f      	mov	r7, r1
 8009834:	2c00      	cmp	r4, #0
 8009836:	f43f af23 	beq.w	8009680 <__ieee754_log+0x120>
 800983a:	a309      	add	r3, pc, #36	; (adr r3, 8009860 <__ieee754_log+0x300>)
 800983c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009844:	f7f6 fe40 	bl	80004c8 <__aeabi_dmul>
 8009848:	a307      	add	r3, pc, #28	; (adr r3, 8009868 <__ieee754_log+0x308>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	4604      	mov	r4, r0
 8009850:	460d      	mov	r5, r1
 8009852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009856:	e727      	b.n	80096a8 <__ieee754_log+0x148>
 8009858:	2000      	movs	r0, #0
 800985a:	2100      	movs	r1, #0
 800985c:	e693      	b.n	8009586 <__ieee754_log+0x26>
 800985e:	bf00      	nop
 8009860:	fee00000 	.word	0xfee00000
 8009864:	3fe62e42 	.word	0x3fe62e42
 8009868:	35793c76 	.word	0x35793c76
 800986c:	3dea39ef 	.word	0x3dea39ef
 8009870:	55555555 	.word	0x55555555
 8009874:	3fd55555 	.word	0x3fd55555
 8009878:	df3e5244 	.word	0xdf3e5244
 800987c:	3fc2f112 	.word	0x3fc2f112
 8009880:	96cb03de 	.word	0x96cb03de
 8009884:	3fc74664 	.word	0x3fc74664
 8009888:	94229359 	.word	0x94229359
 800988c:	3fd24924 	.word	0x3fd24924
 8009890:	55555593 	.word	0x55555593
 8009894:	3fe55555 	.word	0x3fe55555
 8009898:	d078c69f 	.word	0xd078c69f
 800989c:	3fc39a09 	.word	0x3fc39a09
 80098a0:	1d8e78af 	.word	0x1d8e78af
 80098a4:	3fcc71c5 	.word	0x3fcc71c5
 80098a8:	9997fa04 	.word	0x9997fa04
 80098ac:	3fd99999 	.word	0x3fd99999
 80098b0:	c3500000 	.word	0xc3500000
 80098b4:	43500000 	.word	0x43500000
 80098b8:	7fefffff 	.word	0x7fefffff
 80098bc:	3ff00000 	.word	0x3ff00000
 80098c0:	3fe00000 	.word	0x3fe00000

080098c4 <__errno>:
 80098c4:	4b01      	ldr	r3, [pc, #4]	; (80098cc <__errno+0x8>)
 80098c6:	6818      	ldr	r0, [r3, #0]
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	2000001c 	.word	0x2000001c

080098d0 <__libc_init_array>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	2600      	movs	r6, #0
 80098d4:	4d0c      	ldr	r5, [pc, #48]	; (8009908 <__libc_init_array+0x38>)
 80098d6:	4c0d      	ldr	r4, [pc, #52]	; (800990c <__libc_init_array+0x3c>)
 80098d8:	1b64      	subs	r4, r4, r5
 80098da:	10a4      	asrs	r4, r4, #2
 80098dc:	42a6      	cmp	r6, r4
 80098de:	d109      	bne.n	80098f4 <__libc_init_array+0x24>
 80098e0:	f001 f860 	bl	800a9a4 <_init>
 80098e4:	2600      	movs	r6, #0
 80098e6:	4d0a      	ldr	r5, [pc, #40]	; (8009910 <__libc_init_array+0x40>)
 80098e8:	4c0a      	ldr	r4, [pc, #40]	; (8009914 <__libc_init_array+0x44>)
 80098ea:	1b64      	subs	r4, r4, r5
 80098ec:	10a4      	asrs	r4, r4, #2
 80098ee:	42a6      	cmp	r6, r4
 80098f0:	d105      	bne.n	80098fe <__libc_init_array+0x2e>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f8:	4798      	blx	r3
 80098fa:	3601      	adds	r6, #1
 80098fc:	e7ee      	b.n	80098dc <__libc_init_array+0xc>
 80098fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009902:	4798      	blx	r3
 8009904:	3601      	adds	r6, #1
 8009906:	e7f2      	b.n	80098ee <__libc_init_array+0x1e>
 8009908:	0800b3c0 	.word	0x0800b3c0
 800990c:	0800b3c0 	.word	0x0800b3c0
 8009910:	0800b3c0 	.word	0x0800b3c0
 8009914:	0800b3c4 	.word	0x0800b3c4

08009918 <memset>:
 8009918:	4603      	mov	r3, r0
 800991a:	4402      	add	r2, r0
 800991c:	4293      	cmp	r3, r2
 800991e:	d100      	bne.n	8009922 <memset+0xa>
 8009920:	4770      	bx	lr
 8009922:	f803 1b01 	strb.w	r1, [r3], #1
 8009926:	e7f9      	b.n	800991c <memset+0x4>

08009928 <rand>:
 8009928:	4b16      	ldr	r3, [pc, #88]	; (8009984 <rand+0x5c>)
 800992a:	b510      	push	{r4, lr}
 800992c:	681c      	ldr	r4, [r3, #0]
 800992e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009930:	b9b3      	cbnz	r3, 8009960 <rand+0x38>
 8009932:	2018      	movs	r0, #24
 8009934:	f000 f866 	bl	8009a04 <malloc>
 8009938:	4602      	mov	r2, r0
 800993a:	63a0      	str	r0, [r4, #56]	; 0x38
 800993c:	b920      	cbnz	r0, 8009948 <rand+0x20>
 800993e:	214e      	movs	r1, #78	; 0x4e
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <rand+0x60>)
 8009942:	4812      	ldr	r0, [pc, #72]	; (800998c <rand+0x64>)
 8009944:	f000 f82e 	bl	80099a4 <__assert_func>
 8009948:	4911      	ldr	r1, [pc, #68]	; (8009990 <rand+0x68>)
 800994a:	4b12      	ldr	r3, [pc, #72]	; (8009994 <rand+0x6c>)
 800994c:	e9c0 1300 	strd	r1, r3, [r0]
 8009950:	4b11      	ldr	r3, [pc, #68]	; (8009998 <rand+0x70>)
 8009952:	2100      	movs	r1, #0
 8009954:	6083      	str	r3, [r0, #8]
 8009956:	230b      	movs	r3, #11
 8009958:	8183      	strh	r3, [r0, #12]
 800995a:	2001      	movs	r0, #1
 800995c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009960:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009962:	4a0e      	ldr	r2, [pc, #56]	; (800999c <rand+0x74>)
 8009964:	6920      	ldr	r0, [r4, #16]
 8009966:	6963      	ldr	r3, [r4, #20]
 8009968:	4342      	muls	r2, r0
 800996a:	490d      	ldr	r1, [pc, #52]	; (80099a0 <rand+0x78>)
 800996c:	fb01 2203 	mla	r2, r1, r3, r2
 8009970:	fba0 0101 	umull	r0, r1, r0, r1
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	eb42 0001 	adc.w	r0, r2, r1
 800997a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800997e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009982:	bd10      	pop	{r4, pc}
 8009984:	2000001c 	.word	0x2000001c
 8009988:	0800b27c 	.word	0x0800b27c
 800998c:	0800b293 	.word	0x0800b293
 8009990:	abcd330e 	.word	0xabcd330e
 8009994:	e66d1234 	.word	0xe66d1234
 8009998:	0005deec 	.word	0x0005deec
 800999c:	5851f42d 	.word	0x5851f42d
 80099a0:	4c957f2d 	.word	0x4c957f2d

080099a4 <__assert_func>:
 80099a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099a6:	4614      	mov	r4, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <__assert_func+0x2c>)
 80099ac:	4605      	mov	r5, r0
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68d8      	ldr	r0, [r3, #12]
 80099b2:	b14c      	cbz	r4, 80099c8 <__assert_func+0x24>
 80099b4:	4b07      	ldr	r3, [pc, #28]	; (80099d4 <__assert_func+0x30>)
 80099b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099ba:	9100      	str	r1, [sp, #0]
 80099bc:	462b      	mov	r3, r5
 80099be:	4906      	ldr	r1, [pc, #24]	; (80099d8 <__assert_func+0x34>)
 80099c0:	f000 f80e 	bl	80099e0 <fiprintf>
 80099c4:	f000 fcc0 	bl	800a348 <abort>
 80099c8:	4b04      	ldr	r3, [pc, #16]	; (80099dc <__assert_func+0x38>)
 80099ca:	461c      	mov	r4, r3
 80099cc:	e7f3      	b.n	80099b6 <__assert_func+0x12>
 80099ce:	bf00      	nop
 80099d0:	2000001c 	.word	0x2000001c
 80099d4:	0800b2ee 	.word	0x0800b2ee
 80099d8:	0800b2fb 	.word	0x0800b2fb
 80099dc:	0800b329 	.word	0x0800b329

080099e0 <fiprintf>:
 80099e0:	b40e      	push	{r1, r2, r3}
 80099e2:	b503      	push	{r0, r1, lr}
 80099e4:	4601      	mov	r1, r0
 80099e6:	ab03      	add	r3, sp, #12
 80099e8:	4805      	ldr	r0, [pc, #20]	; (8009a00 <fiprintf+0x20>)
 80099ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ee:	6800      	ldr	r0, [r0, #0]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	f000 f913 	bl	8009c1c <_vfiprintf_r>
 80099f6:	b002      	add	sp, #8
 80099f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099fc:	b003      	add	sp, #12
 80099fe:	4770      	bx	lr
 8009a00:	2000001c 	.word	0x2000001c

08009a04 <malloc>:
 8009a04:	4b02      	ldr	r3, [pc, #8]	; (8009a10 <malloc+0xc>)
 8009a06:	4601      	mov	r1, r0
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	f000 b86b 	b.w	8009ae4 <_malloc_r>
 8009a0e:	bf00      	nop
 8009a10:	2000001c 	.word	0x2000001c

08009a14 <_free_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4605      	mov	r5, r0
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	d040      	beq.n	8009a9e <_free_r+0x8a>
 8009a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a20:	1f0c      	subs	r4, r1, #4
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	bfb8      	it	lt
 8009a26:	18e4      	addlt	r4, r4, r3
 8009a28:	f000 fec0 	bl	800a7ac <__malloc_lock>
 8009a2c:	4a1c      	ldr	r2, [pc, #112]	; (8009aa0 <_free_r+0x8c>)
 8009a2e:	6813      	ldr	r3, [r2, #0]
 8009a30:	b933      	cbnz	r3, 8009a40 <_free_r+0x2c>
 8009a32:	6063      	str	r3, [r4, #4]
 8009a34:	6014      	str	r4, [r2, #0]
 8009a36:	4628      	mov	r0, r5
 8009a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a3c:	f000 bebc 	b.w	800a7b8 <__malloc_unlock>
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d908      	bls.n	8009a56 <_free_r+0x42>
 8009a44:	6820      	ldr	r0, [r4, #0]
 8009a46:	1821      	adds	r1, r4, r0
 8009a48:	428b      	cmp	r3, r1
 8009a4a:	bf01      	itttt	eq
 8009a4c:	6819      	ldreq	r1, [r3, #0]
 8009a4e:	685b      	ldreq	r3, [r3, #4]
 8009a50:	1809      	addeq	r1, r1, r0
 8009a52:	6021      	streq	r1, [r4, #0]
 8009a54:	e7ed      	b.n	8009a32 <_free_r+0x1e>
 8009a56:	461a      	mov	r2, r3
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	b10b      	cbz	r3, 8009a60 <_free_r+0x4c>
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d9fa      	bls.n	8009a56 <_free_r+0x42>
 8009a60:	6811      	ldr	r1, [r2, #0]
 8009a62:	1850      	adds	r0, r2, r1
 8009a64:	42a0      	cmp	r0, r4
 8009a66:	d10b      	bne.n	8009a80 <_free_r+0x6c>
 8009a68:	6820      	ldr	r0, [r4, #0]
 8009a6a:	4401      	add	r1, r0
 8009a6c:	1850      	adds	r0, r2, r1
 8009a6e:	4283      	cmp	r3, r0
 8009a70:	6011      	str	r1, [r2, #0]
 8009a72:	d1e0      	bne.n	8009a36 <_free_r+0x22>
 8009a74:	6818      	ldr	r0, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	4401      	add	r1, r0
 8009a7a:	6011      	str	r1, [r2, #0]
 8009a7c:	6053      	str	r3, [r2, #4]
 8009a7e:	e7da      	b.n	8009a36 <_free_r+0x22>
 8009a80:	d902      	bls.n	8009a88 <_free_r+0x74>
 8009a82:	230c      	movs	r3, #12
 8009a84:	602b      	str	r3, [r5, #0]
 8009a86:	e7d6      	b.n	8009a36 <_free_r+0x22>
 8009a88:	6820      	ldr	r0, [r4, #0]
 8009a8a:	1821      	adds	r1, r4, r0
 8009a8c:	428b      	cmp	r3, r1
 8009a8e:	bf01      	itttt	eq
 8009a90:	6819      	ldreq	r1, [r3, #0]
 8009a92:	685b      	ldreq	r3, [r3, #4]
 8009a94:	1809      	addeq	r1, r1, r0
 8009a96:	6021      	streq	r1, [r4, #0]
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	6054      	str	r4, [r2, #4]
 8009a9c:	e7cb      	b.n	8009a36 <_free_r+0x22>
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	200015b4 	.word	0x200015b4

08009aa4 <sbrk_aligned>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	4e0e      	ldr	r6, [pc, #56]	; (8009ae0 <sbrk_aligned+0x3c>)
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	6831      	ldr	r1, [r6, #0]
 8009aac:	4605      	mov	r5, r0
 8009aae:	b911      	cbnz	r1, 8009ab6 <sbrk_aligned+0x12>
 8009ab0:	f000 fb7a 	bl	800a1a8 <_sbrk_r>
 8009ab4:	6030      	str	r0, [r6, #0]
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 fb75 	bl	800a1a8 <_sbrk_r>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d00a      	beq.n	8009ad8 <sbrk_aligned+0x34>
 8009ac2:	1cc4      	adds	r4, r0, #3
 8009ac4:	f024 0403 	bic.w	r4, r4, #3
 8009ac8:	42a0      	cmp	r0, r4
 8009aca:	d007      	beq.n	8009adc <sbrk_aligned+0x38>
 8009acc:	1a21      	subs	r1, r4, r0
 8009ace:	4628      	mov	r0, r5
 8009ad0:	f000 fb6a 	bl	800a1a8 <_sbrk_r>
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d101      	bne.n	8009adc <sbrk_aligned+0x38>
 8009ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8009adc:	4620      	mov	r0, r4
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	200015b8 	.word	0x200015b8

08009ae4 <_malloc_r>:
 8009ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae8:	1ccd      	adds	r5, r1, #3
 8009aea:	f025 0503 	bic.w	r5, r5, #3
 8009aee:	3508      	adds	r5, #8
 8009af0:	2d0c      	cmp	r5, #12
 8009af2:	bf38      	it	cc
 8009af4:	250c      	movcc	r5, #12
 8009af6:	2d00      	cmp	r5, #0
 8009af8:	4607      	mov	r7, r0
 8009afa:	db01      	blt.n	8009b00 <_malloc_r+0x1c>
 8009afc:	42a9      	cmp	r1, r5
 8009afe:	d905      	bls.n	8009b0c <_malloc_r+0x28>
 8009b00:	230c      	movs	r3, #12
 8009b02:	2600      	movs	r6, #0
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4630      	mov	r0, r6
 8009b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b0c:	4e2e      	ldr	r6, [pc, #184]	; (8009bc8 <_malloc_r+0xe4>)
 8009b0e:	f000 fe4d 	bl	800a7ac <__malloc_lock>
 8009b12:	6833      	ldr	r3, [r6, #0]
 8009b14:	461c      	mov	r4, r3
 8009b16:	bb34      	cbnz	r4, 8009b66 <_malloc_r+0x82>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	f7ff ffc2 	bl	8009aa4 <sbrk_aligned>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	4604      	mov	r4, r0
 8009b24:	d14d      	bne.n	8009bc2 <_malloc_r+0xde>
 8009b26:	6834      	ldr	r4, [r6, #0]
 8009b28:	4626      	mov	r6, r4
 8009b2a:	2e00      	cmp	r6, #0
 8009b2c:	d140      	bne.n	8009bb0 <_malloc_r+0xcc>
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	4631      	mov	r1, r6
 8009b32:	4638      	mov	r0, r7
 8009b34:	eb04 0803 	add.w	r8, r4, r3
 8009b38:	f000 fb36 	bl	800a1a8 <_sbrk_r>
 8009b3c:	4580      	cmp	r8, r0
 8009b3e:	d13a      	bne.n	8009bb6 <_malloc_r+0xd2>
 8009b40:	6821      	ldr	r1, [r4, #0]
 8009b42:	3503      	adds	r5, #3
 8009b44:	1a6d      	subs	r5, r5, r1
 8009b46:	f025 0503 	bic.w	r5, r5, #3
 8009b4a:	3508      	adds	r5, #8
 8009b4c:	2d0c      	cmp	r5, #12
 8009b4e:	bf38      	it	cc
 8009b50:	250c      	movcc	r5, #12
 8009b52:	4638      	mov	r0, r7
 8009b54:	4629      	mov	r1, r5
 8009b56:	f7ff ffa5 	bl	8009aa4 <sbrk_aligned>
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d02b      	beq.n	8009bb6 <_malloc_r+0xd2>
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	442b      	add	r3, r5
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	e00e      	b.n	8009b84 <_malloc_r+0xa0>
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	1b52      	subs	r2, r2, r5
 8009b6a:	d41e      	bmi.n	8009baa <_malloc_r+0xc6>
 8009b6c:	2a0b      	cmp	r2, #11
 8009b6e:	d916      	bls.n	8009b9e <_malloc_r+0xba>
 8009b70:	1961      	adds	r1, r4, r5
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	6025      	str	r5, [r4, #0]
 8009b76:	bf18      	it	ne
 8009b78:	6059      	strne	r1, [r3, #4]
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	bf08      	it	eq
 8009b7e:	6031      	streq	r1, [r6, #0]
 8009b80:	5162      	str	r2, [r4, r5]
 8009b82:	604b      	str	r3, [r1, #4]
 8009b84:	4638      	mov	r0, r7
 8009b86:	f104 060b 	add.w	r6, r4, #11
 8009b8a:	f000 fe15 	bl	800a7b8 <__malloc_unlock>
 8009b8e:	f026 0607 	bic.w	r6, r6, #7
 8009b92:	1d23      	adds	r3, r4, #4
 8009b94:	1af2      	subs	r2, r6, r3
 8009b96:	d0b6      	beq.n	8009b06 <_malloc_r+0x22>
 8009b98:	1b9b      	subs	r3, r3, r6
 8009b9a:	50a3      	str	r3, [r4, r2]
 8009b9c:	e7b3      	b.n	8009b06 <_malloc_r+0x22>
 8009b9e:	6862      	ldr	r2, [r4, #4]
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	bf0c      	ite	eq
 8009ba4:	6032      	streq	r2, [r6, #0]
 8009ba6:	605a      	strne	r2, [r3, #4]
 8009ba8:	e7ec      	b.n	8009b84 <_malloc_r+0xa0>
 8009baa:	4623      	mov	r3, r4
 8009bac:	6864      	ldr	r4, [r4, #4]
 8009bae:	e7b2      	b.n	8009b16 <_malloc_r+0x32>
 8009bb0:	4634      	mov	r4, r6
 8009bb2:	6876      	ldr	r6, [r6, #4]
 8009bb4:	e7b9      	b.n	8009b2a <_malloc_r+0x46>
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	4638      	mov	r0, r7
 8009bba:	603b      	str	r3, [r7, #0]
 8009bbc:	f000 fdfc 	bl	800a7b8 <__malloc_unlock>
 8009bc0:	e7a1      	b.n	8009b06 <_malloc_r+0x22>
 8009bc2:	6025      	str	r5, [r4, #0]
 8009bc4:	e7de      	b.n	8009b84 <_malloc_r+0xa0>
 8009bc6:	bf00      	nop
 8009bc8:	200015b4 	.word	0x200015b4

08009bcc <__sfputc_r>:
 8009bcc:	6893      	ldr	r3, [r2, #8]
 8009bce:	b410      	push	{r4}
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	6093      	str	r3, [r2, #8]
 8009bd6:	da07      	bge.n	8009be8 <__sfputc_r+0x1c>
 8009bd8:	6994      	ldr	r4, [r2, #24]
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	db01      	blt.n	8009be2 <__sfputc_r+0x16>
 8009bde:	290a      	cmp	r1, #10
 8009be0:	d102      	bne.n	8009be8 <__sfputc_r+0x1c>
 8009be2:	bc10      	pop	{r4}
 8009be4:	f000 baf0 	b.w	800a1c8 <__swbuf_r>
 8009be8:	6813      	ldr	r3, [r2, #0]
 8009bea:	1c58      	adds	r0, r3, #1
 8009bec:	6010      	str	r0, [r2, #0]
 8009bee:	7019      	strb	r1, [r3, #0]
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	bc10      	pop	{r4}
 8009bf4:	4770      	bx	lr

08009bf6 <__sfputs_r>:
 8009bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	460f      	mov	r7, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	18d5      	adds	r5, r2, r3
 8009c00:	42ac      	cmp	r4, r5
 8009c02:	d101      	bne.n	8009c08 <__sfputs_r+0x12>
 8009c04:	2000      	movs	r0, #0
 8009c06:	e007      	b.n	8009c18 <__sfputs_r+0x22>
 8009c08:	463a      	mov	r2, r7
 8009c0a:	4630      	mov	r0, r6
 8009c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c10:	f7ff ffdc 	bl	8009bcc <__sfputc_r>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	d1f3      	bne.n	8009c00 <__sfputs_r+0xa>
 8009c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c1c <_vfiprintf_r>:
 8009c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c20:	460d      	mov	r5, r1
 8009c22:	4614      	mov	r4, r2
 8009c24:	4698      	mov	r8, r3
 8009c26:	4606      	mov	r6, r0
 8009c28:	b09d      	sub	sp, #116	; 0x74
 8009c2a:	b118      	cbz	r0, 8009c34 <_vfiprintf_r+0x18>
 8009c2c:	6983      	ldr	r3, [r0, #24]
 8009c2e:	b90b      	cbnz	r3, 8009c34 <_vfiprintf_r+0x18>
 8009c30:	f000 fca8 	bl	800a584 <__sinit>
 8009c34:	4b89      	ldr	r3, [pc, #548]	; (8009e5c <_vfiprintf_r+0x240>)
 8009c36:	429d      	cmp	r5, r3
 8009c38:	d11b      	bne.n	8009c72 <_vfiprintf_r+0x56>
 8009c3a:	6875      	ldr	r5, [r6, #4]
 8009c3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c3e:	07d9      	lsls	r1, r3, #31
 8009c40:	d405      	bmi.n	8009c4e <_vfiprintf_r+0x32>
 8009c42:	89ab      	ldrh	r3, [r5, #12]
 8009c44:	059a      	lsls	r2, r3, #22
 8009c46:	d402      	bmi.n	8009c4e <_vfiprintf_r+0x32>
 8009c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c4a:	f000 fd39 	bl	800a6c0 <__retarget_lock_acquire_recursive>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	071b      	lsls	r3, r3, #28
 8009c52:	d501      	bpl.n	8009c58 <_vfiprintf_r+0x3c>
 8009c54:	692b      	ldr	r3, [r5, #16]
 8009c56:	b9eb      	cbnz	r3, 8009c94 <_vfiprintf_r+0x78>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f000 fb06 	bl	800a26c <__swsetup_r>
 8009c60:	b1c0      	cbz	r0, 8009c94 <_vfiprintf_r+0x78>
 8009c62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c64:	07dc      	lsls	r4, r3, #31
 8009c66:	d50e      	bpl.n	8009c86 <_vfiprintf_r+0x6a>
 8009c68:	f04f 30ff 	mov.w	r0, #4294967295
 8009c6c:	b01d      	add	sp, #116	; 0x74
 8009c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c72:	4b7b      	ldr	r3, [pc, #492]	; (8009e60 <_vfiprintf_r+0x244>)
 8009c74:	429d      	cmp	r5, r3
 8009c76:	d101      	bne.n	8009c7c <_vfiprintf_r+0x60>
 8009c78:	68b5      	ldr	r5, [r6, #8]
 8009c7a:	e7df      	b.n	8009c3c <_vfiprintf_r+0x20>
 8009c7c:	4b79      	ldr	r3, [pc, #484]	; (8009e64 <_vfiprintf_r+0x248>)
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	bf08      	it	eq
 8009c82:	68f5      	ldreq	r5, [r6, #12]
 8009c84:	e7da      	b.n	8009c3c <_vfiprintf_r+0x20>
 8009c86:	89ab      	ldrh	r3, [r5, #12]
 8009c88:	0598      	lsls	r0, r3, #22
 8009c8a:	d4ed      	bmi.n	8009c68 <_vfiprintf_r+0x4c>
 8009c8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c8e:	f000 fd18 	bl	800a6c2 <__retarget_lock_release_recursive>
 8009c92:	e7e9      	b.n	8009c68 <_vfiprintf_r+0x4c>
 8009c94:	2300      	movs	r3, #0
 8009c96:	9309      	str	r3, [sp, #36]	; 0x24
 8009c98:	2320      	movs	r3, #32
 8009c9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c9e:	2330      	movs	r3, #48	; 0x30
 8009ca0:	f04f 0901 	mov.w	r9, #1
 8009ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ca8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e68 <_vfiprintf_r+0x24c>
 8009cac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cb0:	4623      	mov	r3, r4
 8009cb2:	469a      	mov	sl, r3
 8009cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cb8:	b10a      	cbz	r2, 8009cbe <_vfiprintf_r+0xa2>
 8009cba:	2a25      	cmp	r2, #37	; 0x25
 8009cbc:	d1f9      	bne.n	8009cb2 <_vfiprintf_r+0x96>
 8009cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8009cc2:	d00b      	beq.n	8009cdc <_vfiprintf_r+0xc0>
 8009cc4:	465b      	mov	r3, fp
 8009cc6:	4622      	mov	r2, r4
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4630      	mov	r0, r6
 8009ccc:	f7ff ff93 	bl	8009bf6 <__sfputs_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f000 80aa 	beq.w	8009e2a <_vfiprintf_r+0x20e>
 8009cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cd8:	445a      	add	r2, fp
 8009cda:	9209      	str	r2, [sp, #36]	; 0x24
 8009cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80a2 	beq.w	8009e2a <_vfiprintf_r+0x20e>
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf0:	f10a 0a01 	add.w	sl, sl, #1
 8009cf4:	9304      	str	r3, [sp, #16]
 8009cf6:	9307      	str	r3, [sp, #28]
 8009cf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cfc:	931a      	str	r3, [sp, #104]	; 0x68
 8009cfe:	4654      	mov	r4, sl
 8009d00:	2205      	movs	r2, #5
 8009d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d06:	4858      	ldr	r0, [pc, #352]	; (8009e68 <_vfiprintf_r+0x24c>)
 8009d08:	f000 fd42 	bl	800a790 <memchr>
 8009d0c:	9a04      	ldr	r2, [sp, #16]
 8009d0e:	b9d8      	cbnz	r0, 8009d48 <_vfiprintf_r+0x12c>
 8009d10:	06d1      	lsls	r1, r2, #27
 8009d12:	bf44      	itt	mi
 8009d14:	2320      	movmi	r3, #32
 8009d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d1a:	0713      	lsls	r3, r2, #28
 8009d1c:	bf44      	itt	mi
 8009d1e:	232b      	movmi	r3, #43	; 0x2b
 8009d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d24:	f89a 3000 	ldrb.w	r3, [sl]
 8009d28:	2b2a      	cmp	r3, #42	; 0x2a
 8009d2a:	d015      	beq.n	8009d58 <_vfiprintf_r+0x13c>
 8009d2c:	4654      	mov	r4, sl
 8009d2e:	2000      	movs	r0, #0
 8009d30:	f04f 0c0a 	mov.w	ip, #10
 8009d34:	9a07      	ldr	r2, [sp, #28]
 8009d36:	4621      	mov	r1, r4
 8009d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d3c:	3b30      	subs	r3, #48	; 0x30
 8009d3e:	2b09      	cmp	r3, #9
 8009d40:	d94e      	bls.n	8009de0 <_vfiprintf_r+0x1c4>
 8009d42:	b1b0      	cbz	r0, 8009d72 <_vfiprintf_r+0x156>
 8009d44:	9207      	str	r2, [sp, #28]
 8009d46:	e014      	b.n	8009d72 <_vfiprintf_r+0x156>
 8009d48:	eba0 0308 	sub.w	r3, r0, r8
 8009d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d50:	4313      	orrs	r3, r2
 8009d52:	46a2      	mov	sl, r4
 8009d54:	9304      	str	r3, [sp, #16]
 8009d56:	e7d2      	b.n	8009cfe <_vfiprintf_r+0xe2>
 8009d58:	9b03      	ldr	r3, [sp, #12]
 8009d5a:	1d19      	adds	r1, r3, #4
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	9103      	str	r1, [sp, #12]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bfbb      	ittet	lt
 8009d64:	425b      	neglt	r3, r3
 8009d66:	f042 0202 	orrlt.w	r2, r2, #2
 8009d6a:	9307      	strge	r3, [sp, #28]
 8009d6c:	9307      	strlt	r3, [sp, #28]
 8009d6e:	bfb8      	it	lt
 8009d70:	9204      	strlt	r2, [sp, #16]
 8009d72:	7823      	ldrb	r3, [r4, #0]
 8009d74:	2b2e      	cmp	r3, #46	; 0x2e
 8009d76:	d10c      	bne.n	8009d92 <_vfiprintf_r+0x176>
 8009d78:	7863      	ldrb	r3, [r4, #1]
 8009d7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d7c:	d135      	bne.n	8009dea <_vfiprintf_r+0x1ce>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	3402      	adds	r4, #2
 8009d82:	1d1a      	adds	r2, r3, #4
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	9203      	str	r2, [sp, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	bfb8      	it	lt
 8009d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d90:	9305      	str	r3, [sp, #20]
 8009d92:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e6c <_vfiprintf_r+0x250>
 8009d96:	2203      	movs	r2, #3
 8009d98:	4650      	mov	r0, sl
 8009d9a:	7821      	ldrb	r1, [r4, #0]
 8009d9c:	f000 fcf8 	bl	800a790 <memchr>
 8009da0:	b140      	cbz	r0, 8009db4 <_vfiprintf_r+0x198>
 8009da2:	2340      	movs	r3, #64	; 0x40
 8009da4:	eba0 000a 	sub.w	r0, r0, sl
 8009da8:	fa03 f000 	lsl.w	r0, r3, r0
 8009dac:	9b04      	ldr	r3, [sp, #16]
 8009dae:	3401      	adds	r4, #1
 8009db0:	4303      	orrs	r3, r0
 8009db2:	9304      	str	r3, [sp, #16]
 8009db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db8:	2206      	movs	r2, #6
 8009dba:	482d      	ldr	r0, [pc, #180]	; (8009e70 <_vfiprintf_r+0x254>)
 8009dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dc0:	f000 fce6 	bl	800a790 <memchr>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	d03f      	beq.n	8009e48 <_vfiprintf_r+0x22c>
 8009dc8:	4b2a      	ldr	r3, [pc, #168]	; (8009e74 <_vfiprintf_r+0x258>)
 8009dca:	bb1b      	cbnz	r3, 8009e14 <_vfiprintf_r+0x1f8>
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	3307      	adds	r3, #7
 8009dd0:	f023 0307 	bic.w	r3, r3, #7
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	9303      	str	r3, [sp, #12]
 8009dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dda:	443b      	add	r3, r7
 8009ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dde:	e767      	b.n	8009cb0 <_vfiprintf_r+0x94>
 8009de0:	460c      	mov	r4, r1
 8009de2:	2001      	movs	r0, #1
 8009de4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009de8:	e7a5      	b.n	8009d36 <_vfiprintf_r+0x11a>
 8009dea:	2300      	movs	r3, #0
 8009dec:	f04f 0c0a 	mov.w	ip, #10
 8009df0:	4619      	mov	r1, r3
 8009df2:	3401      	adds	r4, #1
 8009df4:	9305      	str	r3, [sp, #20]
 8009df6:	4620      	mov	r0, r4
 8009df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfc:	3a30      	subs	r2, #48	; 0x30
 8009dfe:	2a09      	cmp	r2, #9
 8009e00:	d903      	bls.n	8009e0a <_vfiprintf_r+0x1ee>
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d0c5      	beq.n	8009d92 <_vfiprintf_r+0x176>
 8009e06:	9105      	str	r1, [sp, #20]
 8009e08:	e7c3      	b.n	8009d92 <_vfiprintf_r+0x176>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e12:	e7f0      	b.n	8009df6 <_vfiprintf_r+0x1da>
 8009e14:	ab03      	add	r3, sp, #12
 8009e16:	9300      	str	r3, [sp, #0]
 8009e18:	462a      	mov	r2, r5
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	4b16      	ldr	r3, [pc, #88]	; (8009e78 <_vfiprintf_r+0x25c>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	f3af 8000 	nop.w
 8009e24:	4607      	mov	r7, r0
 8009e26:	1c78      	adds	r0, r7, #1
 8009e28:	d1d6      	bne.n	8009dd8 <_vfiprintf_r+0x1bc>
 8009e2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e2c:	07d9      	lsls	r1, r3, #31
 8009e2e:	d405      	bmi.n	8009e3c <_vfiprintf_r+0x220>
 8009e30:	89ab      	ldrh	r3, [r5, #12]
 8009e32:	059a      	lsls	r2, r3, #22
 8009e34:	d402      	bmi.n	8009e3c <_vfiprintf_r+0x220>
 8009e36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e38:	f000 fc43 	bl	800a6c2 <__retarget_lock_release_recursive>
 8009e3c:	89ab      	ldrh	r3, [r5, #12]
 8009e3e:	065b      	lsls	r3, r3, #25
 8009e40:	f53f af12 	bmi.w	8009c68 <_vfiprintf_r+0x4c>
 8009e44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e46:	e711      	b.n	8009c6c <_vfiprintf_r+0x50>
 8009e48:	ab03      	add	r3, sp, #12
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	462a      	mov	r2, r5
 8009e4e:	4630      	mov	r0, r6
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <_vfiprintf_r+0x25c>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	f000 f882 	bl	8009f5c <_printf_i>
 8009e58:	e7e4      	b.n	8009e24 <_vfiprintf_r+0x208>
 8009e5a:	bf00      	nop
 8009e5c:	0800b380 	.word	0x0800b380
 8009e60:	0800b3a0 	.word	0x0800b3a0
 8009e64:	0800b360 	.word	0x0800b360
 8009e68:	0800b32a 	.word	0x0800b32a
 8009e6c:	0800b330 	.word	0x0800b330
 8009e70:	0800b334 	.word	0x0800b334
 8009e74:	00000000 	.word	0x00000000
 8009e78:	08009bf7 	.word	0x08009bf7

08009e7c <_printf_common>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	4616      	mov	r6, r2
 8009e82:	4699      	mov	r9, r3
 8009e84:	688a      	ldr	r2, [r1, #8]
 8009e86:	690b      	ldr	r3, [r1, #16]
 8009e88:	4607      	mov	r7, r0
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	bfb8      	it	lt
 8009e8e:	4613      	movlt	r3, r2
 8009e90:	6033      	str	r3, [r6, #0]
 8009e92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e96:	460c      	mov	r4, r1
 8009e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e9c:	b10a      	cbz	r2, 8009ea2 <_printf_common+0x26>
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	6033      	str	r3, [r6, #0]
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	0699      	lsls	r1, r3, #26
 8009ea6:	bf42      	ittt	mi
 8009ea8:	6833      	ldrmi	r3, [r6, #0]
 8009eaa:	3302      	addmi	r3, #2
 8009eac:	6033      	strmi	r3, [r6, #0]
 8009eae:	6825      	ldr	r5, [r4, #0]
 8009eb0:	f015 0506 	ands.w	r5, r5, #6
 8009eb4:	d106      	bne.n	8009ec4 <_printf_common+0x48>
 8009eb6:	f104 0a19 	add.w	sl, r4, #25
 8009eba:	68e3      	ldr	r3, [r4, #12]
 8009ebc:	6832      	ldr	r2, [r6, #0]
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dc28      	bgt.n	8009f16 <_printf_common+0x9a>
 8009ec4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ec8:	1e13      	subs	r3, r2, #0
 8009eca:	6822      	ldr	r2, [r4, #0]
 8009ecc:	bf18      	it	ne
 8009ece:	2301      	movne	r3, #1
 8009ed0:	0692      	lsls	r2, r2, #26
 8009ed2:	d42d      	bmi.n	8009f30 <_printf_common+0xb4>
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009edc:	47c0      	blx	r8
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d020      	beq.n	8009f24 <_printf_common+0xa8>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	68e5      	ldr	r5, [r4, #12]
 8009ee6:	f003 0306 	and.w	r3, r3, #6
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	bf18      	it	ne
 8009eee:	2500      	movne	r5, #0
 8009ef0:	6832      	ldr	r2, [r6, #0]
 8009ef2:	f04f 0600 	mov.w	r6, #0
 8009ef6:	68a3      	ldr	r3, [r4, #8]
 8009ef8:	bf08      	it	eq
 8009efa:	1aad      	subeq	r5, r5, r2
 8009efc:	6922      	ldr	r2, [r4, #16]
 8009efe:	bf08      	it	eq
 8009f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f04:	4293      	cmp	r3, r2
 8009f06:	bfc4      	itt	gt
 8009f08:	1a9b      	subgt	r3, r3, r2
 8009f0a:	18ed      	addgt	r5, r5, r3
 8009f0c:	341a      	adds	r4, #26
 8009f0e:	42b5      	cmp	r5, r6
 8009f10:	d11a      	bne.n	8009f48 <_printf_common+0xcc>
 8009f12:	2000      	movs	r0, #0
 8009f14:	e008      	b.n	8009f28 <_printf_common+0xac>
 8009f16:	2301      	movs	r3, #1
 8009f18:	4652      	mov	r2, sl
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	47c0      	blx	r8
 8009f20:	3001      	adds	r0, #1
 8009f22:	d103      	bne.n	8009f2c <_printf_common+0xb0>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	3501      	adds	r5, #1
 8009f2e:	e7c4      	b.n	8009eba <_printf_common+0x3e>
 8009f30:	2030      	movs	r0, #48	; 0x30
 8009f32:	18e1      	adds	r1, r4, r3
 8009f34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f3e:	4422      	add	r2, r4
 8009f40:	3302      	adds	r3, #2
 8009f42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f46:	e7c5      	b.n	8009ed4 <_printf_common+0x58>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	4638      	mov	r0, r7
 8009f50:	47c0      	blx	r8
 8009f52:	3001      	adds	r0, #1
 8009f54:	d0e6      	beq.n	8009f24 <_printf_common+0xa8>
 8009f56:	3601      	adds	r6, #1
 8009f58:	e7d9      	b.n	8009f0e <_printf_common+0x92>
	...

08009f5c <_printf_i>:
 8009f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f60:	7e0f      	ldrb	r7, [r1, #24]
 8009f62:	4691      	mov	r9, r2
 8009f64:	2f78      	cmp	r7, #120	; 0x78
 8009f66:	4680      	mov	r8, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	469a      	mov	sl, r3
 8009f6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f72:	d807      	bhi.n	8009f84 <_printf_i+0x28>
 8009f74:	2f62      	cmp	r7, #98	; 0x62
 8009f76:	d80a      	bhi.n	8009f8e <_printf_i+0x32>
 8009f78:	2f00      	cmp	r7, #0
 8009f7a:	f000 80d9 	beq.w	800a130 <_printf_i+0x1d4>
 8009f7e:	2f58      	cmp	r7, #88	; 0x58
 8009f80:	f000 80a4 	beq.w	800a0cc <_printf_i+0x170>
 8009f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f8c:	e03a      	b.n	800a004 <_printf_i+0xa8>
 8009f8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f92:	2b15      	cmp	r3, #21
 8009f94:	d8f6      	bhi.n	8009f84 <_printf_i+0x28>
 8009f96:	a101      	add	r1, pc, #4	; (adr r1, 8009f9c <_printf_i+0x40>)
 8009f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f9c:	08009ff5 	.word	0x08009ff5
 8009fa0:	0800a009 	.word	0x0800a009
 8009fa4:	08009f85 	.word	0x08009f85
 8009fa8:	08009f85 	.word	0x08009f85
 8009fac:	08009f85 	.word	0x08009f85
 8009fb0:	08009f85 	.word	0x08009f85
 8009fb4:	0800a009 	.word	0x0800a009
 8009fb8:	08009f85 	.word	0x08009f85
 8009fbc:	08009f85 	.word	0x08009f85
 8009fc0:	08009f85 	.word	0x08009f85
 8009fc4:	08009f85 	.word	0x08009f85
 8009fc8:	0800a117 	.word	0x0800a117
 8009fcc:	0800a039 	.word	0x0800a039
 8009fd0:	0800a0f9 	.word	0x0800a0f9
 8009fd4:	08009f85 	.word	0x08009f85
 8009fd8:	08009f85 	.word	0x08009f85
 8009fdc:	0800a139 	.word	0x0800a139
 8009fe0:	08009f85 	.word	0x08009f85
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	08009f85 	.word	0x08009f85
 8009fec:	08009f85 	.word	0x08009f85
 8009ff0:	0800a101 	.word	0x0800a101
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	1d1a      	adds	r2, r3, #4
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	602a      	str	r2, [r5, #0]
 8009ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a000:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a004:	2301      	movs	r3, #1
 800a006:	e0a4      	b.n	800a152 <_printf_i+0x1f6>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	6829      	ldr	r1, [r5, #0]
 800a00c:	0606      	lsls	r6, r0, #24
 800a00e:	f101 0304 	add.w	r3, r1, #4
 800a012:	d50a      	bpl.n	800a02a <_printf_i+0xce>
 800a014:	680e      	ldr	r6, [r1, #0]
 800a016:	602b      	str	r3, [r5, #0]
 800a018:	2e00      	cmp	r6, #0
 800a01a:	da03      	bge.n	800a024 <_printf_i+0xc8>
 800a01c:	232d      	movs	r3, #45	; 0x2d
 800a01e:	4276      	negs	r6, r6
 800a020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a024:	230a      	movs	r3, #10
 800a026:	485e      	ldr	r0, [pc, #376]	; (800a1a0 <_printf_i+0x244>)
 800a028:	e019      	b.n	800a05e <_printf_i+0x102>
 800a02a:	680e      	ldr	r6, [r1, #0]
 800a02c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a030:	602b      	str	r3, [r5, #0]
 800a032:	bf18      	it	ne
 800a034:	b236      	sxthne	r6, r6
 800a036:	e7ef      	b.n	800a018 <_printf_i+0xbc>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	6820      	ldr	r0, [r4, #0]
 800a03c:	1d19      	adds	r1, r3, #4
 800a03e:	6029      	str	r1, [r5, #0]
 800a040:	0601      	lsls	r1, r0, #24
 800a042:	d501      	bpl.n	800a048 <_printf_i+0xec>
 800a044:	681e      	ldr	r6, [r3, #0]
 800a046:	e002      	b.n	800a04e <_printf_i+0xf2>
 800a048:	0646      	lsls	r6, r0, #25
 800a04a:	d5fb      	bpl.n	800a044 <_printf_i+0xe8>
 800a04c:	881e      	ldrh	r6, [r3, #0]
 800a04e:	2f6f      	cmp	r7, #111	; 0x6f
 800a050:	bf0c      	ite	eq
 800a052:	2308      	moveq	r3, #8
 800a054:	230a      	movne	r3, #10
 800a056:	4852      	ldr	r0, [pc, #328]	; (800a1a0 <_printf_i+0x244>)
 800a058:	2100      	movs	r1, #0
 800a05a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a05e:	6865      	ldr	r5, [r4, #4]
 800a060:	2d00      	cmp	r5, #0
 800a062:	bfa8      	it	ge
 800a064:	6821      	ldrge	r1, [r4, #0]
 800a066:	60a5      	str	r5, [r4, #8]
 800a068:	bfa4      	itt	ge
 800a06a:	f021 0104 	bicge.w	r1, r1, #4
 800a06e:	6021      	strge	r1, [r4, #0]
 800a070:	b90e      	cbnz	r6, 800a076 <_printf_i+0x11a>
 800a072:	2d00      	cmp	r5, #0
 800a074:	d04d      	beq.n	800a112 <_printf_i+0x1b6>
 800a076:	4615      	mov	r5, r2
 800a078:	fbb6 f1f3 	udiv	r1, r6, r3
 800a07c:	fb03 6711 	mls	r7, r3, r1, r6
 800a080:	5dc7      	ldrb	r7, [r0, r7]
 800a082:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a086:	4637      	mov	r7, r6
 800a088:	42bb      	cmp	r3, r7
 800a08a:	460e      	mov	r6, r1
 800a08c:	d9f4      	bls.n	800a078 <_printf_i+0x11c>
 800a08e:	2b08      	cmp	r3, #8
 800a090:	d10b      	bne.n	800a0aa <_printf_i+0x14e>
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	07de      	lsls	r6, r3, #31
 800a096:	d508      	bpl.n	800a0aa <_printf_i+0x14e>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	6861      	ldr	r1, [r4, #4]
 800a09c:	4299      	cmp	r1, r3
 800a09e:	bfde      	ittt	le
 800a0a0:	2330      	movle	r3, #48	; 0x30
 800a0a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0aa:	1b52      	subs	r2, r2, r5
 800a0ac:	6122      	str	r2, [r4, #16]
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	f8cd a000 	str.w	sl, [sp]
 800a0b8:	aa03      	add	r2, sp, #12
 800a0ba:	f7ff fedf 	bl	8009e7c <_printf_common>
 800a0be:	3001      	adds	r0, #1
 800a0c0:	d14c      	bne.n	800a15c <_printf_i+0x200>
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	b004      	add	sp, #16
 800a0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0cc:	4834      	ldr	r0, [pc, #208]	; (800a1a0 <_printf_i+0x244>)
 800a0ce:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0d2:	6829      	ldr	r1, [r5, #0]
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0da:	6029      	str	r1, [r5, #0]
 800a0dc:	061d      	lsls	r5, r3, #24
 800a0de:	d514      	bpl.n	800a10a <_printf_i+0x1ae>
 800a0e0:	07df      	lsls	r7, r3, #31
 800a0e2:	bf44      	itt	mi
 800a0e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a0e8:	6023      	strmi	r3, [r4, #0]
 800a0ea:	b91e      	cbnz	r6, 800a0f4 <_printf_i+0x198>
 800a0ec:	6823      	ldr	r3, [r4, #0]
 800a0ee:	f023 0320 	bic.w	r3, r3, #32
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	e7af      	b.n	800a058 <_printf_i+0xfc>
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	f043 0320 	orr.w	r3, r3, #32
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	2378      	movs	r3, #120	; 0x78
 800a102:	4828      	ldr	r0, [pc, #160]	; (800a1a4 <_printf_i+0x248>)
 800a104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a108:	e7e3      	b.n	800a0d2 <_printf_i+0x176>
 800a10a:	0659      	lsls	r1, r3, #25
 800a10c:	bf48      	it	mi
 800a10e:	b2b6      	uxthmi	r6, r6
 800a110:	e7e6      	b.n	800a0e0 <_printf_i+0x184>
 800a112:	4615      	mov	r5, r2
 800a114:	e7bb      	b.n	800a08e <_printf_i+0x132>
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	6826      	ldr	r6, [r4, #0]
 800a11a:	1d18      	adds	r0, r3, #4
 800a11c:	6961      	ldr	r1, [r4, #20]
 800a11e:	6028      	str	r0, [r5, #0]
 800a120:	0635      	lsls	r5, r6, #24
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	d501      	bpl.n	800a12a <_printf_i+0x1ce>
 800a126:	6019      	str	r1, [r3, #0]
 800a128:	e002      	b.n	800a130 <_printf_i+0x1d4>
 800a12a:	0670      	lsls	r0, r6, #25
 800a12c:	d5fb      	bpl.n	800a126 <_printf_i+0x1ca>
 800a12e:	8019      	strh	r1, [r3, #0]
 800a130:	2300      	movs	r3, #0
 800a132:	4615      	mov	r5, r2
 800a134:	6123      	str	r3, [r4, #16]
 800a136:	e7ba      	b.n	800a0ae <_printf_i+0x152>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	2100      	movs	r1, #0
 800a13c:	1d1a      	adds	r2, r3, #4
 800a13e:	602a      	str	r2, [r5, #0]
 800a140:	681d      	ldr	r5, [r3, #0]
 800a142:	6862      	ldr	r2, [r4, #4]
 800a144:	4628      	mov	r0, r5
 800a146:	f000 fb23 	bl	800a790 <memchr>
 800a14a:	b108      	cbz	r0, 800a150 <_printf_i+0x1f4>
 800a14c:	1b40      	subs	r0, r0, r5
 800a14e:	6060      	str	r0, [r4, #4]
 800a150:	6863      	ldr	r3, [r4, #4]
 800a152:	6123      	str	r3, [r4, #16]
 800a154:	2300      	movs	r3, #0
 800a156:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a15a:	e7a8      	b.n	800a0ae <_printf_i+0x152>
 800a15c:	462a      	mov	r2, r5
 800a15e:	4649      	mov	r1, r9
 800a160:	4640      	mov	r0, r8
 800a162:	6923      	ldr	r3, [r4, #16]
 800a164:	47d0      	blx	sl
 800a166:	3001      	adds	r0, #1
 800a168:	d0ab      	beq.n	800a0c2 <_printf_i+0x166>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	079b      	lsls	r3, r3, #30
 800a16e:	d413      	bmi.n	800a198 <_printf_i+0x23c>
 800a170:	68e0      	ldr	r0, [r4, #12]
 800a172:	9b03      	ldr	r3, [sp, #12]
 800a174:	4298      	cmp	r0, r3
 800a176:	bfb8      	it	lt
 800a178:	4618      	movlt	r0, r3
 800a17a:	e7a4      	b.n	800a0c6 <_printf_i+0x16a>
 800a17c:	2301      	movs	r3, #1
 800a17e:	4632      	mov	r2, r6
 800a180:	4649      	mov	r1, r9
 800a182:	4640      	mov	r0, r8
 800a184:	47d0      	blx	sl
 800a186:	3001      	adds	r0, #1
 800a188:	d09b      	beq.n	800a0c2 <_printf_i+0x166>
 800a18a:	3501      	adds	r5, #1
 800a18c:	68e3      	ldr	r3, [r4, #12]
 800a18e:	9903      	ldr	r1, [sp, #12]
 800a190:	1a5b      	subs	r3, r3, r1
 800a192:	42ab      	cmp	r3, r5
 800a194:	dcf2      	bgt.n	800a17c <_printf_i+0x220>
 800a196:	e7eb      	b.n	800a170 <_printf_i+0x214>
 800a198:	2500      	movs	r5, #0
 800a19a:	f104 0619 	add.w	r6, r4, #25
 800a19e:	e7f5      	b.n	800a18c <_printf_i+0x230>
 800a1a0:	0800b33b 	.word	0x0800b33b
 800a1a4:	0800b34c 	.word	0x0800b34c

0800a1a8 <_sbrk_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4d05      	ldr	r5, [pc, #20]	; (800a1c4 <_sbrk_r+0x1c>)
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	4608      	mov	r0, r1
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	f7f8 fd56 	bl	8002c64 <_sbrk>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d102      	bne.n	800a1c2 <_sbrk_r+0x1a>
 800a1bc:	682b      	ldr	r3, [r5, #0]
 800a1be:	b103      	cbz	r3, 800a1c2 <_sbrk_r+0x1a>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	200015c0 	.word	0x200015c0

0800a1c8 <__swbuf_r>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	460e      	mov	r6, r1
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	b118      	cbz	r0, 800a1da <__swbuf_r+0x12>
 800a1d2:	6983      	ldr	r3, [r0, #24]
 800a1d4:	b90b      	cbnz	r3, 800a1da <__swbuf_r+0x12>
 800a1d6:	f000 f9d5 	bl	800a584 <__sinit>
 800a1da:	4b21      	ldr	r3, [pc, #132]	; (800a260 <__swbuf_r+0x98>)
 800a1dc:	429c      	cmp	r4, r3
 800a1de:	d12b      	bne.n	800a238 <__swbuf_r+0x70>
 800a1e0:	686c      	ldr	r4, [r5, #4]
 800a1e2:	69a3      	ldr	r3, [r4, #24]
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	071a      	lsls	r2, r3, #28
 800a1ea:	d52f      	bpl.n	800a24c <__swbuf_r+0x84>
 800a1ec:	6923      	ldr	r3, [r4, #16]
 800a1ee:	b36b      	cbz	r3, 800a24c <__swbuf_r+0x84>
 800a1f0:	6923      	ldr	r3, [r4, #16]
 800a1f2:	6820      	ldr	r0, [r4, #0]
 800a1f4:	b2f6      	uxtb	r6, r6
 800a1f6:	1ac0      	subs	r0, r0, r3
 800a1f8:	6963      	ldr	r3, [r4, #20]
 800a1fa:	4637      	mov	r7, r6
 800a1fc:	4283      	cmp	r3, r0
 800a1fe:	dc04      	bgt.n	800a20a <__swbuf_r+0x42>
 800a200:	4621      	mov	r1, r4
 800a202:	4628      	mov	r0, r5
 800a204:	f000 f92a 	bl	800a45c <_fflush_r>
 800a208:	bb30      	cbnz	r0, 800a258 <__swbuf_r+0x90>
 800a20a:	68a3      	ldr	r3, [r4, #8]
 800a20c:	3001      	adds	r0, #1
 800a20e:	3b01      	subs	r3, #1
 800a210:	60a3      	str	r3, [r4, #8]
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	6022      	str	r2, [r4, #0]
 800a218:	701e      	strb	r6, [r3, #0]
 800a21a:	6963      	ldr	r3, [r4, #20]
 800a21c:	4283      	cmp	r3, r0
 800a21e:	d004      	beq.n	800a22a <__swbuf_r+0x62>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	07db      	lsls	r3, r3, #31
 800a224:	d506      	bpl.n	800a234 <__swbuf_r+0x6c>
 800a226:	2e0a      	cmp	r6, #10
 800a228:	d104      	bne.n	800a234 <__swbuf_r+0x6c>
 800a22a:	4621      	mov	r1, r4
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 f915 	bl	800a45c <_fflush_r>
 800a232:	b988      	cbnz	r0, 800a258 <__swbuf_r+0x90>
 800a234:	4638      	mov	r0, r7
 800a236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a238:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <__swbuf_r+0x9c>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d101      	bne.n	800a242 <__swbuf_r+0x7a>
 800a23e:	68ac      	ldr	r4, [r5, #8]
 800a240:	e7cf      	b.n	800a1e2 <__swbuf_r+0x1a>
 800a242:	4b09      	ldr	r3, [pc, #36]	; (800a268 <__swbuf_r+0xa0>)
 800a244:	429c      	cmp	r4, r3
 800a246:	bf08      	it	eq
 800a248:	68ec      	ldreq	r4, [r5, #12]
 800a24a:	e7ca      	b.n	800a1e2 <__swbuf_r+0x1a>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f80c 	bl	800a26c <__swsetup_r>
 800a254:	2800      	cmp	r0, #0
 800a256:	d0cb      	beq.n	800a1f0 <__swbuf_r+0x28>
 800a258:	f04f 37ff 	mov.w	r7, #4294967295
 800a25c:	e7ea      	b.n	800a234 <__swbuf_r+0x6c>
 800a25e:	bf00      	nop
 800a260:	0800b380 	.word	0x0800b380
 800a264:	0800b3a0 	.word	0x0800b3a0
 800a268:	0800b360 	.word	0x0800b360

0800a26c <__swsetup_r>:
 800a26c:	4b32      	ldr	r3, [pc, #200]	; (800a338 <__swsetup_r+0xcc>)
 800a26e:	b570      	push	{r4, r5, r6, lr}
 800a270:	681d      	ldr	r5, [r3, #0]
 800a272:	4606      	mov	r6, r0
 800a274:	460c      	mov	r4, r1
 800a276:	b125      	cbz	r5, 800a282 <__swsetup_r+0x16>
 800a278:	69ab      	ldr	r3, [r5, #24]
 800a27a:	b913      	cbnz	r3, 800a282 <__swsetup_r+0x16>
 800a27c:	4628      	mov	r0, r5
 800a27e:	f000 f981 	bl	800a584 <__sinit>
 800a282:	4b2e      	ldr	r3, [pc, #184]	; (800a33c <__swsetup_r+0xd0>)
 800a284:	429c      	cmp	r4, r3
 800a286:	d10f      	bne.n	800a2a8 <__swsetup_r+0x3c>
 800a288:	686c      	ldr	r4, [r5, #4]
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a290:	0719      	lsls	r1, r3, #28
 800a292:	d42c      	bmi.n	800a2ee <__swsetup_r+0x82>
 800a294:	06dd      	lsls	r5, r3, #27
 800a296:	d411      	bmi.n	800a2bc <__swsetup_r+0x50>
 800a298:	2309      	movs	r3, #9
 800a29a:	6033      	str	r3, [r6, #0]
 800a29c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	81a3      	strh	r3, [r4, #12]
 800a2a6:	e03e      	b.n	800a326 <__swsetup_r+0xba>
 800a2a8:	4b25      	ldr	r3, [pc, #148]	; (800a340 <__swsetup_r+0xd4>)
 800a2aa:	429c      	cmp	r4, r3
 800a2ac:	d101      	bne.n	800a2b2 <__swsetup_r+0x46>
 800a2ae:	68ac      	ldr	r4, [r5, #8]
 800a2b0:	e7eb      	b.n	800a28a <__swsetup_r+0x1e>
 800a2b2:	4b24      	ldr	r3, [pc, #144]	; (800a344 <__swsetup_r+0xd8>)
 800a2b4:	429c      	cmp	r4, r3
 800a2b6:	bf08      	it	eq
 800a2b8:	68ec      	ldreq	r4, [r5, #12]
 800a2ba:	e7e6      	b.n	800a28a <__swsetup_r+0x1e>
 800a2bc:	0758      	lsls	r0, r3, #29
 800a2be:	d512      	bpl.n	800a2e6 <__swsetup_r+0x7a>
 800a2c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2c2:	b141      	cbz	r1, 800a2d6 <__swsetup_r+0x6a>
 800a2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2c8:	4299      	cmp	r1, r3
 800a2ca:	d002      	beq.n	800a2d2 <__swsetup_r+0x66>
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f7ff fba1 	bl	8009a14 <_free_r>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	6063      	str	r3, [r4, #4]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	6023      	str	r3, [r4, #0]
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f043 0308 	orr.w	r3, r3, #8
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	6923      	ldr	r3, [r4, #16]
 800a2f0:	b94b      	cbnz	r3, 800a306 <__swsetup_r+0x9a>
 800a2f2:	89a3      	ldrh	r3, [r4, #12]
 800a2f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2fc:	d003      	beq.n	800a306 <__swsetup_r+0x9a>
 800a2fe:	4621      	mov	r1, r4
 800a300:	4630      	mov	r0, r6
 800a302:	f000 fa05 	bl	800a710 <__smakebuf_r>
 800a306:	89a0      	ldrh	r0, [r4, #12]
 800a308:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a30c:	f010 0301 	ands.w	r3, r0, #1
 800a310:	d00a      	beq.n	800a328 <__swsetup_r+0xbc>
 800a312:	2300      	movs	r3, #0
 800a314:	60a3      	str	r3, [r4, #8]
 800a316:	6963      	ldr	r3, [r4, #20]
 800a318:	425b      	negs	r3, r3
 800a31a:	61a3      	str	r3, [r4, #24]
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	b943      	cbnz	r3, 800a332 <__swsetup_r+0xc6>
 800a320:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a324:	d1ba      	bne.n	800a29c <__swsetup_r+0x30>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	0781      	lsls	r1, r0, #30
 800a32a:	bf58      	it	pl
 800a32c:	6963      	ldrpl	r3, [r4, #20]
 800a32e:	60a3      	str	r3, [r4, #8]
 800a330:	e7f4      	b.n	800a31c <__swsetup_r+0xb0>
 800a332:	2000      	movs	r0, #0
 800a334:	e7f7      	b.n	800a326 <__swsetup_r+0xba>
 800a336:	bf00      	nop
 800a338:	2000001c 	.word	0x2000001c
 800a33c:	0800b380 	.word	0x0800b380
 800a340:	0800b3a0 	.word	0x0800b3a0
 800a344:	0800b360 	.word	0x0800b360

0800a348 <abort>:
 800a348:	2006      	movs	r0, #6
 800a34a:	b508      	push	{r3, lr}
 800a34c:	f000 fa62 	bl	800a814 <raise>
 800a350:	2001      	movs	r0, #1
 800a352:	f7f8 fc14 	bl	8002b7e <_exit>
	...

0800a358 <__sflush_r>:
 800a358:	898a      	ldrh	r2, [r1, #12]
 800a35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35c:	4605      	mov	r5, r0
 800a35e:	0710      	lsls	r0, r2, #28
 800a360:	460c      	mov	r4, r1
 800a362:	d457      	bmi.n	800a414 <__sflush_r+0xbc>
 800a364:	684b      	ldr	r3, [r1, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	dc04      	bgt.n	800a374 <__sflush_r+0x1c>
 800a36a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dc01      	bgt.n	800a374 <__sflush_r+0x1c>
 800a370:	2000      	movs	r0, #0
 800a372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a376:	2e00      	cmp	r6, #0
 800a378:	d0fa      	beq.n	800a370 <__sflush_r+0x18>
 800a37a:	2300      	movs	r3, #0
 800a37c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a380:	682f      	ldr	r7, [r5, #0]
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	d032      	beq.n	800a3ec <__sflush_r+0x94>
 800a386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	075a      	lsls	r2, r3, #29
 800a38c:	d505      	bpl.n	800a39a <__sflush_r+0x42>
 800a38e:	6863      	ldr	r3, [r4, #4]
 800a390:	1ac0      	subs	r0, r0, r3
 800a392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a394:	b10b      	cbz	r3, 800a39a <__sflush_r+0x42>
 800a396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a398:	1ac0      	subs	r0, r0, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	4602      	mov	r2, r0
 800a39e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	6a21      	ldr	r1, [r4, #32]
 800a3a4:	47b0      	blx	r6
 800a3a6:	1c43      	adds	r3, r0, #1
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	d106      	bne.n	800a3ba <__sflush_r+0x62>
 800a3ac:	6829      	ldr	r1, [r5, #0]
 800a3ae:	291d      	cmp	r1, #29
 800a3b0:	d82c      	bhi.n	800a40c <__sflush_r+0xb4>
 800a3b2:	4a29      	ldr	r2, [pc, #164]	; (800a458 <__sflush_r+0x100>)
 800a3b4:	40ca      	lsrs	r2, r1
 800a3b6:	07d6      	lsls	r6, r2, #31
 800a3b8:	d528      	bpl.n	800a40c <__sflush_r+0xb4>
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	6062      	str	r2, [r4, #4]
 800a3be:	6922      	ldr	r2, [r4, #16]
 800a3c0:	04d9      	lsls	r1, r3, #19
 800a3c2:	6022      	str	r2, [r4, #0]
 800a3c4:	d504      	bpl.n	800a3d0 <__sflush_r+0x78>
 800a3c6:	1c42      	adds	r2, r0, #1
 800a3c8:	d101      	bne.n	800a3ce <__sflush_r+0x76>
 800a3ca:	682b      	ldr	r3, [r5, #0]
 800a3cc:	b903      	cbnz	r3, 800a3d0 <__sflush_r+0x78>
 800a3ce:	6560      	str	r0, [r4, #84]	; 0x54
 800a3d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3d2:	602f      	str	r7, [r5, #0]
 800a3d4:	2900      	cmp	r1, #0
 800a3d6:	d0cb      	beq.n	800a370 <__sflush_r+0x18>
 800a3d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3dc:	4299      	cmp	r1, r3
 800a3de:	d002      	beq.n	800a3e6 <__sflush_r+0x8e>
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f7ff fb17 	bl	8009a14 <_free_r>
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3ea:	e7c2      	b.n	800a372 <__sflush_r+0x1a>
 800a3ec:	6a21      	ldr	r1, [r4, #32]
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b0      	blx	r6
 800a3f4:	1c41      	adds	r1, r0, #1
 800a3f6:	d1c7      	bne.n	800a388 <__sflush_r+0x30>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0c4      	beq.n	800a388 <__sflush_r+0x30>
 800a3fe:	2b1d      	cmp	r3, #29
 800a400:	d001      	beq.n	800a406 <__sflush_r+0xae>
 800a402:	2b16      	cmp	r3, #22
 800a404:	d101      	bne.n	800a40a <__sflush_r+0xb2>
 800a406:	602f      	str	r7, [r5, #0]
 800a408:	e7b2      	b.n	800a370 <__sflush_r+0x18>
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	e7ae      	b.n	800a372 <__sflush_r+0x1a>
 800a414:	690f      	ldr	r7, [r1, #16]
 800a416:	2f00      	cmp	r7, #0
 800a418:	d0aa      	beq.n	800a370 <__sflush_r+0x18>
 800a41a:	0793      	lsls	r3, r2, #30
 800a41c:	bf18      	it	ne
 800a41e:	2300      	movne	r3, #0
 800a420:	680e      	ldr	r6, [r1, #0]
 800a422:	bf08      	it	eq
 800a424:	694b      	ldreq	r3, [r1, #20]
 800a426:	1bf6      	subs	r6, r6, r7
 800a428:	600f      	str	r7, [r1, #0]
 800a42a:	608b      	str	r3, [r1, #8]
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	dd9f      	ble.n	800a370 <__sflush_r+0x18>
 800a430:	4633      	mov	r3, r6
 800a432:	463a      	mov	r2, r7
 800a434:	4628      	mov	r0, r5
 800a436:	6a21      	ldr	r1, [r4, #32]
 800a438:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a43c:	47e0      	blx	ip
 800a43e:	2800      	cmp	r0, #0
 800a440:	dc06      	bgt.n	800a450 <__sflush_r+0xf8>
 800a442:	89a3      	ldrh	r3, [r4, #12]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a44c:	81a3      	strh	r3, [r4, #12]
 800a44e:	e790      	b.n	800a372 <__sflush_r+0x1a>
 800a450:	4407      	add	r7, r0
 800a452:	1a36      	subs	r6, r6, r0
 800a454:	e7ea      	b.n	800a42c <__sflush_r+0xd4>
 800a456:	bf00      	nop
 800a458:	20400001 	.word	0x20400001

0800a45c <_fflush_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	690b      	ldr	r3, [r1, #16]
 800a460:	4605      	mov	r5, r0
 800a462:	460c      	mov	r4, r1
 800a464:	b913      	cbnz	r3, 800a46c <_fflush_r+0x10>
 800a466:	2500      	movs	r5, #0
 800a468:	4628      	mov	r0, r5
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	b118      	cbz	r0, 800a476 <_fflush_r+0x1a>
 800a46e:	6983      	ldr	r3, [r0, #24]
 800a470:	b90b      	cbnz	r3, 800a476 <_fflush_r+0x1a>
 800a472:	f000 f887 	bl	800a584 <__sinit>
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <_fflush_r+0x6c>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	d11b      	bne.n	800a4b4 <_fflush_r+0x58>
 800a47c:	686c      	ldr	r4, [r5, #4]
 800a47e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d0ef      	beq.n	800a466 <_fflush_r+0xa>
 800a486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a488:	07d0      	lsls	r0, r2, #31
 800a48a:	d404      	bmi.n	800a496 <_fflush_r+0x3a>
 800a48c:	0599      	lsls	r1, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_fflush_r+0x3a>
 800a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a492:	f000 f915 	bl	800a6c0 <__retarget_lock_acquire_recursive>
 800a496:	4628      	mov	r0, r5
 800a498:	4621      	mov	r1, r4
 800a49a:	f7ff ff5d 	bl	800a358 <__sflush_r>
 800a49e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	07da      	lsls	r2, r3, #31
 800a4a4:	d4e0      	bmi.n	800a468 <_fflush_r+0xc>
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	059b      	lsls	r3, r3, #22
 800a4aa:	d4dd      	bmi.n	800a468 <_fflush_r+0xc>
 800a4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ae:	f000 f908 	bl	800a6c2 <__retarget_lock_release_recursive>
 800a4b2:	e7d9      	b.n	800a468 <_fflush_r+0xc>
 800a4b4:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <_fflush_r+0x70>)
 800a4b6:	429c      	cmp	r4, r3
 800a4b8:	d101      	bne.n	800a4be <_fflush_r+0x62>
 800a4ba:	68ac      	ldr	r4, [r5, #8]
 800a4bc:	e7df      	b.n	800a47e <_fflush_r+0x22>
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <_fflush_r+0x74>)
 800a4c0:	429c      	cmp	r4, r3
 800a4c2:	bf08      	it	eq
 800a4c4:	68ec      	ldreq	r4, [r5, #12]
 800a4c6:	e7da      	b.n	800a47e <_fflush_r+0x22>
 800a4c8:	0800b380 	.word	0x0800b380
 800a4cc:	0800b3a0 	.word	0x0800b3a0
 800a4d0:	0800b360 	.word	0x0800b360

0800a4d4 <std>:
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	b510      	push	{r4, lr}
 800a4d8:	4604      	mov	r4, r0
 800a4da:	e9c0 3300 	strd	r3, r3, [r0]
 800a4de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4e2:	6083      	str	r3, [r0, #8]
 800a4e4:	8181      	strh	r1, [r0, #12]
 800a4e6:	6643      	str	r3, [r0, #100]	; 0x64
 800a4e8:	81c2      	strh	r2, [r0, #14]
 800a4ea:	6183      	str	r3, [r0, #24]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	2208      	movs	r2, #8
 800a4f0:	305c      	adds	r0, #92	; 0x5c
 800a4f2:	f7ff fa11 	bl	8009918 <memset>
 800a4f6:	4b05      	ldr	r3, [pc, #20]	; (800a50c <std+0x38>)
 800a4f8:	6224      	str	r4, [r4, #32]
 800a4fa:	6263      	str	r3, [r4, #36]	; 0x24
 800a4fc:	4b04      	ldr	r3, [pc, #16]	; (800a510 <std+0x3c>)
 800a4fe:	62a3      	str	r3, [r4, #40]	; 0x28
 800a500:	4b04      	ldr	r3, [pc, #16]	; (800a514 <std+0x40>)
 800a502:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a504:	4b04      	ldr	r3, [pc, #16]	; (800a518 <std+0x44>)
 800a506:	6323      	str	r3, [r4, #48]	; 0x30
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	bf00      	nop
 800a50c:	0800a84d 	.word	0x0800a84d
 800a510:	0800a86f 	.word	0x0800a86f
 800a514:	0800a8a7 	.word	0x0800a8a7
 800a518:	0800a8cb 	.word	0x0800a8cb

0800a51c <_cleanup_r>:
 800a51c:	4901      	ldr	r1, [pc, #4]	; (800a524 <_cleanup_r+0x8>)
 800a51e:	f000 b8af 	b.w	800a680 <_fwalk_reent>
 800a522:	bf00      	nop
 800a524:	0800a45d 	.word	0x0800a45d

0800a528 <__sfmoreglue>:
 800a528:	2268      	movs	r2, #104	; 0x68
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	1e4d      	subs	r5, r1, #1
 800a52e:	4355      	muls	r5, r2
 800a530:	460e      	mov	r6, r1
 800a532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a536:	f7ff fad5 	bl	8009ae4 <_malloc_r>
 800a53a:	4604      	mov	r4, r0
 800a53c:	b140      	cbz	r0, 800a550 <__sfmoreglue+0x28>
 800a53e:	2100      	movs	r1, #0
 800a540:	e9c0 1600 	strd	r1, r6, [r0]
 800a544:	300c      	adds	r0, #12
 800a546:	60a0      	str	r0, [r4, #8]
 800a548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a54c:	f7ff f9e4 	bl	8009918 <memset>
 800a550:	4620      	mov	r0, r4
 800a552:	bd70      	pop	{r4, r5, r6, pc}

0800a554 <__sfp_lock_acquire>:
 800a554:	4801      	ldr	r0, [pc, #4]	; (800a55c <__sfp_lock_acquire+0x8>)
 800a556:	f000 b8b3 	b.w	800a6c0 <__retarget_lock_acquire_recursive>
 800a55a:	bf00      	nop
 800a55c:	200015bd 	.word	0x200015bd

0800a560 <__sfp_lock_release>:
 800a560:	4801      	ldr	r0, [pc, #4]	; (800a568 <__sfp_lock_release+0x8>)
 800a562:	f000 b8ae 	b.w	800a6c2 <__retarget_lock_release_recursive>
 800a566:	bf00      	nop
 800a568:	200015bd 	.word	0x200015bd

0800a56c <__sinit_lock_acquire>:
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <__sinit_lock_acquire+0x8>)
 800a56e:	f000 b8a7 	b.w	800a6c0 <__retarget_lock_acquire_recursive>
 800a572:	bf00      	nop
 800a574:	200015be 	.word	0x200015be

0800a578 <__sinit_lock_release>:
 800a578:	4801      	ldr	r0, [pc, #4]	; (800a580 <__sinit_lock_release+0x8>)
 800a57a:	f000 b8a2 	b.w	800a6c2 <__retarget_lock_release_recursive>
 800a57e:	bf00      	nop
 800a580:	200015be 	.word	0x200015be

0800a584 <__sinit>:
 800a584:	b510      	push	{r4, lr}
 800a586:	4604      	mov	r4, r0
 800a588:	f7ff fff0 	bl	800a56c <__sinit_lock_acquire>
 800a58c:	69a3      	ldr	r3, [r4, #24]
 800a58e:	b11b      	cbz	r3, 800a598 <__sinit+0x14>
 800a590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a594:	f7ff bff0 	b.w	800a578 <__sinit_lock_release>
 800a598:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a59c:	6523      	str	r3, [r4, #80]	; 0x50
 800a59e:	4b13      	ldr	r3, [pc, #76]	; (800a5ec <__sinit+0x68>)
 800a5a0:	4a13      	ldr	r2, [pc, #76]	; (800a5f0 <__sinit+0x6c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	bf08      	it	eq
 800a5aa:	2301      	moveq	r3, #1
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	bf08      	it	eq
 800a5b0:	61a3      	streq	r3, [r4, #24]
 800a5b2:	f000 f81f 	bl	800a5f4 <__sfp>
 800a5b6:	6060      	str	r0, [r4, #4]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 f81b 	bl	800a5f4 <__sfp>
 800a5be:	60a0      	str	r0, [r4, #8]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 f817 	bl	800a5f4 <__sfp>
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2104      	movs	r1, #4
 800a5ca:	60e0      	str	r0, [r4, #12]
 800a5cc:	6860      	ldr	r0, [r4, #4]
 800a5ce:	f7ff ff81 	bl	800a4d4 <std>
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	2109      	movs	r1, #9
 800a5d6:	68a0      	ldr	r0, [r4, #8]
 800a5d8:	f7ff ff7c 	bl	800a4d4 <std>
 800a5dc:	2202      	movs	r2, #2
 800a5de:	2112      	movs	r1, #18
 800a5e0:	68e0      	ldr	r0, [r4, #12]
 800a5e2:	f7ff ff77 	bl	800a4d4 <std>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	61a3      	str	r3, [r4, #24]
 800a5ea:	e7d1      	b.n	800a590 <__sinit+0xc>
 800a5ec:	0800b278 	.word	0x0800b278
 800a5f0:	0800a51d 	.word	0x0800a51d

0800a5f4 <__sfp>:
 800a5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f6:	4607      	mov	r7, r0
 800a5f8:	f7ff ffac 	bl	800a554 <__sfp_lock_acquire>
 800a5fc:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <__sfp+0x84>)
 800a5fe:	681e      	ldr	r6, [r3, #0]
 800a600:	69b3      	ldr	r3, [r6, #24]
 800a602:	b913      	cbnz	r3, 800a60a <__sfp+0x16>
 800a604:	4630      	mov	r0, r6
 800a606:	f7ff ffbd 	bl	800a584 <__sinit>
 800a60a:	3648      	adds	r6, #72	; 0x48
 800a60c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a610:	3b01      	subs	r3, #1
 800a612:	d503      	bpl.n	800a61c <__sfp+0x28>
 800a614:	6833      	ldr	r3, [r6, #0]
 800a616:	b30b      	cbz	r3, 800a65c <__sfp+0x68>
 800a618:	6836      	ldr	r6, [r6, #0]
 800a61a:	e7f7      	b.n	800a60c <__sfp+0x18>
 800a61c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a620:	b9d5      	cbnz	r5, 800a658 <__sfp+0x64>
 800a622:	4b16      	ldr	r3, [pc, #88]	; (800a67c <__sfp+0x88>)
 800a624:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a628:	60e3      	str	r3, [r4, #12]
 800a62a:	6665      	str	r5, [r4, #100]	; 0x64
 800a62c:	f000 f847 	bl	800a6be <__retarget_lock_init_recursive>
 800a630:	f7ff ff96 	bl	800a560 <__sfp_lock_release>
 800a634:	2208      	movs	r2, #8
 800a636:	4629      	mov	r1, r5
 800a638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a63c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a640:	6025      	str	r5, [r4, #0]
 800a642:	61a5      	str	r5, [r4, #24]
 800a644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a648:	f7ff f966 	bl	8009918 <memset>
 800a64c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a654:	4620      	mov	r0, r4
 800a656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a658:	3468      	adds	r4, #104	; 0x68
 800a65a:	e7d9      	b.n	800a610 <__sfp+0x1c>
 800a65c:	2104      	movs	r1, #4
 800a65e:	4638      	mov	r0, r7
 800a660:	f7ff ff62 	bl	800a528 <__sfmoreglue>
 800a664:	4604      	mov	r4, r0
 800a666:	6030      	str	r0, [r6, #0]
 800a668:	2800      	cmp	r0, #0
 800a66a:	d1d5      	bne.n	800a618 <__sfp+0x24>
 800a66c:	f7ff ff78 	bl	800a560 <__sfp_lock_release>
 800a670:	230c      	movs	r3, #12
 800a672:	603b      	str	r3, [r7, #0]
 800a674:	e7ee      	b.n	800a654 <__sfp+0x60>
 800a676:	bf00      	nop
 800a678:	0800b278 	.word	0x0800b278
 800a67c:	ffff0001 	.word	0xffff0001

0800a680 <_fwalk_reent>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	4606      	mov	r6, r0
 800a686:	4688      	mov	r8, r1
 800a688:	2700      	movs	r7, #0
 800a68a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a68e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a692:	f1b9 0901 	subs.w	r9, r9, #1
 800a696:	d505      	bpl.n	800a6a4 <_fwalk_reent+0x24>
 800a698:	6824      	ldr	r4, [r4, #0]
 800a69a:	2c00      	cmp	r4, #0
 800a69c:	d1f7      	bne.n	800a68e <_fwalk_reent+0xe>
 800a69e:	4638      	mov	r0, r7
 800a6a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a4:	89ab      	ldrh	r3, [r5, #12]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d907      	bls.n	800a6ba <_fwalk_reent+0x3a>
 800a6aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	d003      	beq.n	800a6ba <_fwalk_reent+0x3a>
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	47c0      	blx	r8
 800a6b8:	4307      	orrs	r7, r0
 800a6ba:	3568      	adds	r5, #104	; 0x68
 800a6bc:	e7e9      	b.n	800a692 <_fwalk_reent+0x12>

0800a6be <__retarget_lock_init_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <__retarget_lock_acquire_recursive>:
 800a6c0:	4770      	bx	lr

0800a6c2 <__retarget_lock_release_recursive>:
 800a6c2:	4770      	bx	lr

0800a6c4 <__swhatbuf_r>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	460e      	mov	r6, r1
 800a6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	2900      	cmp	r1, #0
 800a6d0:	461d      	mov	r5, r3
 800a6d2:	b096      	sub	sp, #88	; 0x58
 800a6d4:	da08      	bge.n	800a6e8 <__swhatbuf_r+0x24>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	061a      	lsls	r2, r3, #24
 800a6e0:	d410      	bmi.n	800a704 <__swhatbuf_r+0x40>
 800a6e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e6:	e00e      	b.n	800a706 <__swhatbuf_r+0x42>
 800a6e8:	466a      	mov	r2, sp
 800a6ea:	f000 f915 	bl	800a918 <_fstat_r>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	dbf1      	blt.n	800a6d6 <__swhatbuf_r+0x12>
 800a6f2:	9a01      	ldr	r2, [sp, #4]
 800a6f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6fc:	425a      	negs	r2, r3
 800a6fe:	415a      	adcs	r2, r3
 800a700:	602a      	str	r2, [r5, #0]
 800a702:	e7ee      	b.n	800a6e2 <__swhatbuf_r+0x1e>
 800a704:	2340      	movs	r3, #64	; 0x40
 800a706:	2000      	movs	r0, #0
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	b016      	add	sp, #88	; 0x58
 800a70c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a710 <__smakebuf_r>:
 800a710:	898b      	ldrh	r3, [r1, #12]
 800a712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a714:	079d      	lsls	r5, r3, #30
 800a716:	4606      	mov	r6, r0
 800a718:	460c      	mov	r4, r1
 800a71a:	d507      	bpl.n	800a72c <__smakebuf_r+0x1c>
 800a71c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	6123      	str	r3, [r4, #16]
 800a724:	2301      	movs	r3, #1
 800a726:	6163      	str	r3, [r4, #20]
 800a728:	b002      	add	sp, #8
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	466a      	mov	r2, sp
 800a72e:	ab01      	add	r3, sp, #4
 800a730:	f7ff ffc8 	bl	800a6c4 <__swhatbuf_r>
 800a734:	9900      	ldr	r1, [sp, #0]
 800a736:	4605      	mov	r5, r0
 800a738:	4630      	mov	r0, r6
 800a73a:	f7ff f9d3 	bl	8009ae4 <_malloc_r>
 800a73e:	b948      	cbnz	r0, 800a754 <__smakebuf_r+0x44>
 800a740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a744:	059a      	lsls	r2, r3, #22
 800a746:	d4ef      	bmi.n	800a728 <__smakebuf_r+0x18>
 800a748:	f023 0303 	bic.w	r3, r3, #3
 800a74c:	f043 0302 	orr.w	r3, r3, #2
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	e7e3      	b.n	800a71c <__smakebuf_r+0xc>
 800a754:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <__smakebuf_r+0x7c>)
 800a756:	62b3      	str	r3, [r6, #40]	; 0x28
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	6020      	str	r0, [r4, #0]
 800a75c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a760:	81a3      	strh	r3, [r4, #12]
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	6120      	str	r0, [r4, #16]
 800a766:	6163      	str	r3, [r4, #20]
 800a768:	9b01      	ldr	r3, [sp, #4]
 800a76a:	b15b      	cbz	r3, 800a784 <__smakebuf_r+0x74>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a772:	f000 f8e3 	bl	800a93c <_isatty_r>
 800a776:	b128      	cbz	r0, 800a784 <__smakebuf_r+0x74>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f023 0303 	bic.w	r3, r3, #3
 800a77e:	f043 0301 	orr.w	r3, r3, #1
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	89a0      	ldrh	r0, [r4, #12]
 800a786:	4305      	orrs	r5, r0
 800a788:	81a5      	strh	r5, [r4, #12]
 800a78a:	e7cd      	b.n	800a728 <__smakebuf_r+0x18>
 800a78c:	0800a51d 	.word	0x0800a51d

0800a790 <memchr>:
 800a790:	4603      	mov	r3, r0
 800a792:	b510      	push	{r4, lr}
 800a794:	b2c9      	uxtb	r1, r1
 800a796:	4402      	add	r2, r0
 800a798:	4293      	cmp	r3, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	d101      	bne.n	800a7a2 <memchr+0x12>
 800a79e:	2000      	movs	r0, #0
 800a7a0:	e003      	b.n	800a7aa <memchr+0x1a>
 800a7a2:	7804      	ldrb	r4, [r0, #0]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	428c      	cmp	r4, r1
 800a7a8:	d1f6      	bne.n	800a798 <memchr+0x8>
 800a7aa:	bd10      	pop	{r4, pc}

0800a7ac <__malloc_lock>:
 800a7ac:	4801      	ldr	r0, [pc, #4]	; (800a7b4 <__malloc_lock+0x8>)
 800a7ae:	f7ff bf87 	b.w	800a6c0 <__retarget_lock_acquire_recursive>
 800a7b2:	bf00      	nop
 800a7b4:	200015bc 	.word	0x200015bc

0800a7b8 <__malloc_unlock>:
 800a7b8:	4801      	ldr	r0, [pc, #4]	; (800a7c0 <__malloc_unlock+0x8>)
 800a7ba:	f7ff bf82 	b.w	800a6c2 <__retarget_lock_release_recursive>
 800a7be:	bf00      	nop
 800a7c0:	200015bc 	.word	0x200015bc

0800a7c4 <_raise_r>:
 800a7c4:	291f      	cmp	r1, #31
 800a7c6:	b538      	push	{r3, r4, r5, lr}
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	460d      	mov	r5, r1
 800a7cc:	d904      	bls.n	800a7d8 <_raise_r+0x14>
 800a7ce:	2316      	movs	r3, #22
 800a7d0:	6003      	str	r3, [r0, #0]
 800a7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7da:	b112      	cbz	r2, 800a7e2 <_raise_r+0x1e>
 800a7dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7e0:	b94b      	cbnz	r3, 800a7f6 <_raise_r+0x32>
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	f000 f830 	bl	800a848 <_getpid_r>
 800a7e8:	462a      	mov	r2, r5
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7f2:	f000 b817 	b.w	800a824 <_kill_r>
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d00a      	beq.n	800a810 <_raise_r+0x4c>
 800a7fa:	1c59      	adds	r1, r3, #1
 800a7fc:	d103      	bne.n	800a806 <_raise_r+0x42>
 800a7fe:	2316      	movs	r3, #22
 800a800:	6003      	str	r3, [r0, #0]
 800a802:	2001      	movs	r0, #1
 800a804:	e7e7      	b.n	800a7d6 <_raise_r+0x12>
 800a806:	2400      	movs	r4, #0
 800a808:	4628      	mov	r0, r5
 800a80a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a80e:	4798      	blx	r3
 800a810:	2000      	movs	r0, #0
 800a812:	e7e0      	b.n	800a7d6 <_raise_r+0x12>

0800a814 <raise>:
 800a814:	4b02      	ldr	r3, [pc, #8]	; (800a820 <raise+0xc>)
 800a816:	4601      	mov	r1, r0
 800a818:	6818      	ldr	r0, [r3, #0]
 800a81a:	f7ff bfd3 	b.w	800a7c4 <_raise_r>
 800a81e:	bf00      	nop
 800a820:	2000001c 	.word	0x2000001c

0800a824 <_kill_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	2300      	movs	r3, #0
 800a828:	4d06      	ldr	r5, [pc, #24]	; (800a844 <_kill_r+0x20>)
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	4611      	mov	r1, r2
 800a830:	602b      	str	r3, [r5, #0]
 800a832:	f7f8 f994 	bl	8002b5e <_kill>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d102      	bne.n	800a840 <_kill_r+0x1c>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	b103      	cbz	r3, 800a840 <_kill_r+0x1c>
 800a83e:	6023      	str	r3, [r4, #0]
 800a840:	bd38      	pop	{r3, r4, r5, pc}
 800a842:	bf00      	nop
 800a844:	200015c0 	.word	0x200015c0

0800a848 <_getpid_r>:
 800a848:	f7f8 b982 	b.w	8002b50 <_getpid>

0800a84c <__sread>:
 800a84c:	b510      	push	{r4, lr}
 800a84e:	460c      	mov	r4, r1
 800a850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a854:	f000 f894 	bl	800a980 <_read_r>
 800a858:	2800      	cmp	r0, #0
 800a85a:	bfab      	itete	ge
 800a85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a85e:	89a3      	ldrhlt	r3, [r4, #12]
 800a860:	181b      	addge	r3, r3, r0
 800a862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a866:	bfac      	ite	ge
 800a868:	6563      	strge	r3, [r4, #84]	; 0x54
 800a86a:	81a3      	strhlt	r3, [r4, #12]
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <__swrite>:
 800a86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a872:	461f      	mov	r7, r3
 800a874:	898b      	ldrh	r3, [r1, #12]
 800a876:	4605      	mov	r5, r0
 800a878:	05db      	lsls	r3, r3, #23
 800a87a:	460c      	mov	r4, r1
 800a87c:	4616      	mov	r6, r2
 800a87e:	d505      	bpl.n	800a88c <__swrite+0x1e>
 800a880:	2302      	movs	r3, #2
 800a882:	2200      	movs	r2, #0
 800a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a888:	f000 f868 	bl	800a95c <_lseek_r>
 800a88c:	89a3      	ldrh	r3, [r4, #12]
 800a88e:	4632      	mov	r2, r6
 800a890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	4628      	mov	r0, r5
 800a898:	463b      	mov	r3, r7
 800a89a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a2:	f000 b817 	b.w	800a8d4 <_write_r>

0800a8a6 <__sseek>:
 800a8a6:	b510      	push	{r4, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ae:	f000 f855 	bl	800a95c <_lseek_r>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	89a3      	ldrh	r3, [r4, #12]
 800a8b6:	bf15      	itete	ne
 800a8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8c2:	81a3      	strheq	r3, [r4, #12]
 800a8c4:	bf18      	it	ne
 800a8c6:	81a3      	strhne	r3, [r4, #12]
 800a8c8:	bd10      	pop	{r4, pc}

0800a8ca <__sclose>:
 800a8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ce:	f000 b813 	b.w	800a8f8 <_close_r>
	...

0800a8d4 <_write_r>:
 800a8d4:	b538      	push	{r3, r4, r5, lr}
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	4611      	mov	r1, r2
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4d05      	ldr	r5, [pc, #20]	; (800a8f4 <_write_r+0x20>)
 800a8e0:	602a      	str	r2, [r5, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	f7f8 f972 	bl	8002bcc <_write>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	d102      	bne.n	800a8f2 <_write_r+0x1e>
 800a8ec:	682b      	ldr	r3, [r5, #0]
 800a8ee:	b103      	cbz	r3, 800a8f2 <_write_r+0x1e>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	200015c0 	.word	0x200015c0

0800a8f8 <_close_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	4d05      	ldr	r5, [pc, #20]	; (800a914 <_close_r+0x1c>)
 800a8fe:	4604      	mov	r4, r0
 800a900:	4608      	mov	r0, r1
 800a902:	602b      	str	r3, [r5, #0]
 800a904:	f7f8 f97e 	bl	8002c04 <_close>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d102      	bne.n	800a912 <_close_r+0x1a>
 800a90c:	682b      	ldr	r3, [r5, #0]
 800a90e:	b103      	cbz	r3, 800a912 <_close_r+0x1a>
 800a910:	6023      	str	r3, [r4, #0]
 800a912:	bd38      	pop	{r3, r4, r5, pc}
 800a914:	200015c0 	.word	0x200015c0

0800a918 <_fstat_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	2300      	movs	r3, #0
 800a91c:	4d06      	ldr	r5, [pc, #24]	; (800a938 <_fstat_r+0x20>)
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	4611      	mov	r1, r2
 800a924:	602b      	str	r3, [r5, #0]
 800a926:	f7f8 f978 	bl	8002c1a <_fstat>
 800a92a:	1c43      	adds	r3, r0, #1
 800a92c:	d102      	bne.n	800a934 <_fstat_r+0x1c>
 800a92e:	682b      	ldr	r3, [r5, #0]
 800a930:	b103      	cbz	r3, 800a934 <_fstat_r+0x1c>
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	bd38      	pop	{r3, r4, r5, pc}
 800a936:	bf00      	nop
 800a938:	200015c0 	.word	0x200015c0

0800a93c <_isatty_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	2300      	movs	r3, #0
 800a940:	4d05      	ldr	r5, [pc, #20]	; (800a958 <_isatty_r+0x1c>)
 800a942:	4604      	mov	r4, r0
 800a944:	4608      	mov	r0, r1
 800a946:	602b      	str	r3, [r5, #0]
 800a948:	f7f8 f976 	bl	8002c38 <_isatty>
 800a94c:	1c43      	adds	r3, r0, #1
 800a94e:	d102      	bne.n	800a956 <_isatty_r+0x1a>
 800a950:	682b      	ldr	r3, [r5, #0]
 800a952:	b103      	cbz	r3, 800a956 <_isatty_r+0x1a>
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	bd38      	pop	{r3, r4, r5, pc}
 800a958:	200015c0 	.word	0x200015c0

0800a95c <_lseek_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4604      	mov	r4, r0
 800a960:	4608      	mov	r0, r1
 800a962:	4611      	mov	r1, r2
 800a964:	2200      	movs	r2, #0
 800a966:	4d05      	ldr	r5, [pc, #20]	; (800a97c <_lseek_r+0x20>)
 800a968:	602a      	str	r2, [r5, #0]
 800a96a:	461a      	mov	r2, r3
 800a96c:	f7f8 f96e 	bl	8002c4c <_lseek>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_lseek_r+0x1e>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_lseek_r+0x1e>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	200015c0 	.word	0x200015c0

0800a980 <_read_r>:
 800a980:	b538      	push	{r3, r4, r5, lr}
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	4611      	mov	r1, r2
 800a988:	2200      	movs	r2, #0
 800a98a:	4d05      	ldr	r5, [pc, #20]	; (800a9a0 <_read_r+0x20>)
 800a98c:	602a      	str	r2, [r5, #0]
 800a98e:	461a      	mov	r2, r3
 800a990:	f7f8 f8ff 	bl	8002b92 <_read>
 800a994:	1c43      	adds	r3, r0, #1
 800a996:	d102      	bne.n	800a99e <_read_r+0x1e>
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	b103      	cbz	r3, 800a99e <_read_r+0x1e>
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	bd38      	pop	{r3, r4, r5, pc}
 800a9a0:	200015c0 	.word	0x200015c0

0800a9a4 <_init>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	bf00      	nop
 800a9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9aa:	bc08      	pop	{r3}
 800a9ac:	469e      	mov	lr, r3
 800a9ae:	4770      	bx	lr

0800a9b0 <_fini>:
 800a9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b2:	bf00      	nop
 800a9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b6:	bc08      	pop	{r3}
 800a9b8:	469e      	mov	lr, r3
 800a9ba:	4770      	bx	lr
