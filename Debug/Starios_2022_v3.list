
Starios_2022_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a89c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  0800a9b0  0800a9b0  0001a9b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3b0  0800b3b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3b0  0800b3b0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3b0  0800b3b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3b0  0800b3b0  0001b3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b3b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001544  20000080  0800b438  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  0800b438  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f2b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4f  00000000  00000000  00032fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00035f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b0  00000000  00000000  00037238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f5d  00000000  00000000  000383e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017056  00000000  00000000  00052345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cc8  00000000  00000000  0006939b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  000fd0b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a994 	.word	0x0800a994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	0800a994 	.word	0x0800a994

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a8a:	4a19      	ldr	r2, [pc, #100]	; (8000af0 <MX_ADC1_Init+0x78>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_ADC1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_ADC1_Init+0x74>)
 8000aa2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000aa6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_ADC1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_ADC1_Init+0x74>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ab4:	480d      	ldr	r0, [pc, #52]	; (8000aec <MX_ADC1_Init+0x74>)
 8000ab6:	f002 fa29 	bl	8002f0c <HAL_ADC_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f001 fbd2 	bl	8002268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_ADC1_Init+0x74>)
 8000ad6:	f002 fcdd 	bl	8003494 <HAL_ADC_ConfigChannel>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ae0:	f001 fbc2 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000009c 	.word	0x2000009c
 8000af0:	40012400 	.word	0x40012400

08000af4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b06:	4a19      	ldr	r2, [pc, #100]	; (8000b6c <MX_ADC2_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b1e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b22:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b32:	f002 f9eb 	bl	8002f0c <HAL_ADC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b3c:	f001 fb94 	bl	8002268 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b40:	2301      	movs	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b44:	2301      	movs	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_ADC2_Init+0x74>)
 8000b52:	f002 fc9f 	bl	8003494 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b5c:	f001 fb84 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000cc 	.word	0x200000cc
 8000b6c:	40012800 	.word	0x40012800

08000b70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 0318 	add.w	r3, r7, #24
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <HAL_ADC_MspInit+0xbc>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d122      	bne.n	8000bd6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a26      	ldr	r2, [pc, #152]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4a20      	ldr	r2, [pc, #128]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bae:	f043 0304 	orr.w	r3, r3, #4
 8000bb2:	6193      	str	r3, [r2, #24]
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4819      	ldr	r0, [pc, #100]	; (8000c34 <HAL_ADC_MspInit+0xc4>)
 8000bd0:	f003 f972 	bl	8003eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000bd4:	e026      	b.n	8000c24 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_ADC_MspInit+0xc8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d121      	bne.n	8000c24 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_ADC_MspInit+0xc0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_ADC_MspInit+0xc4>)
 8000c20:	f003 f94a 	bl	8003eb8 <HAL_GPIO_Init>
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40012400 	.word	0x40012400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40012800 	.word	0x40012800

08000c3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_DMA_Init+0x48>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MX_DMA_Init+0x48>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6153      	str	r3, [r2, #20]
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_DMA_Init+0x48>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f002 fe83 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f002 fe9c 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2010      	movs	r0, #16
 8000c70:	f002 fe7b 	bl	800396a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c74:	2010      	movs	r0, #16
 8000c76:	f002 fe94 	bl	80039a2 <HAL_NVIC_EnableIRQ>

}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b43      	ldr	r3, [pc, #268]	; (8000dac <MX_GPIO_Init+0x124>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a42      	ldr	r2, [pc, #264]	; (8000dac <MX_GPIO_Init+0x124>)
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b40      	ldr	r3, [pc, #256]	; (8000dac <MX_GPIO_Init+0x124>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0320 	and.w	r3, r3, #32
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a3c      	ldr	r2, [pc, #240]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b3a      	ldr	r3, [pc, #232]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ccc:	4b37      	ldr	r3, [pc, #220]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a36      	ldr	r2, [pc, #216]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cd2:	f043 0308 	orr.w	r3, r3, #8
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_GPIO_Init+0x124>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2104      	movs	r1, #4
 8000ce8:	4831      	ldr	r0, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000cea:	f003 fa69 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4830      	ldr	r0, [pc, #192]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000cf4:	f003 fa64 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000cfe:	482d      	ldr	r0, [pc, #180]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d00:	f003 fa5e 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d04:	2304      	movs	r3, #4
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4825      	ldr	r0, [pc, #148]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000d1c:	f003 f8cc 	bl	8003eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d20:	2308      	movs	r3, #8
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <MX_GPIO_Init+0x128>)
 8000d34:	f003 f8c0 	bl	8003eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8000d38:	f240 2302 	movw	r3, #514	; 0x202
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d52:	f003 f8b1 	bl	8003eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d56:	2318      	movs	r3, #24
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	4812      	ldr	r0, [pc, #72]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d6a:	f003 f8a5 	bl	8003eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000d82:	f003 f899 	bl	8003eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_GPIO_Init+0x12c>)
 8000da0:	f003 f88a 	bl	8003eb8 <HAL_GPIO_Init>

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dbe:	4a13      	ldr	r2, [pc, #76]	; (8000e0c <MX_I2C1_Init+0x54>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dc4:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x58>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df4:	4804      	ldr	r0, [pc, #16]	; (8000e08 <MX_I2C1_Init+0x50>)
 8000df6:	f003 f9fb 	bl	80041f0 <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f001 fa32 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	200000fc 	.word	0x200000fc
 8000e0c:	40005400 	.word	0x40005400
 8000e10:	00061a80 	.word	0x00061a80

08000e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ee0 <HAL_I2C_MspInit+0xcc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d151      	bne.n	8000ed8 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a2a      	ldr	r2, [pc, #168]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e4c:	23c0      	movs	r3, #192	; 0xc0
 8000e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	2312      	movs	r3, #18
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <HAL_I2C_MspInit+0xd4>)
 8000e60:	f003 f82a 	bl	8003eb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e64:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e6e:	61d3      	str	r3, [r2, #28]
 8000e70:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_I2C_MspInit+0xd0>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_I2C_MspInit+0xdc>)
 8000e80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e84:	2210      	movs	r2, #16
 8000e86:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e88:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e90:	2280      	movs	r2, #128	; 0x80
 8000e92:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000eac:	480f      	ldr	r0, [pc, #60]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000eae:	f002 fd93 	bl	80039d8 <HAL_DMA_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000eb8:	f001 f9d6 	bl	8002268 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_I2C_MspInit+0xd8>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	201f      	movs	r0, #31
 8000ece:	f002 fd4c 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ed2:	201f      	movs	r0, #31
 8000ed4:	f002 fd65 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	20000150 	.word	0x20000150
 8000ef0:	4002006c 	.word	0x4002006c

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
  double signalFrequency = 1; //FFT testing using simulated sinwave
  #endif

  //PB1 CLK / (Prescaler*Count) = Freq
  //72E6/((P+1)*(COUNT+1)) = ISR rateHz
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  	updateFlag=1;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
  }
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	200012b4 	.word	0x200012b4

08000f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f16:	f001 ff73 	bl	8002e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1a:	f000 f91b 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1e:	f7ff feb3 	bl	8000c88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f22:	f7ff fe8b 	bl	8000c3c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f26:	f7ff fda7 	bl	8000a78 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f2a:	f7ff fde3 	bl	8000af4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000f2e:	f7ff ff43 	bl	8000db8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000f32:	f001 f99f 	bl	8002274 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000f36:	f001 fec9 	bl	8002ccc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //SETUP
      //Power INIT
    HAL_Delay(500); //wait .5 sec before power on. prevents false positives
 8000f3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f3e:	f001 ffc1 	bl	8002ec4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_SET);//SoftPower ON
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f48:	486f      	ldr	r0, [pc, #444]	; (8001108 <main+0x1f8>)
 8000f4a:	f003 f939 	bl	80041c0 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_RESET);//SoftPower OFF

    //REQUIRED to set all the end frame bytes to zero (50uS ws2812 reset)
    //use memset() below
    for (int x=(NUMLEDS*EXPANDFACTOR); x<(NUMLEDS*EXPANDFACTOR)+SPILOWTIME; x++) myData[x] = 0; //ToDo: replace with memset(). why not start at 0?
 8000f4e:	f44f 63bd 	mov.w	r3, #1512	; 0x5e8
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	e007      	b.n	8000f66 <main+0x56>
 8000f56:	4a6d      	ldr	r2, [pc, #436]	; (800110c <main+0x1fc>)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f240 6205 	movw	r2, #1541	; 0x605
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	ddf2      	ble.n	8000f56 <main+0x46>
    for (int i=0; i<USEDBINS; i++){ //zeroing out a bunch of arrays
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	e03f      	b.n	8000ff6 <main+0xe6>
  	  MAGmax[i] = 0;
  	  MAGmin[i] = 32000;
  #else
  	  //MAGmax[i] = (int32_t)((fft_Db_MAX/2)+HOFFSET_SCALER);
  	  //MAGmin[i] = (int32_t)((fft_Db_MAX/2)-HOFFSET_SCALER);
  	  MAGmax[i] = 32.f; //think these should be played with. wait a few mins of SILENCE and breakpoint try 30.0f
 8000f76:	4a66      	ldr	r2, [pc, #408]	; (8001110 <main+0x200>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	18d1      	adds	r1, r2, r3
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b64      	ldr	r3, [pc, #400]	; (8001114 <main+0x204>)
 8000f84:	e9c1 2300 	strd	r2, r3, [r1]
  	  MAGmin[i] = 0.0f; //try 15.0f
 8000f88:	4a63      	ldr	r2, [pc, #396]	; (8001118 <main+0x208>)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	18d1      	adds	r1, r2, r3
 8000f90:	f04f 0200 	mov.w	r2, #0
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	e9c1 2300 	strd	r2, r3, [r1]
  #endif
  	  MAGavg[i] = 0.f;
 8000f9c:	4a5f      	ldr	r2, [pc, #380]	; (800111c <main+0x20c>)
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	18d1      	adds	r1, r2, r3
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	e9c1 2300 	strd	r2, r3, [r1]
  	  for(int k=0; k< F_WIDTH; k++) MAGbuff[i][k] = 0.0f;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e00f      	b.n	8000fd6 <main+0xc6>
 8000fb6:	495a      	ldr	r1, [pc, #360]	; (8001120 <main+0x210>)
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	00da      	lsls	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4419      	add	r1, r3
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2300 	strd	r2, r3, [r1]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b07      	cmp	r3, #7
 8000fda:	ddec      	ble.n	8000fb6 <main+0xa6>
  	  MAGbuffSum[i] = 0;
 8000fdc:	4a51      	ldr	r2, [pc, #324]	; (8001124 <main+0x214>)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	18d1      	adds	r1, r2, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i=0; i<USEDBINS; i++){ //zeroing out a bunch of arrays
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	ddbc      	ble.n	8000f76 <main+0x66>
    }


  //Oled Init and Boot
  while(!SSD1306_Init());  // initialize. blocking if OLED not detected
 8000ffc:	bf00      	nop
 8000ffe:	f001 fa41 	bl	8002484 <SSD1306_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0fa      	beq.n	8000ffe <main+0xee>
  SSD1306_DrawBitmap(0,0,Boot, 128, 32, 1); //boot splash screen
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	2320      	movs	r3, #32
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	4a45      	ldr	r2, [pc, #276]	; (8001128 <main+0x218>)
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f001 f9cc 	bl	80023b4 <SSD1306_DrawBitmap>
  SSD1306_UpdateScreen(); //display
 800101c:	f001 fccc 	bl	80029b8 <SSD1306_UpdateScreen>
  HAL_Delay(1000);
 8001020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001024:	f001 ff4e 	bl	8002ec4 <HAL_Delay>
  SSD1306_Clear(); //clear oled display buffer
 8001028:	f001 fcbe 	bl	80029a8 <SSD1306_Clear>
  SSD1306_UpdateScreen();
 800102c:	f001 fcc4 	bl	80029b8 <SSD1306_UpdateScreen>

  HAL_ADC_Start(&hadc1); //starts the adc configured in continuous mode (cubeMX)
 8001030:	483e      	ldr	r0, [pc, #248]	; (800112c <main+0x21c>)
 8001032:	f002 f843 	bl	80030bc <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2); //start adc2 in continuous mode
 8001036:	483e      	ldr	r0, [pc, #248]	; (8001130 <main+0x220>)
 8001038:	f002 f840 	bl	80030bc <HAL_ADC_Start>
  HAL_TIM_Base_Start_IT(&htim3); //start Timer 3. used for FFT sampling
 800103c:	483d      	ldr	r0, [pc, #244]	; (8001134 <main+0x224>)
 800103e:	f006 fd51 	bl	8007ae4 <HAL_TIM_Base_Start_IT>
  //HAL_Delay (500);

  //printStringWithShiftL(" STARIOS GEAR 2020   ", 10); //Send Lscrolling Text (send car array)
  BlankScreen(BLACK);
 8001042:	2000      	movs	r0, #0
 8001044:	f001 f830 	bl	80020a8 <BlankScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(updateFlag==1){ //30kHz Timer
 8001048:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <main+0x228>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d132      	bne.n	80010b8 <main+0x1a8>
			updateFlag = 0;
 8001052:	4b39      	ldr	r3, [pc, #228]	; (8001138 <main+0x228>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
			if (!n_done){ //I need N ADC Samples
 8001058:	4b38      	ldr	r3, [pc, #224]	; (800113c <main+0x22c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d12b      	bne.n	80010b8 <main+0x1a8>
			const double amplitude = 4095; //4095 would be
			double cycles = (((N-1) * signalFrequency) / samplingFrequency); //Number of signal cycles that the sampling will read
			REX[n_count] = ((amplitude * (sin((n_count * (twoPi * cycles)) / N))) / 2.0);/* Build data with positive and negative values*/
			//FFT testing using simulated sinwave
	#else
				REX[n_count] = (double) read_adc() - 2048 + CAL_OFFSET;//12bit ADC (just store this into the REX[i] array. no need to have the adc_value variable
 8001060:	f000 fc06 	bl	8001870 <read_adc>
 8001064:	4603      	mov	r3, r0
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f9c4 	bl	80003f4 <__aeabi_i2d>
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <main+0x230>)
 8001072:	f7ff f871 	bl	8000158 <__aeabi_dsub>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4610      	mov	r0, r2
 800107c:	4619      	mov	r1, r3
 800107e:	4b31      	ldr	r3, [pc, #196]	; (8001144 <main+0x234>)
 8001080:	681c      	ldr	r4, [r3, #0]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b30      	ldr	r3, [pc, #192]	; (8001148 <main+0x238>)
 8001088:	f7ff f868 	bl	800015c <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	482e      	ldr	r0, [pc, #184]	; (800114c <main+0x23c>)
 8001092:	00e1      	lsls	r1, r4, #3
 8001094:	4401      	add	r1, r0
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
	#endif
				n_count++;
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <main+0x234>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <main+0x234>)
 80010a2:	6013      	str	r3, [r2, #0]
				if (n_count >= N){
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <main+0x234>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b3f      	cmp	r3, #63	; 0x3f
 80010aa:	dd05      	ble.n	80010b8 <main+0x1a8>
	#if SIMULATE
				  signalFrequency+=40;//FFT testing using simulated sinwave
				  if(signalFrequency>SAMPLE_FREQ/2) signalFrequency = 1; //FFT testing using simulated sinwave
	#endif
				n_done = 1;
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <main+0x22c>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
				n_count = 0;
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <main+0x234>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
			  }
			}
	    }
		if(n_done==1){
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <main+0x22c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d1c3      	bne.n	8001048 <main+0x138>
			memset(IMX,0,N*sizeof(double)); //zero out complex part before FFT
 80010c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010c4:	2100      	movs	r1, #0
 80010c6:	4822      	ldr	r0, [pc, #136]	; (8001150 <main+0x240>)
 80010c8:	f008 fc1e 	bl	8009908 <memset>
			Windowing(REX, N, FFT_WIN_TYP_HANN, FFT_FORWARD);		//HANN	//Apply Window the the ADC data
 80010cc:	2301      	movs	r3, #1
 80010ce:	2202      	movs	r2, #2
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <main+0x23c>)
 80010d4:	f000 fac8 	bl	8001668 <Windowing>
			ComputeFFT(REX, IMX, N, Exponent(N),FFT_FORWARD); 	//perform the exponent in setup to optimize
 80010d8:	2040      	movs	r0, #64	; 0x40
 80010da:	f000 fa8f 	bl	80015fc <Exponent>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	2301      	movs	r3, #1
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	4613      	mov	r3, r2
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	4919      	ldr	r1, [pc, #100]	; (8001150 <main+0x240>)
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <main+0x23c>)
 80010ee:	f000 f88d 	bl	800120c <ComputeFFT>
			getMAG(); // compute the magnitude of 16 FFT samples
 80010f2:	f000 fbd9 	bl	80018a8 <getMAG>
			adjustVals(); //autoscaling. max sensing
 80010f6:	f000 fc4f 	bl	8001998 <adjustVals>
			graphMAG(); //graph the complex magnitudes on the oled and RGB Display
 80010fa:	f000 fea1 	bl	8001e40 <graphMAG>
			n_done = 0;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <main+0x22c>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		if(updateFlag==1){ //30kHz Timer
 8001104:	e7a0      	b.n	8001048 <main+0x138>
 8001106:	bf00      	nop
 8001108:	40010c00 	.word	0x40010c00
 800110c:	20000194 	.word	0x20000194
 8001110:	20000c30 	.word	0x20000c30
 8001114:	40400000 	.word	0x40400000
 8001118:	20000cb0 	.word	0x20000cb0
 800111c:	20000d30 	.word	0x20000d30
 8001120:	20000db0 	.word	0x20000db0
 8001124:	200011b0 	.word	0x200011b0
 8001128:	0800ae78 	.word	0x0800ae78
 800112c:	2000009c 	.word	0x2000009c
 8001130:	200000cc 	.word	0x200000cc
 8001134:	20001568 	.word	0x20001568
 8001138:	200012b4 	.word	0x200012b4
 800113c:	200007a8 	.word	0x200007a8
 8001140:	40a00000 	.word	0x40a00000
 8001144:	200007a4 	.word	0x200007a4
 8001148:	40518000 	.word	0x40518000
 800114c:	200007b0 	.word	0x200007b0
 8001150:	200009b0 	.word	0x200009b0

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115e:	2228      	movs	r2, #40	; 0x28
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f008 fbd0 	bl	8009908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001192:	2301      	movs	r3, #1
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001196:	2302      	movs	r3, #2
 8001198:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fc3e 	bl	8006a2c <HAL_RCC_OscConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011b6:	f001 f857 	bl	8002268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ba:	230f      	movs	r3, #15
 80011bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2102      	movs	r1, #2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f005 feaa 	bl	8006f30 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011e2:	f001 f841 	bl	8002268 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011e6:	2302      	movs	r3, #2
 80011e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 f834 	bl	8007260 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011fe:	f001 f833 	bl	8002268 <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	; 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <ComputeFFT>:
	}
}

////////////////////////////////////////////////////////////////////////////////START FFt Lib functions
void ComputeFFT(double *vReal, double *vImag, uint16_t samples, uint8_t power, uint8_t dir)
{	// Computes in-place complex-to-complex FFT
 800120c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001210:	b09b      	sub	sp, #108	; 0x6c
 8001212:	af00      	add	r7, sp, #0
 8001214:	60f8      	str	r0, [r7, #12]
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	4611      	mov	r1, r2
 800121a:	461a      	mov	r2, r3
 800121c:	460b      	mov	r3, r1
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	4613      	mov	r3, r2
 8001222:	717b      	strb	r3, [r7, #5]
	// Reverse bits
	uint16_t j = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	for (uint16_t i = 0; i < (samples - 1); i++) {
 800122a:	2300      	movs	r3, #0
 800122c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001230:	e046      	b.n	80012c0 <ComputeFFT+0xb4>
		if (i < j) {
 8001232:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001236:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800123a:	429a      	cmp	r2, r3
 800123c:	d21d      	bcs.n	800127a <ComputeFFT+0x6e>
			Swap(&vReal[i], &vReal[j]);
 800123e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	18d0      	adds	r0, r2, r3
 8001248:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	4413      	add	r3, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f000 f9eb 	bl	800162e <Swap>
			if(dir==FFT_REVERSE)
 8001258:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10c      	bne.n	800127a <ComputeFFT+0x6e>
				Swap(&vImag[i], &vImag[j]);
 8001260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	18d0      	adds	r0, r2, r3
 800126a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	4413      	add	r3, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f000 f9da 	bl	800162e <Swap>
		}
		uint16_t k = (samples >> 1);
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	085b      	lsrs	r3, r3, #1
 800127e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		while (k <= j) {
 8001282:	e00b      	b.n	800129c <ComputeFFT+0x90>
			j -= k;
 8001284:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001288:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
			k >>= 1;
 8001292:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001296:	085b      	lsrs	r3, r3, #1
 8001298:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		while (k <= j) {
 800129c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 80012a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d9ed      	bls.n	8001284 <ComputeFFT+0x78>
		}
		j += k;
 80012a8:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80012ac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80012b0:	4413      	add	r3, r2
 80012b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	for (uint16_t i = 0; i < (samples - 1); i++) {
 80012b6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80012ba:	3301      	adds	r3, #1
 80012bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80012c0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbb2      	blt.n	8001232 <ComputeFFT+0x26>
	}
	// Compute the FFT
	double c1 = -1.0;
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4baa      	ldr	r3, [pc, #680]	; (800157c <ComputeFFT+0x370>)
 80012d2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double c2 = 0.0;
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint16_t l2 = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	for (uint8_t l = 0; (l < power); l++) {
 80012e8:	2300      	movs	r3, #0
 80012ea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80012ee:	e138      	b.n	8001562 <ComputeFFT+0x356>
		uint16_t l1 = l2;
 80012f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012f4:	867b      	strh	r3, [r7, #50]	; 0x32
		l2 <<= 1;
 80012f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		double u1 = 1.0;
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	4b9e      	ldr	r3, [pc, #632]	; (8001580 <ComputeFFT+0x374>)
 8001306:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		double u2 = 0.0;
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		for (j = 0; j < l1; j++) {
 8001316:	2300      	movs	r3, #0
 8001318:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800131c:	e0da      	b.n	80014d4 <ComputeFFT+0x2c8>
			 for (uint16_t i = j; i < samples; i += l2) {
 800131e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001322:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001324:	e094      	b.n	8001450 <ComputeFFT+0x244>
					uint16_t i1 = i + l1;
 8001326:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001328:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800132a:	4413      	add	r3, r2
 800132c:	84fb      	strh	r3, [r7, #38]	; 0x26
					double t1 = u1 * vReal[i1] - u2 * vImag[i1];
 800132e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4413      	add	r3, r2
 8001336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800133a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800133e:	f7ff f8c3 	bl	80004c8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4690      	mov	r8, r2
 8001348:	4699      	mov	r9, r3
 800134a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	4413      	add	r3, r2
 8001352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001356:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800135a:	f7ff f8b5 	bl	80004c8 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4640      	mov	r0, r8
 8001364:	4649      	mov	r1, r9
 8001366:	f7fe fef7 	bl	8000158 <__aeabi_dsub>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	e9c7 2306 	strd	r2, r3, [r7, #24]
					double t2 = u1 * vImag[i1] + u2 * vReal[i1];
 8001372:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	4413      	add	r3, r2
 800137a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800137e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001382:	f7ff f8a1 	bl	80004c8 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4690      	mov	r8, r2
 800138c:	4699      	mov	r9, r3
 800138e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800139e:	f7ff f893 	bl	80004c8 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4640      	mov	r0, r8
 80013a8:	4649      	mov	r1, r9
 80013aa:	f7fe fed7 	bl	800015c <__adddf3>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					vReal[i1] = vReal[i] - t1;
 80013b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	18d6      	adds	r6, r2, r3
 80013ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013ce:	f7fe fec3 	bl	8000158 <__aeabi_dsub>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	e9c6 2300 	strd	r2, r3, [r6]
					vImag[i1] = vImag[i] - t2;
 80013da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	4413      	add	r3, r2
 80013e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	18d6      	adds	r6, r2, r3
 80013ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013f2:	f7fe feb1 	bl	8000158 <__aeabi_dsub>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	e9c6 2300 	strd	r2, r3, [r6]
					vReal[i] += t1;
 80013fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	18d6      	adds	r6, r2, r3
 8001412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001416:	f7fe fea1 	bl	800015c <__adddf3>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	e9c6 2300 	strd	r2, r3, [r6]
					vImag[i] += t2;
 8001422:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	4413      	add	r3, r2
 800142a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	18d6      	adds	r6, r2, r3
 8001436:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143a:	f7fe fe8f 	bl	800015c <__adddf3>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	e9c6 2300 	strd	r2, r3, [r6]
			 for (uint16_t i = j; i < samples; i += l2) {
 8001446:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800144c:	4413      	add	r3, r2
 800144e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001450:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001452:	88fb      	ldrh	r3, [r7, #6]
 8001454:	429a      	cmp	r2, r3
 8001456:	f4ff af66 	bcc.w	8001326 <ComputeFFT+0x11a>
			 }
			 double z = ((u1 * c1) - (u2 * c2));
 800145a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800145e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001462:	f7ff f831 	bl	80004c8 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4690      	mov	r8, r2
 800146c:	4699      	mov	r9, r3
 800146e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001472:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001476:	f7ff f827 	bl	80004c8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4640      	mov	r0, r8
 8001480:	4649      	mov	r1, r9
 8001482:	f7fe fe69 	bl	8000158 <__aeabi_dsub>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			 u2 = ((u1 * c2) + (u2 * c1));
 800148e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001492:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001496:	f7ff f817 	bl	80004c8 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4690      	mov	r8, r2
 80014a0:	4699      	mov	r9, r3
 80014a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014a6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80014aa:	f7ff f80d 	bl	80004c8 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4640      	mov	r0, r8
 80014b4:	4649      	mov	r1, r9
 80014b6:	f7fe fe51 	bl	800015c <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			 u1 = z;
 80014c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
		for (j = 0; j < l1; j++) {
 80014ca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80014ce:	3301      	adds	r3, #1
 80014d0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80014d4:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80014d8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80014da:	429a      	cmp	r2, r3
 80014dc:	f4ff af1f 	bcc.w	800131e <ComputeFFT+0x112>
		}
		c2 = sqrt((1.0 - c1) / 2.0);
 80014e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014e4:	f04f 0000 	mov.w	r0, #0
 80014e8:	4925      	ldr	r1, [pc, #148]	; (8001580 <ComputeFFT+0x374>)
 80014ea:	f7fe fe35 	bl	8000158 <__aeabi_dsub>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f90d 	bl	800071c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f006 ff0d 	bl	8008328 <sqrt>
 800150e:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
		if (dir == FFT_FORWARD) {
 8001512:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001516:	2b01      	cmp	r3, #1
 8001518:	d105      	bne.n	8001526 <ComputeFFT+0x31a>
			c2 = -c2;
 800151a:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800151c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001522:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
		}
		c1 = sqrt((1.0 + c1) / 2.0);
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <ComputeFFT+0x374>)
 800152c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001530:	f7fe fe14 	bl	800015c <__adddf3>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001544:	f7ff f8ea 	bl	800071c <__aeabi_ddiv>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f006 feea 	bl	8008328 <sqrt>
 8001554:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
	for (uint8_t l = 0; (l < power); l++) {
 8001558:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800155c:	3301      	adds	r3, #1
 800155e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001562:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001566:	797b      	ldrb	r3, [r7, #5]
 8001568:	429a      	cmp	r2, r3
 800156a:	f4ff aec1 	bcc.w	80012f0 <ComputeFFT+0xe4>
	}
	// Scaling for reverse transform
	if (dir != FFT_FORWARD) {
 800156e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001572:	2b01      	cmp	r3, #1
 8001574:	d03d      	beq.n	80015f2 <ComputeFFT+0x3e6>
		for (uint16_t i = 0; i < samples; i++) {
 8001576:	2300      	movs	r3, #0
 8001578:	86bb      	strh	r3, [r7, #52]	; 0x34
 800157a:	e036      	b.n	80015ea <ComputeFFT+0x3de>
 800157c:	bff00000 	.word	0xbff00000
 8001580:	3ff00000 	.word	0x3ff00000
			 vReal[i] /= samples;
 8001584:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff2e 	bl	80003f4 <__aeabi_i2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 800159e:	00c9      	lsls	r1, r1, #3
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	1846      	adds	r6, r0, r1
 80015a4:	4620      	mov	r0, r4
 80015a6:	4629      	mov	r1, r5
 80015a8:	f7ff f8b8 	bl	800071c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	e9c6 2300 	strd	r2, r3, [r6]
			 vImag[i] /= samples;
 80015b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	68ba      	ldr	r2, [r7, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe ff16 	bl	80003f4 <__aeabi_i2d>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80015ce:	00c9      	lsls	r1, r1, #3
 80015d0:	68b8      	ldr	r0, [r7, #8]
 80015d2:	1846      	adds	r6, r0, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7ff f8a0 	bl	800071c <__aeabi_ddiv>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	e9c6 2300 	strd	r2, r3, [r6]
		for (uint16_t i = 0; i < samples; i++) {
 80015e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015e6:	3301      	adds	r3, #1
 80015e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80015ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3c8      	bcc.n	8001584 <ComputeFFT+0x378>
		}
	}
}
 80015f2:	bf00      	nop
 80015f4:	376c      	adds	r7, #108	; 0x6c
 80015f6:	46bd      	mov	sp, r7
 80015f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080015fc <Exponent>:
	for (uint16_t i = 0; i < samples; i++) {
		vReal[i] = sqrt(sq(vReal[i]) + sq(vImag[i]));
	}
}

uint8_t Exponent(uint16_t value){
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	80fb      	strh	r3, [r7, #6]
	// Calculates the base 2 logarithm of a value
	uint8_t result = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]
	while (((value >> result) & 1) != 1) result++;
 800160a:	e002      	b.n	8001612 <Exponent+0x16>
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	88fa      	ldrh	r2, [r7, #6]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	fa42 f303 	asr.w	r3, r2, r3
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f4      	beq.n	800160c <Exponent+0x10>
	return(result);
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <Swap>:


void Swap(double *x, double *y){
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	6039      	str	r1, [r7, #0]
	double temp = *x;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	*x = *y;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	e9c1 2300 	strd	r2, r3, [r1]
	*y = temp;
 800164e:	6839      	ldr	r1, [r7, #0]
 8001650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001654:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	0000      	movs	r0, r0
 8001664:	0000      	movs	r0, r0
	...

08001668 <Windowing>:

//commented on unused Windowing types so save flash space
void Windowing(double *vData, uint16_t samples, uint8_t windowType, uint8_t dir)
{// Weighing factors are computed once before multiple use of FFT
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b08d      	sub	sp, #52	; 0x34
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	461a      	mov	r2, r3
 8001676:	4603      	mov	r3, r0
 8001678:	807b      	strh	r3, [r7, #2]
 800167a:	460b      	mov	r3, r1
 800167c:	707b      	strb	r3, [r7, #1]
 800167e:	4613      	mov	r3, r2
 8001680:	703b      	strb	r3, [r7, #0]
// The weighing function is symetric; half the weighs are recorded
	double samplesMinusOne = (double)(samples - 1.0);
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe feb5 	bl	80003f4 <__aeabi_i2d>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4b6e      	ldr	r3, [pc, #440]	; (8001848 <Windowing+0x1e0>)
 8001690:	f7fe fd62 	bl	8000158 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 800169c:	2300      	movs	r3, #0
 800169e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016a0:	e0b7      	b.n	8001812 <Windowing+0x1aa>
		double indexMinusOne = (double) i;
 80016a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fe95 	bl	80003d4 <__aeabi_ui2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
		double ratio = (indexMinusOne / samplesMinusOne);
 80016b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016ba:	f7ff f82f 	bl	800071c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
		double weighingFactor = 1.0;
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <Windowing+0x1e0>)
 80016cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
		// Compute and record weighting factor
		switch (windowType) {
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d002      	beq.n	80016dc <Windowing+0x74>
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d01e      	beq.n	8001718 <Windowing+0xb0>
 80016da:	e03f      	b.n	800175c <Windowing+0xf4>
//		case FFT_WIN_TYP_RECTANGLE: // rectangle (box car)
//			weighingFactor = 1.0;
//			break;
		case FFT_WIN_TYP_HAMMING: // hamming
			weighingFactor = 0.54 - (0.46 * cos(twoPi * ratio));
 80016dc:	a354      	add	r3, pc, #336	; (adr r3, 8001830 <Windowing+0x1c8>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016e6:	f7fe feef 	bl	80004c8 <__aeabi_dmul>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f006 fda1 	bl	8008238 <cos>
 80016f6:	a350      	add	r3, pc, #320	; (adr r3, 8001838 <Windowing+0x1d0>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe fee4 	bl	80004c8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	a14e      	add	r1, pc, #312	; (adr r1, 8001840 <Windowing+0x1d8>)
 8001706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800170a:	f7fe fd25 	bl	8000158 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	e9c7 2308 	strd	r2, r3, [r7, #32]
			break;
 8001716:	e021      	b.n	800175c <Windowing+0xf4>
		case FFT_WIN_TYP_HANN: // hann
			//weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
			weighingFactor = 0.54 * (1.0 - cos(twoPi * ratio));
 8001718:	a345      	add	r3, pc, #276	; (adr r3, 8001830 <Windowing+0x1c8>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001722:	f7fe fed1 	bl	80004c8 <__aeabi_dmul>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f006 fd83 	bl	8008238 <cos>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	f04f 0000 	mov.w	r0, #0
 800173a:	4943      	ldr	r1, [pc, #268]	; (8001848 <Windowing+0x1e0>)
 800173c:	f7fe fd0c 	bl	8000158 <__aeabi_dsub>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	a33d      	add	r3, pc, #244	; (adr r3, 8001840 <Windowing+0x1d8>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe febb 	bl	80004c8 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	e9c7 2308 	strd	r2, r3, [r7, #32]
			break;
 800175a:	bf00      	nop
//			break;
//		case FFT_WIN_TYP_WELCH: // welch
//			weighingFactor = 1.0 - sq((indexMinusOne - samplesMinusOne / 2.0) / (samplesMinusOne / 2.0));
//			break;
		}
		if (dir == FFT_FORWARD) {
 800175c:	783b      	ldrb	r3, [r7, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d12a      	bne.n	80017b8 <Windowing+0x150>
			vData[i] *= weighingFactor;
 8001762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800176e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	18d4      	adds	r4, r2, r3
 8001776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800177a:	f7fe fea5 	bl	80004c8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9c4 2300 	strd	r2, r3, [r4]
			vData[samples - (i + 1)] *= weighingFactor;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800178a:	3301      	adds	r3, #1
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001798:	887a      	ldrh	r2, [r7, #2]
 800179a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800179c:	3301      	adds	r3, #1
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	18d4      	adds	r4, r2, r3
 80017a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017aa:	f7fe fe8d 	bl	80004c8 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9c4 2300 	strd	r2, r3, [r4]
 80017b6:	e029      	b.n	800180c <Windowing+0x1a4>
		}
		else {
			vData[i] /= weighingFactor;
 80017b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	18d4      	adds	r4, r2, r3
 80017cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017d0:	f7fe ffa4 	bl	800071c <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	e9c4 2300 	strd	r2, r3, [r4]
			vData[samples - (i + 1)] /= weighingFactor;
 80017dc:	887a      	ldrh	r2, [r7, #2]
 80017de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017e0:	3301      	adds	r3, #1
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017f2:	3301      	adds	r3, #1
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	18d4      	adds	r4, r2, r3
 80017fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001800:	f7fe ff8c 	bl	800071c <__aeabi_ddiv>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	e9c4 2300 	strd	r2, r3, [r4]
	for (uint16_t i = 0; i < (samples >> 1); i++) {
 800180c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800180e:	3301      	adds	r3, #1
 8001810:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	b29b      	uxth	r3, r3
 8001818:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800181a:	429a      	cmp	r2, r3
 800181c:	f4ff af41 	bcc.w	80016a2 <Windowing+0x3a>
		}
	}
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3734      	adds	r7, #52	; 0x34
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}
 800182a:	bf00      	nop
 800182c:	f3af 8000 	nop.w
 8001830:	5474a168 	.word	0x5474a168
 8001834:	401921fb 	.word	0x401921fb
 8001838:	d70a3d71 	.word	0xd70a3d71
 800183c:	3fdd70a3 	.word	0x3fdd70a3
 8001840:	147ae148 	.word	0x147ae148
 8001844:	3fe147ae 	.word	0x3fe147ae
 8001848:	3ff00000 	.word	0x3ff00000

0800184c <sq>:


double sq(double x){ //math squaring function
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	e9c7 0100 	strd	r0, r1, [r7]
return 	x*x;
 8001856:	e9d7 2300 	ldrd	r2, r3, [r7]
 800185a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800185e:	f7fe fe33 	bl	80004c8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
}
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <read_adc>:


//added an offset of 1.68V on the ADC pin. this comes out to 2048 for a 12-bit ADC
//ToDo: this signed val and the offset should be done in the mainloop. this will allow the read_adc to be generalized. should return a uint16_t from the 12-bit adc
int16_t read_adc(){ //reads ADC0 into adcVAL (12-bit?)
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001876:	480a      	ldr	r0, [pc, #40]	; (80018a0 <read_adc+0x30>)
 8001878:	f001 fc20 	bl	80030bc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); //wait (blocking) for the conversion to complete ?
 800187c:	2164      	movs	r1, #100	; 0x64
 800187e:	4808      	ldr	r0, [pc, #32]	; (80018a0 <read_adc+0x30>)
 8001880:	f001 fcf6 	bl	8003270 <HAL_ADC_PollForConversion>
    //because HAL_ADC_Getvalue only returns 0 to 2^12-1; half of that is 2047.5. lets round it to 2048 (this is fine for a int16_t)
	int16_t adcVal = (int16_t)(HAL_ADC_GetValue(&hadc1) & (0xFFFF)); //make sure only the lower 16 bytes are stored.
 8001884:	4806      	ldr	r0, [pc, #24]	; (80018a0 <read_adc+0x30>)
 8001886:	f001 fdf9 	bl	800347c <HAL_ADC_GetValue>
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
    HAL_ADC_Stop(&hadc1);
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <read_adc+0x30>)
 8001890:	f001 fcc2 	bl	8003218 <HAL_ADC_Stop>
	return adcVal;
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	2000009c 	.word	0x2000009c
 80018a4:	00000000 	.word	0x00000000

080018a8 <getMAG>:
		uint32_t idx = (i*(N/32))+indexOffset; //used to make sure i am indexing the REX[] properly
		MAG[i] = (sqrt(sq(REX[idx]) + sq(IMX[idx]))); //Magnitude from Pythagoram of Real and Complex in dBs
	}
}
#else
void getMAG(){
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
	uint8_t indexOffset = 1; //the lowest used bin index
 80018ae:	2301      	movs	r3, #1
 80018b0:	74fb      	strb	r3, [r7, #19]
	double MaxTemp;
	uint32_t idx;
	for (uint32_t i = 0; i < USEDBINS; i++){
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	e057      	b.n	8001968 <getMAG+0xc0>
		idx = (i*(N/32))+indexOffset; //used to make sure i am indexing the REX[] properly
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005a      	lsls	r2, r3, #1
 80018bc:	7cfb      	ldrb	r3, [r7, #19]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
		//Todo: peak detection here?

		MaxTemp = sqrt(sq(REX[idx]) + sq(IMX[idx])); //Magnitude from Pythagoram of Real and Complex
 80018c2:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <getMAG+0xd8>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff ffbb 	bl	800184c <sq>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	4a2a      	ldr	r2, [pc, #168]	; (8001984 <getMAG+0xdc>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	4413      	add	r3, r2
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f7ff ffaf 	bl	800184c <sq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7fe fc31 	bl	800015c <__adddf3>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f006 fd11 	bl	8008328 <sqrt>
 8001906:	e9c7 0100 	strd	r0, r1, [r7]
		MAG[i] = (double) fft_Db_MAX + (20*log10((MaxTemp+1.0)/FFT_RAW_MAX)); //return positive DBs. this will be used
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <getMAG+0xe0>)
 8001910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001914:	f7fe fc22 	bl	800015c <__adddf3>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	a315      	add	r3, pc, #84	; (adr r3, 8001978 <getMAG+0xd0>)
 8001922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001926:	f7fe fef9 	bl	800071c <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f006 fcc7 	bl	80082c4 <log10>
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <getMAG+0xe4>)
 800193c:	f7fe fdc4 	bl	80004c8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	4b11      	ldr	r3, [pc, #68]	; (8001990 <getMAG+0xe8>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fc05 	bl	800015c <__adddf3>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	480f      	ldr	r0, [pc, #60]	; (8001994 <getMAG+0xec>)
 8001958:	6979      	ldr	r1, [r7, #20]
 800195a:	00c9      	lsls	r1, r1, #3
 800195c:	4401      	add	r1, r0
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b0f      	cmp	r3, #15
 800196c:	d9a4      	bls.n	80018b8 <getMAG+0x10>
	}
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	00000000 	.word	0x00000000
 800197c:	40e21100 	.word	0x40e21100
 8001980:	200007b0 	.word	0x200007b0
 8001984:	200009b0 	.word	0x200009b0
 8001988:	3ff00000 	.word	0x3ff00000
 800198c:	40340000 	.word	0x40340000
 8001990:	20000008 	.word	0x20000008
 8001994:	20000bb0 	.word	0x20000bb0

08001998 <adjustVals>:
}

#else
//ToDo: clean up these for-loops. sense counter must be outside a for-loop(maybe theres a way...)
//Todo: anyway to speed this funtion up?
void adjustVals(){ //main audio filtering work
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0

	//////lowpass filtering//////
	for (uint32_t i = 0; i < USEDBINS; i++){
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e052      	b.n	8001a4a <adjustVals+0xb2>
		MAGbuff[i][fCount] = MAG[i]; //store the current reading into the circular buffer
 80019a4:	4b98      	ldr	r3, [pc, #608]	; (8001c08 <adjustVals+0x270>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461c      	mov	r4, r3
 80019aa:	4a98      	ldr	r2, [pc, #608]	; (8001c0c <adjustVals+0x274>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	4896      	ldr	r0, [pc, #600]	; (8001c10 <adjustVals+0x278>)
 80019b8:	69f9      	ldr	r1, [r7, #28]
 80019ba:	00c9      	lsls	r1, r1, #3
 80019bc:	4421      	add	r1, r4
 80019be:	00c9      	lsls	r1, r1, #3
 80019c0:	4401      	add	r1, r0
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]
		for (uint32_t k = 0; k < F_WIDTH; k++){ //store the sums
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	e01b      	b.n	8001a04 <adjustVals+0x6c>
			MAGbuffSum[i] += MAGbuff[i][k];
 80019cc:	4a91      	ldr	r2, [pc, #580]	; (8001c14 <adjustVals+0x27c>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4413      	add	r3, r2
 80019d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d8:	4c8d      	ldr	r4, [pc, #564]	; (8001c10 <adjustVals+0x278>)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	00da      	lsls	r2, r3, #3
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	4413      	add	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4423      	add	r3, r4
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fbb7 	bl	800015c <__adddf3>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4888      	ldr	r0, [pc, #544]	; (8001c14 <adjustVals+0x27c>)
 80019f4:	69f9      	ldr	r1, [r7, #28]
 80019f6:	00c9      	lsls	r1, r1, #3
 80019f8:	4401      	add	r1, r0
 80019fa:	e9c1 2300 	strd	r2, r3, [r1]
		for (uint32_t k = 0; k < F_WIDTH; k++){ //store the sums
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b07      	cmp	r3, #7
 8001a08:	d9e0      	bls.n	80019cc <adjustVals+0x34>
		}
		MAG[i] = MAGbuffSum[i]/F_WIDTHF;
 8001a0a:	4a82      	ldr	r2, [pc, #520]	; (8001c14 <adjustVals+0x27c>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <adjustVals+0x280>)
 8001a1c:	f7fe fe7e 	bl	800071c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4879      	ldr	r0, [pc, #484]	; (8001c0c <adjustVals+0x274>)
 8001a26:	69f9      	ldr	r1, [r7, #28]
 8001a28:	00c9      	lsls	r1, r1, #3
 8001a2a:	4401      	add	r1, r0
 8001a2c:	e9c1 2300 	strd	r2, r3, [r1]
		MAGbuffSum[i] = 0;
 8001a30:	4a78      	ldr	r2, [pc, #480]	; (8001c14 <adjustVals+0x27c>)
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	18d1      	adds	r1, r2, r3
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	2b0f      	cmp	r3, #15
 8001a4e:	d9a9      	bls.n	80019a4 <adjustVals+0xc>
	}
	fCount++; //lowpass filter indexer
 8001a50:	4b6d      	ldr	r3, [pc, #436]	; (8001c08 <adjustVals+0x270>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b6b      	ldr	r3, [pc, #428]	; (8001c08 <adjustVals+0x270>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	if(fCount>=F_WIDTH) fCount=0;
 8001a5c:	4b6a      	ldr	r3, [pc, #424]	; (8001c08 <adjustVals+0x270>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d902      	bls.n	8001a6a <adjustVals+0xd2>
 8001a64:	4b68      	ldr	r3, [pc, #416]	; (8001c08 <adjustVals+0x270>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]


	//////max and min storing//////
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e03f      	b.n	8001af0 <adjustVals+0x158>
		if(MAG[i] > MAGmax[i]){
 8001a70:	4a66      	ldr	r2, [pc, #408]	; (8001c0c <adjustVals+0x274>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a7c:	4a67      	ldr	r2, [pc, #412]	; (8001c1c <adjustVals+0x284>)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe ffae 	bl	80009e8 <__aeabi_dcmpgt>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00e      	beq.n	8001ab0 <adjustVals+0x118>
			  MAGmax[i] = MAG[i]; //store the Max
 8001a92:	4a5e      	ldr	r2, [pc, #376]	; (8001c0c <adjustVals+0x274>)
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4413      	add	r3, r2
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	485f      	ldr	r0, [pc, #380]	; (8001c1c <adjustVals+0x284>)
 8001aa0:	6979      	ldr	r1, [r7, #20]
 8001aa2:	00c9      	lsls	r1, r1, #3
 8001aa4:	4401      	add	r1, r0
 8001aa6:	e9c1 2300 	strd	r2, r3, [r1]
			  senseCounterH = 0;
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <adjustVals+0x288>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
		}
		if(MAG[i] < MAGmin[i]){
 8001ab0:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <adjustVals+0x274>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001abc:	4a59      	ldr	r2, [pc, #356]	; (8001c24 <adjustVals+0x28c>)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe ff70 	bl	80009ac <__aeabi_dcmplt>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00b      	beq.n	8001aea <adjustVals+0x152>
			  MAGmin[i] = MAG[i]; //store the Max
 8001ad2:	4a4e      	ldr	r2, [pc, #312]	; (8001c0c <adjustVals+0x274>)
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ade:	4851      	ldr	r0, [pc, #324]	; (8001c24 <adjustVals+0x28c>)
 8001ae0:	6979      	ldr	r1, [r7, #20]
 8001ae2:	00c9      	lsls	r1, r1, #3
 8001ae4:	4401      	add	r1, r0
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint32_t i = 0; i < USEDBINS; i++){
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	d9bc      	bls.n	8001a70 <adjustVals+0xd8>
		}
	}


	////// max and min auto adjusting//////
		  senseCounterH++;
 8001af6:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <adjustVals+0x288>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <adjustVals+0x288>)
 8001afe:	6013      	str	r3, [r2, #0]
		  senseCounterL++;
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <adjustVals+0x290>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <adjustVals+0x290>)
 8001b08:	6013      	str	r3, [r2, #0]
		  if(senseCounterH>SENSERATE_H){ //about every 3 seconds
 8001b0a:	4b45      	ldr	r3, [pc, #276]	; (8001c20 <adjustVals+0x288>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001b12:	d938      	bls.n	8001b86 <adjustVals+0x1ee>
			  senseCounterH = 0;
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <adjustVals+0x288>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	e02f      	b.n	8001b80 <adjustVals+0x1e8>
				  if(MAGmax[k]>MAGmin[k] + HOFFSET_SCALER) MAGmax[k]-=0.5f; //reduce upper limit
 8001b20:	4a3e      	ldr	r2, [pc, #248]	; (8001c1c <adjustVals+0x284>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b2c:	4a3d      	ldr	r2, [pc, #244]	; (8001c24 <adjustVals+0x28c>)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <adjustVals+0x294>)
 8001b3e:	f7fe fb0d 	bl	800015c <__adddf3>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe ff4d 	bl	80009e8 <__aeabi_dcmpgt>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d012      	beq.n	8001b7a <adjustVals+0x1e2>
 8001b54:	4a31      	ldr	r2, [pc, #196]	; (8001c1c <adjustVals+0x284>)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	4413      	add	r3, r2
 8001b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <adjustVals+0x298>)
 8001b66:	f7fe faf7 	bl	8000158 <__aeabi_dsub>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	482b      	ldr	r0, [pc, #172]	; (8001c1c <adjustVals+0x284>)
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	00c9      	lsls	r1, r1, #3
 8001b74:	4401      	add	r1, r0
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	2b0f      	cmp	r3, #15
 8001b84:	d9cc      	bls.n	8001b20 <adjustVals+0x188>
			  }
		  }
		  if(senseCounterL>SENSERATE_L){ //about every 1 seconds
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <adjustVals+0x290>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d938      	bls.n	8001c00 <adjustVals+0x268>
			  senseCounterL = 0;
 8001b8e:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <adjustVals+0x290>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e02f      	b.n	8001bfa <adjustVals+0x262>
				  if(MAGmin[k]<MAGmax[k] - HOFFSET_SCALER) MAGmin[k]+=0.5f; //increase lower limit
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <adjustVals+0x28c>)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <adjustVals+0x284>)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4413      	add	r3, r2
 8001bae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <adjustVals+0x294>)
 8001bb8:	f7fe face 	bl	8000158 <__aeabi_dsub>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fef2 	bl	80009ac <__aeabi_dcmplt>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d012      	beq.n	8001bf4 <adjustVals+0x25c>
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <adjustVals+0x28c>)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <adjustVals+0x298>)
 8001be0:	f7fe fabc 	bl	800015c <__adddf3>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	480e      	ldr	r0, [pc, #56]	; (8001c24 <adjustVals+0x28c>)
 8001bea:	68f9      	ldr	r1, [r7, #12]
 8001bec:	00c9      	lsls	r1, r1, #3
 8001bee:	4401      	add	r1, r0
 8001bf0:	e9c1 2300 	strd	r2, r3, [r1]
			  for (uint32_t k = 0; k < USEDBINS; k++){
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d9cc      	bls.n	8001b9a <adjustVals+0x202>
			  }
		  }

//not sure thus is needed
	//////make sure that MAG is within min and max as a double//////
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	e061      	b.n	8001cca <adjustVals+0x332>
 8001c06:	bf00      	nop
 8001c08:	200011f0 	.word	0x200011f0
 8001c0c:	20000bb0 	.word	0x20000bb0
 8001c10:	20000db0 	.word	0x20000db0
 8001c14:	200011b0 	.word	0x200011b0
 8001c18:	40200000 	.word	0x40200000
 8001c1c:	20000c30 	.word	0x20000c30
 8001c20:	200012b8 	.word	0x200012b8
 8001c24:	20000cb0 	.word	0x20000cb0
 8001c28:	200012bc 	.word	0x200012bc
 8001c2c:	40100000 	.word	0x40100000
 8001c30:	3fe00000 	.word	0x3fe00000
			  if(MAG[i]>=MAGmax[i]) MAG[i] = MAGmax[i]-1;
 8001c34:	4a6c      	ldr	r2, [pc, #432]	; (8001de8 <adjustVals+0x450>)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c40:	4a6a      	ldr	r2, [pc, #424]	; (8001dec <adjustVals+0x454>)
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4413      	add	r3, r2
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	f7fe fec2 	bl	80009d4 <__aeabi_dcmpge>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <adjustVals+0x2e4>
 8001c56:	4a65      	ldr	r2, [pc, #404]	; (8001dec <adjustVals+0x454>)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	4b62      	ldr	r3, [pc, #392]	; (8001df0 <adjustVals+0x458>)
 8001c68:	f7fe fa76 	bl	8000158 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	485d      	ldr	r0, [pc, #372]	; (8001de8 <adjustVals+0x450>)
 8001c72:	68b9      	ldr	r1, [r7, #8]
 8001c74:	00c9      	lsls	r1, r1, #3
 8001c76:	4401      	add	r1, r0
 8001c78:	e9c1 2300 	strd	r2, r3, [r1]
			  if(MAG[i]<=MAGmin[i]) MAG[i] = MAGmin[i]+1;
 8001c7c:	4a5a      	ldr	r2, [pc, #360]	; (8001de8 <adjustVals+0x450>)
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c88:	4a5a      	ldr	r2, [pc, #360]	; (8001df4 <adjustVals+0x45c>)
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	f7fe fe94 	bl	80009c0 <__aeabi_dcmple>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d012      	beq.n	8001cc4 <adjustVals+0x32c>
 8001c9e:	4a55      	ldr	r2, [pc, #340]	; (8001df4 <adjustVals+0x45c>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	4b50      	ldr	r3, [pc, #320]	; (8001df0 <adjustVals+0x458>)
 8001cb0:	f7fe fa54 	bl	800015c <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	484b      	ldr	r0, [pc, #300]	; (8001de8 <adjustVals+0x450>)
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	00c9      	lsls	r1, r1, #3
 8001cbe:	4401      	add	r1, r0
 8001cc0:	e9c1 2300 	strd	r2, r3, [r1]
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d9b1      	bls.n	8001c34 <adjustVals+0x29c>
			  //MAG[i] = constrain(MAG[i],MAGmin[i]+1,MAGmax[i]-1); //instead?
		  }


	//////Typecasting to ready for digital displaying//////
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	e02f      	b.n	8001d36 <adjustVals+0x39e>
				MAGI[i] = (int32_t) MAG[i];
 8001cd6:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <adjustVals+0x450>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe fe9f 	bl	8000a28 <__aeabi_d2iz>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4942      	ldr	r1, [pc, #264]	; (8001df8 <adjustVals+0x460>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MAGImin[i] = (int32_t) MAGmin[i];
 8001cf4:	4a3f      	ldr	r2, [pc, #252]	; (8001df4 <adjustVals+0x45c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe fe90 	bl	8000a28 <__aeabi_d2iz>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	493c      	ldr	r1, [pc, #240]	; (8001dfc <adjustVals+0x464>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				MAGImax[i] = (int32_t) MAGmax[i];
 8001d12:	4a36      	ldr	r2, [pc, #216]	; (8001dec <adjustVals+0x454>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7fe fe81 	bl	8000a28 <__aeabi_d2iz>
 8001d26:	4602      	mov	r2, r0
 8001d28:	4935      	ldr	r1, [pc, #212]	; (8001e00 <adjustVals+0x468>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d9cc      	bls.n	8001cd6 <adjustVals+0x33e>
			}


	//////make sure mag is within min and max as a integer//////
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	e04a      	b.n	8001dd8 <adjustVals+0x440>
			  if(MAG[i]>=MAGmax[i]) MAG[i] = MAGmax[i]-1;
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <adjustVals+0x450>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4e:	4a27      	ldr	r2, [pc, #156]	; (8001dec <adjustVals+0x454>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fe3b 	bl	80009d4 <__aeabi_dcmpge>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d012      	beq.n	8001d8a <adjustVals+0x3f2>
 8001d64:	4a21      	ldr	r2, [pc, #132]	; (8001dec <adjustVals+0x454>)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <adjustVals+0x458>)
 8001d76:	f7fe f9ef 	bl	8000158 <__aeabi_dsub>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	481a      	ldr	r0, [pc, #104]	; (8001de8 <adjustVals+0x450>)
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	00c9      	lsls	r1, r1, #3
 8001d84:	4401      	add	r1, r0
 8001d86:	e9c1 2300 	strd	r2, r3, [r1]
			  if(MAG[i]<=MAGmin[i]) MAG[i] = MAGmin[i]+1;
 8001d8a:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <adjustVals+0x450>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d96:	4a17      	ldr	r2, [pc, #92]	; (8001df4 <adjustVals+0x45c>)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da2:	f7fe fe0d 	bl	80009c0 <__aeabi_dcmple>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <adjustVals+0x43a>
 8001dac:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <adjustVals+0x45c>)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <adjustVals+0x458>)
 8001dbe:	f7fe f9cd 	bl	800015c <__adddf3>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4808      	ldr	r0, [pc, #32]	; (8001de8 <adjustVals+0x450>)
 8001dc8:	6839      	ldr	r1, [r7, #0]
 8001dca:	00c9      	lsls	r1, r1, #3
 8001dcc:	4401      	add	r1, r0
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
		  for (uint32_t i = 0; i < USEDBINS; i++){
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b0f      	cmp	r3, #15
 8001ddc:	d9b1      	bls.n	8001d42 <adjustVals+0x3aa>
		  }
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	20000bb0 	.word	0x20000bb0
 8001dec:	20000c30 	.word	0x20000c30
 8001df0:	3ff00000 	.word	0x3ff00000
 8001df4:	20000cb0 	.word	0x20000cb0
 8001df8:	200011f4 	.word	0x200011f4
 8001dfc:	20001234 	.word	0x20001234
 8001e00:	20001274 	.word	0x20001274

08001e04 <audioMap>:
#endif

uint16_t audioMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) { //Map function spacial
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	69b9      	ldr	r1, [r7, #24]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	1a8a      	subs	r2, r1, r2
 8001e1e:	fb03 f202 	mul.w	r2, r3, r2
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	1acb      	subs	r3, r1, r3
 8001e28:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	b29b      	uxth	r3, r3
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <graphMAG>:


//AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA Audio Adjustments


void graphMAG() { //draws FFT magnitudes MAG[0] to MAG[15] on OLED and RGB Matrix
 8001e40:	b5b0      	push	{r4, r5, r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8001e46:	f000 fdaf 	bl	80029a8 <SSD1306_Clear>
#if SIMULATE
  	SSD1306_Puti(127-(7*5), 0, signalFrequency, 5);
#endif
  for(int k=0; k<USEDBINS; k++) SSD1306_DrawFilledRectangle(8*k, (uint16_t)((SSD1306_HEIGHT-1)-abs(audioMap(MAGI[k],MAGImin[k],MAGImax[k],0,SSD1306_HEIGHT-1))), 6, (uint16_t)(abs(audioMap(MAGI[k],MAGImin[k],MAGImax[k],0,SSD1306_HEIGHT-1))), SSD1306_COLOR_WHITE); //draw 16 bars abs(x[k]) on (0 to k/2)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e036      	b.n	8001ebe <graphMAG+0x7e>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	b29c      	uxth	r4, r3
 8001e58:	4a59      	ldr	r2, [pc, #356]	; (8001fc0 <graphMAG+0x180>)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <graphMAG+0x184>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e68:	4a57      	ldr	r2, [pc, #348]	; (8001fc8 <graphMAG+0x188>)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e70:	231f      	movs	r3, #31
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2300      	movs	r3, #0
 8001e76:	f7ff ffc5 	bl	8001e04 <audioMap>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f1c3 031f 	rsb	r3, r3, #31
 8001e80:	b29d      	uxth	r5, r3
 8001e82:	4a4f      	ldr	r2, [pc, #316]	; (8001fc0 <graphMAG+0x180>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001e8a:	4a4e      	ldr	r2, [pc, #312]	; (8001fc4 <graphMAG+0x184>)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e92:	4a4d      	ldr	r2, [pc, #308]	; (8001fc8 <graphMAG+0x188>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e9a:	231f      	movs	r3, #31
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f7ff ffb0 	bl	8001e04 <audioMap>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	4613      	mov	r3, r2
 8001eae:	2206      	movs	r2, #6
 8001eb0:	4629      	mov	r1, r5
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f000 fd2b 	bl	800290e <SSD1306_DrawFilledRectangle>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	ddc5      	ble.n	8001e50 <graphMAG+0x10>
  SSD1306_UpdateScreen(); //display //this may be calling the display too much
 8001ec4:	f000 fd78 	bl	80029b8 <SSD1306_UpdateScreen>
  int k = 5;
 8001ec8:	2305      	movs	r3, #5
 8001eca:	603b      	str	r3, [r7, #0]
  BlankScreen(BLACK);
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f000 f8eb 	bl	80020a8 <BlankScreen>
  for(int x=0; x<USEDBINS; x++){ //graph on rgb glasses. mirrored. only showing lower 8 freqs.
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	e064      	b.n	8001fa2 <graphMAG+0x162>
	  if(MAG[0] > MAGmax[0]*0.9) getrand(randSelect); //Careful, This is using the double. if the lowest used freq hits 75% of its make then change colors.
 8001ed8:	4b3c      	ldr	r3, [pc, #240]	; (8001fcc <graphMAG+0x18c>)
 8001eda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ede:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <graphMAG+0x190>)
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	a334      	add	r3, pc, #208	; (adr r3, 8001fb8 <graphMAG+0x178>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe faed 	bl	80004c8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f7fe fd77 	bl	80009e8 <__aeabi_dcmpgt>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <graphMAG+0xca>
 8001f00:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <graphMAG+0x194>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f000 f8e7 	bl	80020d8 <getrand>
	  for(uint16_t y=0; y<audioMap(MAGI[x],MAGImin[x],MAGImax[x],0, numRows); y++){
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	80fb      	strh	r3, [r7, #6]
 8001f0e:	e02f      	b.n	8001f70 <graphMAG+0x130>
		if(MAGI[x]>MAGImin[x]+HOFFSET_SCALER){//only display if greater than MAGmin + 4;
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <graphMAG+0x180>)
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f18:	492a      	ldr	r1, [pc, #168]	; (8001fc4 <graphMAG+0x184>)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f20:	3304      	adds	r3, #4
 8001f22:	429a      	cmp	r2, r3
 8001f24:	dd21      	ble.n	8001f6a <graphMAG+0x12a>
		  if(x<8){
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b07      	cmp	r3, #7
 8001f2a:	dc0e      	bgt.n	8001f4a <graphMAG+0x10a>
			  setPixelColor(ColumnArray[x][y], Forecolor);   //I changed this to work with the 168 led display(21 cols) and 32 (64/2 usable) Bins
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	492a      	ldr	r1, [pc, #168]	; (8001fd8 <graphMAG+0x198>)
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	00d2      	lsls	r2, r2, #3
 8001f34:	440a      	add	r2, r1
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <graphMAG+0x19c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 f85a 	bl	8001ffc <setPixelColor>
 8001f48:	e00f      	b.n	8001f6a <graphMAG+0x12a>
		  //setPixelColor(ColumnArray[numCols-1-x][y], Forecolor); //mirror but x has to count to USEDBINS/2
		  }else{
			  setPixelColor(ColumnArray[x+k][y], Forecolor);   //I changed this to work with the 168 led display(21 cols) and 32 (64/2 usable) Bins
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	441a      	add	r2, r3
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4921      	ldr	r1, [pc, #132]	; (8001fd8 <graphMAG+0x198>)
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	440a      	add	r2, r1
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <graphMAG+0x19c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 f849 	bl	8001ffc <setPixelColor>
	  for(uint16_t y=0; y<audioMap(MAGI[x],MAGImin[x],MAGImax[x],0, numRows); y++){
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	80fb      	strh	r3, [r7, #6]
 8001f70:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <graphMAG+0x180>)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <graphMAG+0x184>)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001f80:	4a11      	ldr	r2, [pc, #68]	; (8001fc8 <graphMAG+0x188>)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f88:	2308      	movs	r3, #8
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f7ff ff39 	bl	8001e04 <audioMap>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d3b9      	bcc.n	8001f10 <graphMAG+0xd0>
  for(int x=0; x<USEDBINS; x++){ //graph on rgb glasses. mirrored. only showing lower 8 freqs.
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b0f      	cmp	r3, #15
 8001fa6:	dd97      	ble.n	8001ed8 <graphMAG+0x98>
		  }
		}

	  }
  }
  show();
 8001fa8:	f000 f81a 	bl	8001fe0 <show>
}
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	cccccccd 	.word	0xcccccccd
 8001fbc:	3feccccc 	.word	0x3feccccc
 8001fc0:	200011f4 	.word	0x200011f4
 8001fc4:	20001234 	.word	0x20001234
 8001fc8:	20001274 	.word	0x20001274
 8001fcc:	20000bb0 	.word	0x20000bb0
 8001fd0:	20000c30 	.word	0x20000c30
 8001fd4:	200007a0 	.word	0x200007a0
 8001fd8:	0800add0 	.word	0x0800add0
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <show>:
}
show();
}


void show(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
HAL_SPI_Transmit_DMA(&hspi2, myData, (NUMLEDS*EXPANDFACTOR)+SPILOWTIME); //Begin SPI - SPI DMA data burst to LEDS
 8001fe4:	f240 6206 	movw	r2, #1542	; 0x606
 8001fe8:	4902      	ldr	r1, [pc, #8]	; (8001ff4 <show+0x14>)
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <show+0x18>)
 8001fec:	f005 fb32 	bl	8007654 <HAL_SPI_Transmit_DMA>
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000194 	.word	0x20000194
 8001ff8:	200012c0 	.word	0x200012c0

08001ffc <setPixelColor>:


//ToDo: testing LUT vs Algorith to generate SPI data. I can save 1kb of flash text space by using a algorith instead of a LUT
//Todo: All the RGB SPI stuff should be in a class. (pixel timing type, number of pixels, brightness?, display buffer, funtions)
void setPixelColor(int pixelNum, uint32_t c){ //pass in a Pixel Number and 32bit Color and map to 9 bytes
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	  uint8_t myGRB[3]; //create an array to hold the GRB bytes for one 23bit color
	  for(int x=0; x<3; x++) myGRB[x] = (c >> ((2-x) * 8)) & 0xFF; //extract the green,red,blue from the 32bit and write the 8bit values into myGRB array
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	e010      	b.n	800202e <setPixelColor+0x32>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f1c3 0302 	rsb	r3, r3, #2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	fa22 f303 	lsr.w	r3, r2, r3
 800201a:	b2d9      	uxtb	r1, r3
 800201c:	f107 0208 	add.w	r2, r7, #8
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	4413      	add	r3, r2
 8002024:	460a      	mov	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b02      	cmp	r3, #2
 8002032:	ddeb      	ble.n	800200c <setPixelColor+0x10>
	  for(int y=0; y<3; y++){ //this is to index the G,R,B bytes
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e028      	b.n	800208c <setPixelColor+0x90>
	    for(int x=0; x<3; x++)  myData[(y*3)+(pixelNum*9)+x] = (bitExpand[myGRB[y]] >> ((2-x) * 8)) & 0xFF; //expand green, red, blue. from 1 byte into 3 bytes each (9 bytes total)
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e01f      	b.n	8002080 <setPixelColor+0x84>
 8002040:	f107 0208 	add.w	r2, r7, #8
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <setPixelColor+0xa4>)
 800204e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1c3 0302 	rsb	r3, r3, #2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	fa22 f003 	lsr.w	r0, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	1899      	adds	r1, r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	18ca      	adds	r2, r1, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	b2c1      	uxtb	r1, r0
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <setPixelColor+0xa8>)
 8002078:	54d1      	strb	r1, [r2, r3]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b02      	cmp	r3, #2
 8002084:	dddc      	ble.n	8002040 <setPixelColor+0x44>
	  for(int y=0; y<3; y++){ //this is to index the G,R,B bytes
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	3301      	adds	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	2b02      	cmp	r3, #2
 8002090:	ddd3      	ble.n	800203a <setPixelColor+0x3e>
	  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	0800a9d0 	.word	0x0800a9d0
 80020a4:	20000194 	.word	0x20000194

080020a8 <BlankScreen>:
	return ((uint32_t)myGRB[0] << 16) | ((uint32_t)myGRB[1] <<  8 | (uint32_t) myGRB[2]); //return a uint32_t value for the color stored on the led
}



void BlankScreen(uint32_t c) { //quickly set the entire screen one color
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < NUMLEDS; i++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e006      	b.n	80020c4 <BlankScreen+0x1c>
    setPixelColor(i, c);
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f7ff ff9f 	bl	8001ffc <setPixelColor>
  for (int i = 0; i < NUMLEDS; i++) {
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2ba7      	cmp	r3, #167	; 0xa7
 80020c8:	ddf5      	ble.n	80020b6 <BlankScreen+0xe>
  }
  show();
 80020ca:	f7ff ff89 	bl	8001fe0 <show>
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <getrand>:
	}

}


void getrand(int c) { // trying to make it //the goal is to get a random forecolor that is not white, then find the opposite of
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  //rand usage: int myRandomnumber = (rand() % (MAX - MIN + 1)) + MIN;
	//getrand requries 0,1,2,3, or specify what type of color to return
      switch ((rand() % (2 - 0 + 1)) + 0) { //0 to 3 //map(rand(),0,32767,0,2)      //could be replaced using my randomNum function
 80020e0:	f007 fc1a 	bl	8009918 <rand>
 80020e4:	4601      	mov	r1, r0
 80020e6:	4b5a      	ldr	r3, [pc, #360]	; (8002250 <getrand+0x178>)
 80020e8:	fb83 3201 	smull	r3, r2, r3, r1
 80020ec:	17cb      	asrs	r3, r1, #31
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	441a      	add	r2, r3
 80020f6:	1a8b      	subs	r3, r1, r2
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d065      	beq.n	80021c8 <getrand+0xf0>
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	f300 8097 	bgt.w	8002230 <getrand+0x158>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <getrand+0x34>
 8002106:	2b01      	cmp	r3, #1
 8002108:	d02f      	beq.n	800216a <getrand+0x92>
 800210a:	e091      	b.n	8002230 <getrand+0x158>
        case 0:                                 //multi
            green = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 800210c:	f007 fc04 	bl	8009918 <rand>
 8002110:	4602      	mov	r2, r0
 8002112:	4b50      	ldr	r3, [pc, #320]	; (8002254 <getrand+0x17c>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	fb92 f1f3 	sdiv	r1, r2, r3
 800211c:	fb01 f303 	mul.w	r3, r1, r3
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b4b      	ldr	r3, [pc, #300]	; (8002258 <getrand+0x180>)
 800212a:	701a      	strb	r2, [r3, #0]
            red = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 800212c:	f007 fbf4 	bl	8009918 <rand>
 8002130:	4602      	mov	r2, r0
 8002132:	4b48      	ldr	r3, [pc, #288]	; (8002254 <getrand+0x17c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	3302      	adds	r3, #2
 8002138:	fb92 f1f3 	sdiv	r1, r2, r3
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b44      	ldr	r3, [pc, #272]	; (800225c <getrand+0x184>)
 800214a:	701a      	strb	r2, [r3, #0]
            blue = 0;
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <getrand+0x188>)
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
            if(green==0 && red==0) green = 1;
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <getrand+0x180>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d165      	bne.n	8002226 <getrand+0x14e>
 800215a:	4b40      	ldr	r3, [pc, #256]	; (800225c <getrand+0x184>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d161      	bne.n	8002226 <getrand+0x14e>
 8002162:	4b3d      	ldr	r3, [pc, #244]	; (8002258 <getrand+0x180>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
          break;
 8002168:	e05d      	b.n	8002226 <getrand+0x14e>

        case 1:
        	 green = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 800216a:	f007 fbd5 	bl	8009918 <rand>
 800216e:	4602      	mov	r2, r0
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <getrand+0x17c>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	3302      	adds	r3, #2
 8002176:	fb92 f1f3 	sdiv	r1, r2, r3
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b34      	ldr	r3, [pc, #208]	; (8002258 <getrand+0x180>)
 8002188:	701a      	strb	r2, [r3, #0]
        	 blue = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 800218a:	f007 fbc5 	bl	8009918 <rand>
 800218e:	4602      	mov	r2, r0
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <getrand+0x17c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	fb92 f1f3 	sdiv	r1, r2, r3
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <getrand+0x188>)
 80021a8:	701a      	strb	r2, [r3, #0]
        	 red = 0;
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <getrand+0x184>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
        	 if(green==0 && blue==0) blue = 1;
 80021b0:	4b29      	ldr	r3, [pc, #164]	; (8002258 <getrand+0x180>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d138      	bne.n	800222a <getrand+0x152>
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <getrand+0x188>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d134      	bne.n	800222a <getrand+0x152>
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <getrand+0x188>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	701a      	strb	r2, [r3, #0]
          break;
 80021c6:	e030      	b.n	800222a <getrand+0x152>

        case 2:
        	 blue = (uint8_t) 2*((rand() % ((Brange+1) - (0) + 1)) + 0);
 80021c8:	f007 fba6 	bl	8009918 <rand>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <getrand+0x17c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3302      	adds	r3, #2
 80021d4:	fb92 f1f3 	sdiv	r1, r2, r3
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <getrand+0x188>)
 80021e6:	701a      	strb	r2, [r3, #0]
        	 red = (uint8_t) 2*((rand() % ((Brange+1) - (1) + 1)) + 0);
 80021e8:	f007 fb96 	bl	8009918 <rand>
 80021ec:	4602      	mov	r2, r0
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <getrand+0x17c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	3301      	adds	r3, #1
 80021f4:	fb92 f1f3 	sdiv	r1, r2, r3
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <getrand+0x184>)
 8002206:	701a      	strb	r2, [r3, #0]
        	 green = 0;
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <getrand+0x180>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
        	 if(blue==0 && red==0) red = 1;
 800220e:	4b14      	ldr	r3, [pc, #80]	; (8002260 <getrand+0x188>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10b      	bne.n	800222e <getrand+0x156>
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <getrand+0x184>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <getrand+0x156>
 800221e:	4b0f      	ldr	r3, [pc, #60]	; (800225c <getrand+0x184>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
          break;
 8002224:	e003      	b.n	800222e <getrand+0x156>
          break;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <getrand+0x158>
          break;
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <getrand+0x158>
          break;
 800222e:	bf00      	nop
      }

  Forecolor = ((uint32_t)green << 16) | ((uint32_t)red <<  8) | ((uint32_t)blue);
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <getrand+0x180>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	041a      	lsls	r2, r3, #16
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <getrand+0x184>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	4313      	orrs	r3, r2
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <getrand+0x188>)
 8002240:	7812      	ldrb	r2, [r2, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	4a07      	ldr	r2, [pc, #28]	; (8002264 <getrand+0x18c>)
 8002246:	6013      	str	r3, [r2, #0]
  //CDC_Transmit_FS(Forecolor, 4); //prints color value to USB virtual serial port



}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	55555556 	.word	0x55555556
 8002254:	20000004 	.word	0x20000004
 8002258:	2000079a 	.word	0x2000079a
 800225c:	2000079b 	.word	0x2000079b
 8002260:	2000079c 	.word	0x2000079c
 8002264:	20000000 	.word	0x20000000

08002268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800226c:	b672      	cpsid	i
}
 800226e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002270:	e7fe      	b.n	8002270 <Error_Handler+0x8>
	...

08002274 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002278:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <MX_SPI2_Init+0x64>)
 800227a:	4a18      	ldr	r2, [pc, #96]	; (80022dc <MX_SPI2_Init+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <MX_SPI2_Init+0x64>)
 8002280:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002284:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_SPI2_Init+0x64>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <MX_SPI2_Init+0x64>)
 800228e:	2200      	movs	r2, #0
 8002290:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_SPI2_Init+0x64>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_SPI2_Init+0x64>)
 800229a:	2201      	movs	r2, #1
 800229c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022a8:	2218      	movs	r2, #24
 80022aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022c0:	220a      	movs	r2, #10
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022c4:	4804      	ldr	r0, [pc, #16]	; (80022d8 <MX_SPI2_Init+0x64>)
 80022c6:	f005 f941 	bl	800754c <HAL_SPI_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80022d0:	f7ff ffca 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	200012c0 	.word	0x200012c0
 80022dc:	40003800 	.word	0x40003800

080022e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <HAL_SPI_MspInit+0xc0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d14a      	bne.n	8002396 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002300:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_SPI_MspInit+0xc4>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_SPI_MspInit+0xc4>)
 8002306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_SPI_MspInit+0xc4>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_SPI_MspInit+0xc4>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4a21      	ldr	r2, [pc, #132]	; (80023a4 <HAL_SPI_MspInit+0xc4>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6193      	str	r3, [r2, #24]
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_SPI_MspInit+0xc4>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002330:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0310 	add.w	r3, r7, #16
 8002342:	4619      	mov	r1, r3
 8002344:	4818      	ldr	r0, [pc, #96]	; (80023a8 <HAL_SPI_MspInit+0xc8>)
 8002346:	f001 fdb7 	bl	8003eb8 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800234a:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_SPI_MspInit+0xd0>)
 800234e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 8002352:	2210      	movs	r2, #16
 8002354:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 800236a:	2200      	movs	r2, #0
 800236c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800237a:	480c      	ldr	r0, [pc, #48]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 800237c:	f001 fb2c 	bl	80039d8 <HAL_DMA_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 8002386:	f7ff ff6f 	bl	8002268 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 800238e:	649a      	str	r2, [r3, #72]	; 0x48
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <HAL_SPI_MspInit+0xcc>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40003800 	.word	0x40003800
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010c00 	.word	0x40010c00
 80023ac:	20001318 	.word	0x20001318
 80023b0:	40020058 	.word	0x40020058

080023b4 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60ba      	str	r2, [r7, #8]
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	81fb      	strh	r3, [r7, #14]
 80023c2:	460b      	mov	r3, r1
 80023c4:	81bb      	strh	r3, [r7, #12]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80023ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ce:	3307      	adds	r3, #7
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da00      	bge.n	80023d6 <SSD1306_DrawBitmap+0x22>
 80023d4:	3307      	adds	r3, #7
 80023d6:	10db      	asrs	r3, r3, #3
 80023d8:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80023de:	2300      	movs	r3, #0
 80023e0:	82bb      	strh	r3, [r7, #20]
 80023e2:	e044      	b.n	800246e <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	827b      	strh	r3, [r7, #18]
 80023e8:	e02f      	b.n	800244a <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80023ea:	8a7b      	ldrh	r3, [r7, #18]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80023f4:	7dfb      	ldrb	r3, [r7, #23]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
 80023fa:	e012      	b.n	8002422 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80023fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002400:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002404:	fb03 f202 	mul.w	r2, r3, r2
 8002408:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da00      	bge.n	8002412 <SSD1306_DrawBitmap+0x5e>
 8002410:	3307      	adds	r3, #7
 8002412:	10db      	asrs	r3, r3, #3
 8002414:	b21b      	sxth	r3, r3
 8002416:	4413      	add	r3, r2
 8002418:	461a      	mov	r2, r3
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002422:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002426:	2b00      	cmp	r3, #0
 8002428:	da09      	bge.n	800243e <SSD1306_DrawBitmap+0x8a>
 800242a:	89fa      	ldrh	r2, [r7, #14]
 800242c:	8a7b      	ldrh	r3, [r7, #18]
 800242e:	4413      	add	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	89b9      	ldrh	r1, [r7, #12]
 8002434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f90f 	bl	800265c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800243e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002442:	b29b      	uxth	r3, r3
 8002444:	3301      	adds	r3, #1
 8002446:	b29b      	uxth	r3, r3
 8002448:	827b      	strh	r3, [r7, #18]
 800244a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800244e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbc9      	blt.n	80023ea <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002456:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800245a:	b29b      	uxth	r3, r3
 800245c:	3301      	adds	r3, #1
 800245e:	b29b      	uxth	r3, r3
 8002460:	82bb      	strh	r3, [r7, #20]
 8002462:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002466:	b29b      	uxth	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	b29b      	uxth	r3, r3
 800246c:	81bb      	strh	r3, [r7, #12]
 800246e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002472:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002476:	429a      	cmp	r2, r3
 8002478:	dbb4      	blt.n	80023e4 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <SSD1306_Init>:
 Added some hardware reset GPIO during the init();

 using dma for all pixel data transfers.
 **/

uint8_t SSD1306_Init(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	//OLED Reset Pin (modified izzle)
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8002488:	2200      	movs	r2, #0
 800248a:	2102      	movs	r1, #2
 800248c:	4864      	ldr	r0, [pc, #400]	; (8002620 <SSD1306_Init+0x19c>)
 800248e:	f001 fe97 	bl	80041c0 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 8002492:	2032      	movs	r0, #50	; 0x32
 8002494:	f000 fd16 	bl	8002ec4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	2102      	movs	r1, #2
 800249c:	4860      	ldr	r0, [pc, #384]	; (8002620 <SSD1306_Init+0x19c>)
 800249e:	f001 fe8f 	bl	80041c0 <HAL_GPIO_WritePin>
	HAL_Delay (50);
 80024a2:	2032      	movs	r0, #50	; 0x32
 80024a4:	f000 fd0e 	bl	8002ec4 <HAL_Delay>
	//end izzle

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80024a8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80024ac:	2201      	movs	r2, #1
 80024ae:	2178      	movs	r1, #120	; 0x78
 80024b0:	485c      	ldr	r0, [pc, #368]	; (8002624 <SSD1306_Init+0x1a0>)
 80024b2:	f002 fa2d 	bl	8004910 <HAL_I2C_IsDeviceReady>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <SSD1306_Init+0x3c>
		/* Return false */
		return 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	e0ac      	b.n	800261a <SSD1306_Init+0x196>
	}
	
	/* A little delay */
	HAL_Delay(100);
 80024c0:	2064      	movs	r0, #100	; 0x64
 80024c2:	f000 fcff 	bl	8002ec4 <HAL_Delay>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80024c6:	22ae      	movs	r2, #174	; 0xae
 80024c8:	2100      	movs	r1, #0
 80024ca:	2078      	movs	r0, #120	; 0x78
 80024cc:	f000 fa98 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode PAGE
 80024d0:	2220      	movs	r2, #32
 80024d2:	2100      	movs	r1, #0
 80024d4:	2078      	movs	r0, #120	; 0x78
 80024d6:	f000 fa93 	bl	8002a00 <ssd1306_I2C_Write>
	//SSD1306_WRITECOMMAND(0x10); //10   //00,Horizontal Addressing Mode; 01,Vertical Addressing Mode; 10,Page Addressing Mode (RESET);11,Invalid
	//SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7

	SSD1306_WRITECOMMAND(0x00); //izzle horizontal mode addressing
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2078      	movs	r0, #120	; 0x78
 80024e0:	f000 fa8e 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //izzle set page range in Horizontal addressing
 80024e4:	2222      	movs	r2, #34	; 0x22
 80024e6:	2100      	movs	r1, #0
 80024e8:	2078      	movs	r0, #120	; 0x78
 80024ea:	f000 fa89 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //izzle page start 00
 80024ee:	2200      	movs	r2, #0
 80024f0:	2100      	movs	r1, #0
 80024f2:	2078      	movs	r0, #120	; 0x78
 80024f4:	f000 fa84 	bl	8002a00 <ssd1306_I2C_Write>
#if SSD1306_HEIGHT==32
		SSD1306_WRITECOMMAND(0x03); //izzle 128x32 Oled
 80024f8:	2203      	movs	r2, #3
 80024fa:	2100      	movs	r1, #0
 80024fc:	2078      	movs	r0, #120	; 0x78
 80024fe:	f000 fa7f 	bl	8002a00 <ssd1306_I2C_Write>
#else
		SSD1306_WRITECOMMAND(0x07); //izzle 128x64 Oled
#endif
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction //0xC8 or 0xC0
 8002502:	22c8      	movs	r2, #200	; 0xc8
 8002504:	2100      	movs	r1, #0
 8002506:	2078      	movs	r0, #120	; 0x78
 8002508:	f000 fa7a 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2078      	movs	r0, #120	; 0x78
 8002512:	f000 fa75 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002516:	2210      	movs	r2, #16
 8002518:	2100      	movs	r1, #0
 800251a:	2078      	movs	r0, #120	; 0x78
 800251c:	f000 fa70 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	2078      	movs	r0, #120	; 0x78
 8002526:	f000 fa6b 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800252a:	2281      	movs	r2, #129	; 0x81
 800252c:	2100      	movs	r1, #0
 800252e:	2078      	movs	r0, #120	; 0x78
 8002530:	f000 fa66 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002534:	22ff      	movs	r2, #255	; 0xff
 8002536:	2100      	movs	r1, #0
 8002538:	2078      	movs	r0, #120	; 0x78
 800253a:	f000 fa61 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800253e:	22a1      	movs	r2, #161	; 0xa1
 8002540:	2100      	movs	r1, #0
 8002542:	2078      	movs	r0, #120	; 0x78
 8002544:	f000 fa5c 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002548:	22a6      	movs	r2, #166	; 0xa6
 800254a:	2100      	movs	r1, #0
 800254c:	2078      	movs	r0, #120	; 0x78
 800254e:	f000 fa57 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002552:	22a8      	movs	r2, #168	; 0xa8
 8002554:	2100      	movs	r1, #0
 8002556:	2078      	movs	r0, #120	; 0x78
 8002558:	f000 fa52 	bl	8002a00 <ssd1306_I2C_Write>
#if SSD1306_HEIGHT==32
		SSD1306_WRITECOMMAND(0x1F); //128x32 Oled
 800255c:	221f      	movs	r2, #31
 800255e:	2100      	movs	r1, #0
 8002560:	2078      	movs	r0, #120	; 0x78
 8002562:	f000 fa4d 	bl	8002a00 <ssd1306_I2C_Write>
#else
		SSD1306_WRITECOMMAND(0x3F); //128x64 Oled
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002566:	22a4      	movs	r2, #164	; 0xa4
 8002568:	2100      	movs	r1, #0
 800256a:	2078      	movs	r0, #120	; 0x78
 800256c:	f000 fa48 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002570:	22d3      	movs	r2, #211	; 0xd3
 8002572:	2100      	movs	r1, #0
 8002574:	2078      	movs	r0, #120	; 0x78
 8002576:	f000 fa43 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	2078      	movs	r0, #120	; 0x78
 8002580:	f000 fa3e 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002584:	22d5      	movs	r2, #213	; 0xd5
 8002586:	2100      	movs	r1, #0
 8002588:	2078      	movs	r0, #120	; 0x78
 800258a:	f000 fa39 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800258e:	22f0      	movs	r2, #240	; 0xf0
 8002590:	2100      	movs	r1, #0
 8002592:	2078      	movs	r0, #120	; 0x78
 8002594:	f000 fa34 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002598:	22d9      	movs	r2, #217	; 0xd9
 800259a:	2100      	movs	r1, #0
 800259c:	2078      	movs	r0, #120	; 0x78
 800259e:	f000 fa2f 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80025a2:	2222      	movs	r2, #34	; 0x22
 80025a4:	2100      	movs	r1, #0
 80025a6:	2078      	movs	r0, #120	; 0x78
 80025a8:	f000 fa2a 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80025ac:	22da      	movs	r2, #218	; 0xda
 80025ae:	2100      	movs	r1, #0
 80025b0:	2078      	movs	r0, #120	; 0x78
 80025b2:	f000 fa25 	bl	8002a00 <ssd1306_I2C_Write>
#if SSD1306_HEIGHT==32
		SSD1306_WRITECOMMAND(0x02); //128x32 Oled
 80025b6:	2202      	movs	r2, #2
 80025b8:	2100      	movs	r1, #0
 80025ba:	2078      	movs	r0, #120	; 0x78
 80025bc:	f000 fa20 	bl	8002a00 <ssd1306_I2C_Write>
#else
		SSD1306_WRITECOMMAND(0x12); //128x64 Oled
#endif
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80025c0:	22db      	movs	r2, #219	; 0xdb
 80025c2:	2100      	movs	r1, #0
 80025c4:	2078      	movs	r0, #120	; 0x78
 80025c6:	f000 fa1b 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80025ca:	2220      	movs	r2, #32
 80025cc:	2100      	movs	r1, #0
 80025ce:	2078      	movs	r0, #120	; 0x78
 80025d0:	f000 fa16 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80025d4:	228d      	movs	r2, #141	; 0x8d
 80025d6:	2100      	movs	r1, #0
 80025d8:	2078      	movs	r0, #120	; 0x78
 80025da:	f000 fa11 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80025de:	2214      	movs	r2, #20
 80025e0:	2100      	movs	r1, #0
 80025e2:	2078      	movs	r0, #120	; 0x78
 80025e4:	f000 fa0c 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80025e8:	22af      	movs	r2, #175	; 0xaf
 80025ea:	2100      	movs	r1, #0
 80025ec:	2078      	movs	r0, #120	; 0x78
 80025ee:	f000 fa07 	bl	8002a00 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80025f2:	222e      	movs	r2, #46	; 0x2e
 80025f4:	2100      	movs	r1, #0
 80025f6:	2078      	movs	r0, #120	; 0x78
 80025f8:	f000 fa02 	bl	8002a00 <ssd1306_I2C_Write>

	//HAL_Delay(500);
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f000 f815 	bl	800262c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002602:	f000 f9d9 	bl	80029b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <SSD1306_Init+0x1a4>)
 8002608:	2200      	movs	r2, #0
 800260a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <SSD1306_Init+0x1a4>)
 800260e:	2200      	movs	r2, #0
 8002610:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <SSD1306_Init+0x1a4>)
 8002614:	2201      	movs	r2, #1
 8002616:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40010c00 	.word	0x40010c00
 8002624:	200000fc 	.word	0x200000fc
 8002628:	2000155c 	.word	0x2000155c

0800262c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <SSD1306_Fill+0x14>
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <SSD1306_Fill+0x16>
 8002640:	23ff      	movs	r3, #255	; 0xff
 8002642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002646:	4619      	mov	r1, r3
 8002648:	4803      	ldr	r0, [pc, #12]	; (8002658 <SSD1306_Fill+0x2c>)
 800264a:	f007 f95d 	bl	8009908 <memset>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000135c 	.word	0x2000135c

0800265c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
 8002666:	460b      	mov	r3, r1
 8002668:	80bb      	strh	r3, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	70fb      	strb	r3, [r7, #3]
	if (
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	2b7f      	cmp	r3, #127	; 0x7f
 8002672:	d848      	bhi.n	8002706 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002674:	88bb      	ldrh	r3, [r7, #4]
 8002676:	2b1f      	cmp	r3, #31
 8002678:	d845      	bhi.n	8002706 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800267a:	4b25      	ldr	r3, [pc, #148]	; (8002710 <SSD1306_DrawPixel+0xb4>)
 800267c:	791b      	ldrb	r3, [r3, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf0c      	ite	eq
 8002688:	2301      	moveq	r3, #1
 800268a:	2300      	movne	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d11a      	bne.n	80026cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002696:	88fa      	ldrh	r2, [r7, #6]
 8002698:	88bb      	ldrh	r3, [r7, #4]
 800269a:	08db      	lsrs	r3, r3, #3
 800269c:	b298      	uxth	r0, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	01db      	lsls	r3, r3, #7
 80026a2:	4413      	add	r3, r2
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <SSD1306_DrawPixel+0xb8>)
 80026a6:	5cd3      	ldrb	r3, [r2, r3]
 80026a8:	b25a      	sxtb	r2, r3
 80026aa:	88bb      	ldrh	r3, [r7, #4]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	2101      	movs	r1, #1
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b259      	sxtb	r1, r3
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	4603      	mov	r3, r0
 80026c0:	01db      	lsls	r3, r3, #7
 80026c2:	4413      	add	r3, r2
 80026c4:	b2c9      	uxtb	r1, r1
 80026c6:	4a13      	ldr	r2, [pc, #76]	; (8002714 <SSD1306_DrawPixel+0xb8>)
 80026c8:	54d1      	strb	r1, [r2, r3]
 80026ca:	e01d      	b.n	8002708 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	88bb      	ldrh	r3, [r7, #4]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	b298      	uxth	r0, r3
 80026d4:	4603      	mov	r3, r0
 80026d6:	01db      	lsls	r3, r3, #7
 80026d8:	4413      	add	r3, r2
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <SSD1306_DrawPixel+0xb8>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	b25a      	sxtb	r2, r3
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f303 	lsl.w	r3, r1, r3
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	4013      	ands	r3, r2
 80026f4:	b259      	sxtb	r1, r3
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	4603      	mov	r3, r0
 80026fa:	01db      	lsls	r3, r3, #7
 80026fc:	4413      	add	r3, r2
 80026fe:	b2c9      	uxtb	r1, r1
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <SSD1306_DrawPixel+0xb8>)
 8002702:	54d1      	strb	r1, [r2, r3]
 8002704:	e000      	b.n	8002708 <SSD1306_DrawPixel+0xac>
		return;
 8002706:	bf00      	nop
	}
}
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	2000155c 	.word	0x2000155c
 8002714:	2000135c 	.word	0x2000135c

08002718 <SSD1306_DrawLine>:
	return *str;
}
 

//Todo: this sucks. all you need is to use y=mx+b. m=(y2-y1)/(x2-x1)
void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4623      	mov	r3, r4
 8002728:	80fb      	strh	r3, [r7, #6]
 800272a:	4603      	mov	r3, r0
 800272c:	80bb      	strh	r3, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]
 8002732:	4613      	mov	r3, r2
 8002734:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	2b7f      	cmp	r3, #127	; 0x7f
 800273a:	d901      	bls.n	8002740 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800273c:	237f      	movs	r3, #127	; 0x7f
 800273e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8002740:	887b      	ldrh	r3, [r7, #2]
 8002742:	2b7f      	cmp	r3, #127	; 0x7f
 8002744:	d901      	bls.n	800274a <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8002746:	237f      	movs	r3, #127	; 0x7f
 8002748:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800274a:	88bb      	ldrh	r3, [r7, #4]
 800274c:	2b1f      	cmp	r3, #31
 800274e:	d901      	bls.n	8002754 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002750:	231f      	movs	r3, #31
 8002752:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002754:	883b      	ldrh	r3, [r7, #0]
 8002756:	2b1f      	cmp	r3, #31
 8002758:	d901      	bls.n	800275e <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800275a:	231f      	movs	r3, #31
 800275c:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	429a      	cmp	r2, r3
 8002764:	d205      	bcs.n	8002772 <SSD1306_DrawLine+0x5a>
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	88fb      	ldrh	r3, [r7, #6]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	b29b      	uxth	r3, r3
 800276e:	b21b      	sxth	r3, r3
 8002770:	e004      	b.n	800277c <SSD1306_DrawLine+0x64>
 8002772:	88fa      	ldrh	r2, [r7, #6]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	b21b      	sxth	r3, r3
 800277c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 800277e:	88ba      	ldrh	r2, [r7, #4]
 8002780:	883b      	ldrh	r3, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d205      	bcs.n	8002792 <SSD1306_DrawLine+0x7a>
 8002786:	883a      	ldrh	r2, [r7, #0]
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	b21b      	sxth	r3, r3
 8002790:	e004      	b.n	800279c <SSD1306_DrawLine+0x84>
 8002792:	88ba      	ldrh	r2, [r7, #4]
 8002794:	883b      	ldrh	r3, [r7, #0]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	b21b      	sxth	r3, r3
 800279c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 800279e:	88fa      	ldrh	r2, [r7, #6]
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d201      	bcs.n	80027aa <SSD1306_DrawLine+0x92>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e001      	b.n	80027ae <SSD1306_DrawLine+0x96>
 80027aa:	f04f 33ff 	mov.w	r3, #4294967295
 80027ae:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80027b0:	88ba      	ldrh	r2, [r7, #4]
 80027b2:	883b      	ldrh	r3, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d201      	bcs.n	80027bc <SSD1306_DrawLine+0xa4>
 80027b8:	2301      	movs	r3, #1
 80027ba:	e001      	b.n	80027c0 <SSD1306_DrawLine+0xa8>
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80027c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80027c6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dd06      	ble.n	80027dc <SSD1306_DrawLine+0xc4>
 80027ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027d2:	0fda      	lsrs	r2, r3, #31
 80027d4:	4413      	add	r3, r2
 80027d6:	105b      	asrs	r3, r3, #1
 80027d8:	b21b      	sxth	r3, r3
 80027da:	e006      	b.n	80027ea <SSD1306_DrawLine+0xd2>
 80027dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80027e0:	0fda      	lsrs	r2, r3, #31
 80027e2:	4413      	add	r3, r2
 80027e4:	105b      	asrs	r3, r3, #1
 80027e6:	425b      	negs	r3, r3
 80027e8:	b21b      	sxth	r3, r3
 80027ea:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80027ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d129      	bne.n	8002848 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80027f4:	883a      	ldrh	r2, [r7, #0]
 80027f6:	88bb      	ldrh	r3, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d205      	bcs.n	8002808 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80027fc:	883b      	ldrh	r3, [r7, #0]
 80027fe:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002804:	893b      	ldrh	r3, [r7, #8]
 8002806:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	429a      	cmp	r2, r3
 800280e:	d205      	bcs.n	800281c <SSD1306_DrawLine+0x104>
			tmp = x1;
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002818:	893b      	ldrh	r3, [r7, #8]
 800281a:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800281c:	88bb      	ldrh	r3, [r7, #4]
 800281e:	82bb      	strh	r3, [r7, #20]
 8002820:	e00c      	b.n	800283c <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8002822:	8ab9      	ldrh	r1, [r7, #20]
 8002824:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002828:	88fb      	ldrh	r3, [r7, #6]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff16 	bl	800265c <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8002830:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002834:	b29b      	uxth	r3, r3
 8002836:	3301      	adds	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	82bb      	strh	r3, [r7, #20]
 800283c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002840:	883b      	ldrh	r3, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	dded      	ble.n	8002822 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8002846:	e05f      	b.n	8002908 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8002848:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d129      	bne.n	80028a4 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002850:	883a      	ldrh	r2, [r7, #0]
 8002852:	88bb      	ldrh	r3, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	d205      	bcs.n	8002864 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8002858:	883b      	ldrh	r3, [r7, #0]
 800285a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800285c:	88bb      	ldrh	r3, [r7, #4]
 800285e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002860:	893b      	ldrh	r3, [r7, #8]
 8002862:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002864:	887a      	ldrh	r2, [r7, #2]
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	429a      	cmp	r2, r3
 800286a:	d205      	bcs.n	8002878 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	82bb      	strh	r3, [r7, #20]
 800287c:	e00c      	b.n	8002898 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 800287e:	8abb      	ldrh	r3, [r7, #20]
 8002880:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002884:	88b9      	ldrh	r1, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fee8 	bl	800265c <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800288c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002890:	b29b      	uxth	r3, r3
 8002892:	3301      	adds	r3, #1
 8002894:	b29b      	uxth	r3, r3
 8002896:	82bb      	strh	r3, [r7, #20]
 8002898:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dded      	ble.n	800287e <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80028a2:	e031      	b.n	8002908 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80028a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80028a8:	88b9      	ldrh	r1, [r7, #4]
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fed5 	bl	800265c <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80028b2:	88fa      	ldrh	r2, [r7, #6]
 80028b4:	887b      	ldrh	r3, [r7, #2]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d103      	bne.n	80028c2 <SSD1306_DrawLine+0x1aa>
 80028ba:	88ba      	ldrh	r2, [r7, #4]
 80028bc:	883b      	ldrh	r3, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d021      	beq.n	8002906 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80028c2:	8afb      	ldrh	r3, [r7, #22]
 80028c4:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80028c6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80028ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028ce:	425b      	negs	r3, r3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	dd08      	ble.n	80028e6 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 80028d4:	8afa      	ldrh	r2, [r7, #22]
 80028d6:	8a3b      	ldrh	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	b29b      	uxth	r3, r3
 80028dc:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 80028de:	89fa      	ldrh	r2, [r7, #14]
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	4413      	add	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 80028e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80028ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	dad8      	bge.n	80028a4 <SSD1306_DrawLine+0x18c>
			err += dx;
 80028f2:	8afa      	ldrh	r2, [r7, #22]
 80028f4:	8a7b      	ldrh	r3, [r7, #18]
 80028f6:	4413      	add	r3, r2
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80028fc:	89ba      	ldrh	r2, [r7, #12]
 80028fe:	88bb      	ldrh	r3, [r7, #4]
 8002900:	4413      	add	r3, r2
 8002902:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8002904:	e7ce      	b.n	80028a4 <SSD1306_DrawLine+0x18c>
			break;
 8002906:	bf00      	nop
		} 
	}
}
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd90      	pop	{r4, r7, pc}

0800290e <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 800290e:	b590      	push	{r4, r7, lr}
 8002910:	b087      	sub	sp, #28
 8002912:	af02      	add	r7, sp, #8
 8002914:	4604      	mov	r4, r0
 8002916:	4608      	mov	r0, r1
 8002918:	4611      	mov	r1, r2
 800291a:	461a      	mov	r2, r3
 800291c:	4623      	mov	r3, r4
 800291e:	80fb      	strh	r3, [r7, #6]
 8002920:	4603      	mov	r3, r0
 8002922:	80bb      	strh	r3, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
 8002928:	4613      	mov	r3, r2
 800292a:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	2b7f      	cmp	r3, #127	; 0x7f
 8002930:	d836      	bhi.n	80029a0 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8002932:	88bb      	ldrh	r3, [r7, #4]
 8002934:	2b1f      	cmp	r3, #31
 8002936:	d833      	bhi.n	80029a0 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	4413      	add	r3, r2
 800293e:	2b7f      	cmp	r3, #127	; 0x7f
 8002940:	dd03      	ble.n	800294a <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002948:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 800294a:	88ba      	ldrh	r2, [r7, #4]
 800294c:	883b      	ldrh	r3, [r7, #0]
 800294e:	4413      	add	r3, r2
 8002950:	2b1f      	cmp	r3, #31
 8002952:	dd03      	ble.n	800295c <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002954:	88bb      	ldrh	r3, [r7, #4]
 8002956:	f1c3 0320 	rsb	r3, r3, #32
 800295a:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e018      	b.n	8002994 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	b29a      	uxth	r2, r3
 8002966:	88bb      	ldrh	r3, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	b299      	uxth	r1, r3
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	887b      	ldrh	r3, [r7, #2]
 8002970:	4413      	add	r3, r2
 8002972:	b29c      	uxth	r4, r3
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	b29a      	uxth	r2, r3
 8002978:	88bb      	ldrh	r3, [r7, #4]
 800297a:	4413      	add	r3, r2
 800297c:	b29a      	uxth	r2, r3
 800297e:	88f8      	ldrh	r0, [r7, #6]
 8002980:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4613      	mov	r3, r2
 8002988:	4622      	mov	r2, r4
 800298a:	f7ff fec5 	bl	8002718 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	3301      	adds	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	b29b      	uxth	r3, r3
 8002998:	883a      	ldrh	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d2e1      	bcs.n	8002962 <SSD1306_DrawFilledRectangle+0x54>
 800299e:	e000      	b.n	80029a2 <SSD1306_DrawFilledRectangle+0x94>
		return;
 80029a0:	bf00      	nop
	}
}
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd90      	pop	{r4, r7, pc}

080029a8 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff fe3d 	bl	800262c <SSD1306_Fill>
    //SSD1306_UpdateScreen();
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <SSD1306_UpdateScreen>:
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////


void SSD1306_UpdateScreen(void) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af02      	add	r7, sp, #8
//changed the ssd1306 from page mode to "horizontal" mode 0x00. Now it auto-increments the pages.
//I think I am only getting HALF the framerate. because the ssd1306 has 8 pages.
// 8 pages is needed for a 64x128 Oled but only 4 pages is needed for a 32x128 Oled.
//so im fulling up page buffers on the SSD1306 that are not visible. But, the code is much simpler/faster now.
	//*** I fixed the above issue by setting the ssd1306 END PAGE to 3 (it was 7 but my oled only has 32 rows = 4 pages)
	while(hdma_i2c1_tx.State != HAL_DMA_STATE_READY); //these could be if statements if UpdateScreen was called in a timer.
 80029be:	bf00      	nop
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <SSD1306_UpdateScreen+0x3c>)
 80029c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d1fa      	bne.n	80029c0 <SSD1306_UpdateScreen+0x8>
	while(hi2c1.State != HAL_I2C_STATE_READY); //dma check to transmit. should be a if statement to prevent blocking
 80029ca:	bf00      	nop
 80029cc:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <SSD1306_UpdateScreen+0x40>)
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d1f9      	bne.n	80029cc <SSD1306_UpdateScreen+0x14>
	HAL_I2C_Mem_Write_DMA(&hi2c1, SSD1306_I2C_ADDR, 0x40, I2C_MEMADD_SIZE_8BIT, SSD1306_Buffer, BUFFER_SIZE);
 80029d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	4b07      	ldr	r3, [pc, #28]	; (80029fc <SSD1306_UpdateScreen+0x44>)
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2301      	movs	r3, #1
 80029e4:	2240      	movs	r2, #64	; 0x40
 80029e6:	2178      	movs	r1, #120	; 0x78
 80029e8:	4803      	ldr	r0, [pc, #12]	; (80029f8 <SSD1306_UpdateScreen+0x40>)
 80029ea:	f001 fe43 	bl	8004674 <HAL_I2C_Mem_Write_DMA>
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20000150 	.word	0x20000150
 80029f8:	200000fc 	.word	0x200000fc
 80029fc:	2000135c 	.word	0x2000135c

08002a00 <ssd1306_I2C_Write>:


//blocking mode for control commands
void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	4603      	mov	r3, r0
 8002a08:	71fb      	strb	r3, [r7, #7]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	71bb      	strb	r3, [r7, #6]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002a12:	79bb      	ldrb	r3, [r7, #6]
 8002a14:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002a16:	797b      	ldrb	r3, [r7, #5]
 8002a18:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	b299      	uxth	r1, r3
 8002a1e:	f107 020c 	add.w	r2, r7, #12
 8002a22:	230a      	movs	r3, #10
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2302      	movs	r3, #2
 8002a28:	4803      	ldr	r0, [pc, #12]	; (8002a38 <ssd1306_I2C_Write+0x38>)
 8002a2a:	f001 fd25 	bl	8004478 <HAL_I2C_Master_Transmit>
}
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	200000fc 	.word	0x200000fc

08002a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_MspInit+0x5c>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_MspInit+0x5c>)
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	6193      	str	r3, [r2, #24]
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_MspInit+0x5c>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_MspInit+0x5c>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <HAL_MspInit+0x5c>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	61d3      	str	r3, [r2, #28]
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <HAL_MspInit+0x5c>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_MspInit+0x60>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	4a04      	ldr	r2, [pc, #16]	; (8002a9c <HAL_MspInit+0x60>)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010000 	.word	0x40010000

08002aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <NMI_Handler+0x4>

08002aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <UsageFault_Handler+0x4>

08002abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae6:	f000 f9d1 	bl	8002e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA1_Channel5_IRQHandler+0x10>)
 8002af6:	f001 f89f 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20001318 	.word	0x20001318

08002b04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <DMA1_Channel6_IRQHandler+0x10>)
 8002b0a:	f001 f895 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000150 	.word	0x20000150

08002b18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <TIM3_IRQHandler+0x10>)
 8002b1e:	f005 f833 	bl	8007b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20001568 	.word	0x20001568

08002b2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <I2C1_EV_IRQHandler+0x10>)
 8002b32:	f002 f81b 	bl	8004b6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200000fc 	.word	0x200000fc

08002b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
	return 1;
 8002b44:	2301      	movs	r3, #1
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr

08002b4e <_kill>:

int _kill(int pid, int sig)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b58:	f006 feac 	bl	80098b4 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2216      	movs	r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
	return -1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_exit>:

void _exit (int status)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b76:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffe7 	bl	8002b4e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b80:	e7fe      	b.n	8002b80 <_exit+0x12>

08002b82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e00a      	b.n	8002baa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b94:	f3af 8000 	nop.w
 8002b98:	4601      	mov	r1, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	60ba      	str	r2, [r7, #8]
 8002ba0:	b2ca      	uxtb	r2, r1
 8002ba2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	dbf0      	blt.n	8002b94 <_read+0x12>
	}

return len;
 8002bb2:	687b      	ldr	r3, [r7, #4]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	e009      	b.n	8002be2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	60ba      	str	r2, [r7, #8]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	dbf1      	blt.n	8002bce <_write+0x12>
	}
	return len;
 8002bea:	687b      	ldr	r3, [r7, #4]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_close>:

int _close(int file)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
	return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <_isatty>:

int _isatty(int file)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
	return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c5c:	4a14      	ldr	r2, [pc, #80]	; (8002cb0 <_sbrk+0x5c>)
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <_sbrk+0x60>)
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <_sbrk+0x64>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c70:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <_sbrk+0x64>)
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <_sbrk+0x68>)
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <_sbrk+0x64>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d207      	bcs.n	8002c94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c84:	f006 fe16 	bl	80098b4 <__errno>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	e009      	b.n	8002ca8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <_sbrk+0x64>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9a:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <_sbrk+0x64>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a05      	ldr	r2, [pc, #20]	; (8002cb8 <_sbrk+0x64>)
 8002ca4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20005000 	.word	0x20005000
 8002cb4:	00000400 	.word	0x00000400
 8002cb8:	20001564 	.word	0x20001564
 8002cbc:	200015c8 	.word	0x200015c8

08002cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr

08002ccc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd2:	f107 0308 	add.w	r3, r7, #8
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <MX_TIM3_Init+0x98>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002cee:	4b1c      	ldr	r3, [pc, #112]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf4:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8002cfa:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002cfc:	f240 7207 	movw	r2, #1799	; 0x707
 8002d00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d02:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002d0e:	4814      	ldr	r0, [pc, #80]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002d10:	f004 fe98 	bl	8007a44 <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002d1a:	f7ff faa5 	bl	8002268 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	4619      	mov	r1, r3
 8002d2a:	480d      	ldr	r0, [pc, #52]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002d2c:	f005 f834 	bl	8007d98 <HAL_TIM_ConfigClockSource>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002d36:	f7ff fa97 	bl	8002268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d42:	463b      	mov	r3, r7
 8002d44:	4619      	mov	r1, r3
 8002d46:	4806      	ldr	r0, [pc, #24]	; (8002d60 <MX_TIM3_Init+0x94>)
 8002d48:	f005 fa06 	bl	8008158 <HAL_TIMEx_MasterConfigSynchronization>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002d52:	f7ff fa89 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002d56:	bf00      	nop
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20001568 	.word	0x20001568
 8002d64:	40000400 	.word	0x40000400

08002d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <HAL_TIM_Base_MspInit+0x44>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d113      	bne.n	8002da2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_TIM_Base_MspInit+0x48>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <HAL_TIM_Base_MspInit+0x48>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	61d3      	str	r3, [r2, #28]
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_TIM_Base_MspInit+0x48>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2102      	movs	r1, #2
 8002d96:	201d      	movs	r0, #29
 8002d98:	f000 fde7 	bl	800396a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d9c:	201d      	movs	r0, #29
 8002d9e:	f000 fe00 	bl	80039a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40000400 	.word	0x40000400
 8002db0:	40021000 	.word	0x40021000

08002db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002db6:	490d      	ldr	r1, [pc, #52]	; (8002dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002db8:	4a0d      	ldr	r2, [pc, #52]	; (8002df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dcc:	4c0a      	ldr	r4, [pc, #40]	; (8002df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002dda:	f7ff ff71 	bl	8002cc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f006 fd6f 	bl	80098c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002de2:	f7fe f895 	bl	8000f10 <main>
  bx lr
 8002de6:	4770      	bx	lr
  ldr r0, =_sdata
 8002de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002df0:	0800b3b8 	.word	0x0800b3b8
  ldr r2, =_sbss
 8002df4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002df8:	200015c4 	.word	0x200015c4

08002dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC1_2_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e04:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_Init+0x28>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a07      	ldr	r2, [pc, #28]	; (8002e28 <HAL_Init+0x28>)
 8002e0a:	f043 0310 	orr.w	r3, r3, #16
 8002e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e10:	2003      	movs	r0, #3
 8002e12:	f000 fd9f 	bl	8003954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e16:	200f      	movs	r0, #15
 8002e18:	f000 f808 	bl	8002e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1c:	f7ff fe0e 	bl	8002a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40022000 	.word	0x40022000

08002e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e34:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <HAL_InitTick+0x54>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_InitTick+0x58>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fdb7 	bl	80039be <HAL_SYSTICK_Config>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e00e      	b.n	8002e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d80a      	bhi.n	8002e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e60:	2200      	movs	r2, #0
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	f000 fd7f 	bl	800396a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e6c:	4a06      	ldr	r2, [pc, #24]	; (8002e88 <HAL_InitTick+0x5c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000010 	.word	0x20000010
 8002e84:	20000018 	.word	0x20000018
 8002e88:	20000014 	.word	0x20000014

08002e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e90:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <HAL_IncTick+0x1c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_IncTick+0x20>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	4a03      	ldr	r2, [pc, #12]	; (8002eac <HAL_IncTick+0x20>)
 8002e9e:	6013      	str	r3, [r2, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr
 8002ea8:	20000018 	.word	0x20000018
 8002eac:	200015b0 	.word	0x200015b0

08002eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb4:	4b02      	ldr	r3, [pc, #8]	; (8002ec0 <HAL_GetTick+0x10>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr
 8002ec0:	200015b0 	.word	0x200015b0

08002ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff fff0 	bl	8002eb0 <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d005      	beq.n	8002eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <HAL_Delay+0x44>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eea:	bf00      	nop
 8002eec:	f7ff ffe0 	bl	8002eb0 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d8f7      	bhi.n	8002eec <HAL_Delay+0x28>
  {
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000018 	.word	0x20000018

08002f0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e0be      	b.n	80030ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fd fe10 	bl	8000b70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fbf1 	bl	8003738 <ADC_ConversionStop_Disable>
 8002f56:	4603      	mov	r3, r0
 8002f58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 8099 	bne.w	800309a <HAL_ADC_Init+0x18e>
 8002f68:	7dfb      	ldrb	r3, [r7, #23]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 8095 	bne.w	800309a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f78:	f023 0302 	bic.w	r3, r3, #2
 8002f7c:	f043 0202 	orr.w	r2, r3, #2
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7b1b      	ldrb	r3, [r3, #12]
 8002f92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa4:	d003      	beq.n	8002fae <HAL_ADC_Init+0xa2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d102      	bne.n	8002fb4 <HAL_ADC_Init+0xa8>
 8002fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_Init+0xaa>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7d1b      	ldrb	r3, [r3, #20]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d119      	bne.n	8002ff8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7b1b      	ldrb	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	035a      	lsls	r2, r3, #13
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e00b      	b.n	8002ff8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe4:	f043 0220 	orr.w	r2, r3, #32
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f043 0201 	orr.w	r2, r3, #1
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_ADC_Init+0x1a8>)
 8003014:	4013      	ands	r3, r2
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	68b9      	ldr	r1, [r7, #8]
 800301c:	430b      	orrs	r3, r1
 800301e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003028:	d003      	beq.n	8003032 <HAL_ADC_Init+0x126>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d104      	bne.n	800303c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	3b01      	subs	r3, #1
 8003038:	051b      	lsls	r3, r3, #20
 800303a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	430a      	orrs	r2, r1
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <HAL_ADC_Init+0x1ac>)
 8003058:	4013      	ands	r3, r2
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	429a      	cmp	r2, r3
 800305e:	d10b      	bne.n	8003078 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	f023 0303 	bic.w	r3, r3, #3
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003076:	e018      	b.n	80030aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f023 0312 	bic.w	r3, r3, #18
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003098:	e007      	b.n	80030aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	f043 0210 	orr.w	r2, r3, #16
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	ffe1f7fd 	.word	0xffe1f7fd
 80030b8:	ff1f0efe 	.word	0xff1f0efe

080030bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_Start+0x1a>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e098      	b.n	8003208 <HAL_ADC_Start+0x14c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fad0 	bl	8003684 <ADC_Enable>
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8087 	bne.w	80031fe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a41      	ldr	r2, [pc, #260]	; (8003210 <HAL_ADC_Start+0x154>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d105      	bne.n	800311a <HAL_ADC_Start+0x5e>
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_ADC_Start+0x158>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d115      	bne.n	8003146 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d026      	beq.n	8003182 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800313c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003144:	e01d      	b.n	8003182 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <HAL_ADC_Start+0x158>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_ADC_Start+0xaa>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2b      	ldr	r2, [pc, #172]	; (8003210 <HAL_ADC_Start+0x154>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d10d      	bne.n	8003182 <HAL_ADC_Start+0xc6>
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_ADC_Start+0x158>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800317a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d006      	beq.n	800319c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f023 0206 	bic.w	r2, r3, #6
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
 800319a:	e002      	b.n	80031a2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f06f 0202 	mvn.w	r2, #2
 80031b2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80031be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031c2:	d113      	bne.n	80031ec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_ADC_Start+0x154>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d105      	bne.n	80031da <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_ADC_Start+0x158>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	e00c      	b.n	8003206 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	e003      	b.n	8003206 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40012800 	.word	0x40012800
 8003214:	40012400 	.word	0x40012400

08003218 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_ADC_Stop+0x1a>
 800322e:	2302      	movs	r3, #2
 8003230:	e01a      	b.n	8003268 <HAL_ADC_Stop+0x50>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa7c 	bl	8003738 <ADC_ConversionStop_Disable>
 8003240:	4603      	mov	r3, r0
 8003242:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d109      	bne.n	800325e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003286:	f7ff fe13 	bl	8002eb0 <HAL_GetTick>
 800328a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0d3      	b.n	800345a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d131      	bne.n	8003324 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d12a      	bne.n	8003324 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032ce:	e021      	b.n	8003314 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d01d      	beq.n	8003314 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d007      	beq.n	80032ee <HAL_ADC_PollForConversion+0x7e>
 80032de:	f7ff fde7 	bl	8002eb0 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d212      	bcs.n	8003314 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10b      	bne.n	8003314 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f043 0204 	orr.w	r2, r3, #4
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e0a2      	b.n	800345a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0d6      	beq.n	80032d0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003322:	e070      	b.n	8003406 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003324:	4b4f      	ldr	r3, [pc, #316]	; (8003464 <HAL_ADC_PollForConversion+0x1f4>)
 8003326:	681c      	ldr	r4, [r3, #0]
 8003328:	2002      	movs	r0, #2
 800332a:	f004 f84f 	bl	80073cc <HAL_RCCEx_GetPeriphCLKFreq>
 800332e:	4603      	mov	r3, r0
 8003330:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6919      	ldr	r1, [r3, #16]
 800333a:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_ADC_PollForConversion+0x1f8>)
 800333c:	400b      	ands	r3, r1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d118      	bne.n	8003374 <HAL_ADC_PollForConversion+0x104>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68d9      	ldr	r1, [r3, #12]
 8003348:	4b48      	ldr	r3, [pc, #288]	; (800346c <HAL_ADC_PollForConversion+0x1fc>)
 800334a:	400b      	ands	r3, r1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HAL_ADC_PollForConversion+0x104>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6919      	ldr	r1, [r3, #16]
 8003356:	4b46      	ldr	r3, [pc, #280]	; (8003470 <HAL_ADC_PollForConversion+0x200>)
 8003358:	400b      	ands	r3, r1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_ADC_PollForConversion+0x100>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68d9      	ldr	r1, [r3, #12]
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_ADC_PollForConversion+0x204>)
 8003366:	400b      	ands	r3, r1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_PollForConversion+0x100>
 800336c:	2314      	movs	r3, #20
 800336e:	e020      	b.n	80033b2 <HAL_ADC_PollForConversion+0x142>
 8003370:	2329      	movs	r3, #41	; 0x29
 8003372:	e01e      	b.n	80033b2 <HAL_ADC_PollForConversion+0x142>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6919      	ldr	r1, [r3, #16]
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_ADC_PollForConversion+0x200>)
 800337c:	400b      	ands	r3, r1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_ADC_PollForConversion+0x120>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68d9      	ldr	r1, [r3, #12]
 8003388:	4b3a      	ldr	r3, [pc, #232]	; (8003474 <HAL_ADC_PollForConversion+0x204>)
 800338a:	400b      	ands	r3, r1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <HAL_ADC_PollForConversion+0x13c>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6919      	ldr	r1, [r3, #16]
 8003396:	4b38      	ldr	r3, [pc, #224]	; (8003478 <HAL_ADC_PollForConversion+0x208>)
 8003398:	400b      	ands	r3, r1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_ADC_PollForConversion+0x140>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68d9      	ldr	r1, [r3, #12]
 80033a4:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_ADC_PollForConversion+0x208>)
 80033a6:	400b      	ands	r3, r1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_PollForConversion+0x140>
 80033ac:	2354      	movs	r3, #84	; 0x54
 80033ae:	e000      	b.n	80033b2 <HAL_ADC_PollForConversion+0x142>
 80033b0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033b8:	e021      	b.n	80033fe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d01a      	beq.n	80033f8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d007      	beq.n	80033d8 <HAL_ADC_PollForConversion+0x168>
 80033c8:	f7ff fd72 	bl	8002eb0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d20f      	bcs.n	80033f8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d90b      	bls.n	80033f8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	f043 0204 	orr.w	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e030      	b.n	800345a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	3301      	adds	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	429a      	cmp	r2, r3
 8003404:	d8d9      	bhi.n	80033ba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f06f 0212 	mvn.w	r2, #18
 800340e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003426:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800342a:	d115      	bne.n	8003458 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003430:	2b00      	cmp	r3, #0
 8003432:	d111      	bne.n	8003458 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d105      	bne.n	8003458 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	371c      	adds	r7, #28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	bf00      	nop
 8003464:	20000010 	.word	0x20000010
 8003468:	24924924 	.word	0x24924924
 800346c:	00924924 	.word	0x00924924
 8003470:	12492492 	.word	0x12492492
 8003474:	00492492 	.word	0x00492492
 8003478:	00249249 	.word	0x00249249

0800347c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x20>
 80034b0:	2302      	movs	r3, #2
 80034b2:	e0dc      	b.n	800366e <HAL_ADC_ConfigChannel+0x1da>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b06      	cmp	r3, #6
 80034c2:	d81c      	bhi.n	80034fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	3b05      	subs	r3, #5
 80034d6:	221f      	movs	r2, #31
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	4019      	ands	r1, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	3b05      	subs	r3, #5
 80034f0:	fa00 f203 	lsl.w	r2, r0, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34
 80034fc:	e03c      	b.n	8003578 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d81c      	bhi.n	8003540 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	3b23      	subs	r3, #35	; 0x23
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	4019      	ands	r1, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6818      	ldr	r0, [r3, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	3b23      	subs	r3, #35	; 0x23
 8003532:	fa00 f203 	lsl.w	r2, r0, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	631a      	str	r2, [r3, #48]	; 0x30
 800353e:	e01b      	b.n	8003578 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	3b41      	subs	r3, #65	; 0x41
 8003552:	221f      	movs	r2, #31
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	4019      	ands	r1, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	3b41      	subs	r3, #65	; 0x41
 800356c:	fa00 f203 	lsl.w	r2, r0, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b09      	cmp	r3, #9
 800357e:	d91c      	bls.n	80035ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	3b1e      	subs	r3, #30
 8003592:	2207      	movs	r2, #7
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	4019      	ands	r1, r3
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	6898      	ldr	r0, [r3, #8]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	3b1e      	subs	r3, #30
 80035ac:	fa00 f203 	lsl.w	r2, r0, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]
 80035b8:	e019      	b.n	80035ee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6919      	ldr	r1, [r3, #16]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4413      	add	r3, r2
 80035ca:	2207      	movs	r2, #7
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	4019      	ands	r1, r3
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	6898      	ldr	r0, [r3, #8]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	fa00 f203 	lsl.w	r2, r0, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d003      	beq.n	80035fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035fa:	2b11      	cmp	r3, #17
 80035fc:	d132      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_ADC_ConfigChannel+0x1e4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d125      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d126      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003624:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b10      	cmp	r3, #16
 800362c:	d11a      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800362e:	4b13      	ldr	r3, [pc, #76]	; (800367c <HAL_ADC_ConfigChannel+0x1e8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <HAL_ADC_ConfigChannel+0x1ec>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	0c9a      	lsrs	r2, r3, #18
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003644:	e002      	b.n	800364c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3b01      	subs	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f9      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x1b2>
 8003652:	e007      	b.n	8003664 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800366c:	7bfb      	ldrb	r3, [r7, #15]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40012400 	.word	0x40012400
 800367c:	20000010 	.word	0x20000010
 8003680:	431bde83 	.word	0x431bde83

08003684 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d040      	beq.n	8003724 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <ADC_Enable+0xac>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a1f      	ldr	r2, [pc, #124]	; (8003734 <ADC_Enable+0xb0>)
 80036b8:	fba2 2303 	umull	r2, r3, r2, r3
 80036bc:	0c9b      	lsrs	r3, r3, #18
 80036be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036c0:	e002      	b.n	80036c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f9      	bne.n	80036c2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036ce:	f7ff fbef 	bl	8002eb0 <HAL_GetTick>
 80036d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036d4:	e01f      	b.n	8003716 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036d6:	f7ff fbeb 	bl	8002eb0 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d918      	bls.n	8003716 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d011      	beq.n	8003716 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e007      	b.n	8003726 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d1d8      	bne.n	80036d6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20000010 	.word	0x20000010
 8003734:	431bde83 	.word	0x431bde83

08003738 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d12e      	bne.n	80037b0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003762:	f7ff fba5 	bl	8002eb0 <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003768:	e01b      	b.n	80037a2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800376a:	f7ff fba1 	bl	8002eb0 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d914      	bls.n	80037a2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10d      	bne.n	80037a2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	f043 0210 	orr.w	r2, r3, #16
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	f043 0201 	orr.w	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e007      	b.n	80037b2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d0dc      	beq.n	800376a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d8:	4013      	ands	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ee:	4a04      	ldr	r2, [pc, #16]	; (8003800 <__NVIC_SetPriorityGrouping+0x44>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	60d3      	str	r3, [r2, #12]
}
 80037f4:	bf00      	nop
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000ed00 	.word	0xe000ed00

08003804 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <__NVIC_GetPriorityGrouping+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 0307 	and.w	r3, r3, #7
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	db0b      	blt.n	800384a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	f003 021f 	and.w	r2, r3, #31
 8003838:	4906      	ldr	r1, [pc, #24]	; (8003854 <__NVIC_EnableIRQ+0x34>)
 800383a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2001      	movs	r0, #1
 8003842:	fa00 f202 	lsl.w	r2, r0, r2
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100

08003858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	db0a      	blt.n	8003882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2da      	uxtb	r2, r3
 8003870:	490c      	ldr	r1, [pc, #48]	; (80038a4 <__NVIC_SetPriority+0x4c>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	0112      	lsls	r2, r2, #4
 8003878:	b2d2      	uxtb	r2, r2
 800387a:	440b      	add	r3, r1
 800387c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003880:	e00a      	b.n	8003898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4908      	ldr	r1, [pc, #32]	; (80038a8 <__NVIC_SetPriority+0x50>)
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	3b04      	subs	r3, #4
 8003890:	0112      	lsls	r2, r2, #4
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	440b      	add	r3, r1
 8003896:	761a      	strb	r2, [r3, #24]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000e100 	.word	0xe000e100
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	; 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f1c3 0307 	rsb	r3, r3, #7
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf28      	it	cs
 80038ca:	2304      	movcs	r3, #4
 80038cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d902      	bls.n	80038dc <NVIC_EncodePriority+0x30>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	3b03      	subs	r3, #3
 80038da:	e000      	b.n	80038de <NVIC_EncodePriority+0x32>
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e0:	f04f 32ff 	mov.w	r2, #4294967295
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ea:	43da      	mvns	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	401a      	ands	r2, r3
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f4:	f04f 31ff 	mov.w	r1, #4294967295
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	fa01 f303 	lsl.w	r3, r1, r3
 80038fe:	43d9      	mvns	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003904:	4313      	orrs	r3, r2
         );
}
 8003906:	4618      	mov	r0, r3
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3b01      	subs	r3, #1
 800391c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003920:	d301      	bcc.n	8003926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003922:	2301      	movs	r3, #1
 8003924:	e00f      	b.n	8003946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003926:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <SysTick_Config+0x40>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3b01      	subs	r3, #1
 800392c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392e:	210f      	movs	r1, #15
 8003930:	f04f 30ff 	mov.w	r0, #4294967295
 8003934:	f7ff ff90 	bl	8003858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <SysTick_Config+0x40>)
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <SysTick_Config+0x40>)
 8003940:	2207      	movs	r2, #7
 8003942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	e000e010 	.word	0xe000e010

08003954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff2d 	bl	80037bc <__NVIC_SetPriorityGrouping>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396a:	b580      	push	{r7, lr}
 800396c:	b086      	sub	sp, #24
 800396e:	af00      	add	r7, sp, #0
 8003970:	4603      	mov	r3, r0
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800397c:	f7ff ff42 	bl	8003804 <__NVIC_GetPriorityGrouping>
 8003980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	6978      	ldr	r0, [r7, #20]
 8003988:	f7ff ff90 	bl	80038ac <NVIC_EncodePriority>
 800398c:	4602      	mov	r2, r0
 800398e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff ff5f 	bl	8003858 <__NVIC_SetPriority>
}
 800399a:	bf00      	nop
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff35 	bl	8003820 <__NVIC_EnableIRQ>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff ffa2 	bl	8003910 <SysTick_Config>
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
	...

080039d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e043      	b.n	8003a76 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b22      	ldr	r3, [pc, #136]	; (8003a80 <HAL_DMA_Init+0xa8>)
 80039f6:	4413      	add	r3, r2
 80039f8:	4a22      	ldr	r2, [pc, #136]	; (8003a84 <HAL_DMA_Init+0xac>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	091b      	lsrs	r3, r3, #4
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <HAL_DMA_Init+0xb0>)
 8003a0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a22:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	bffdfff8 	.word	0xbffdfff8
 8003a84:	cccccccd 	.word	0xcccccccd
 8003a88:	40020000 	.word	0x40020000

08003a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA_Start_IT+0x20>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e04a      	b.n	8003b42 <HAL_DMA_Start_IT+0xb6>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d13a      	bne.n	8003b34 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	68b9      	ldr	r1, [r7, #8]
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f9ba 	bl	8003e5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 020e 	orr.w	r2, r2, #14
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e00f      	b.n	8003b22 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0204 	bic.w	r2, r2, #4
 8003b10:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 020a 	orr.w	r2, r2, #10
 8003b20:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e005      	b.n	8003b40 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d005      	beq.n	8003b6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e051      	b.n	8003c12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 020e 	bic.w	r2, r2, #14
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_DMA_Abort_IT+0xd0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d029      	beq.n	8003bec <HAL_DMA_Abort_IT+0xa0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <HAL_DMA_Abort_IT+0xd4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x9c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_DMA_Abort_IT+0xd8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01a      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x96>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_DMA_Abort_IT+0xdc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d012      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x90>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_DMA_Abort_IT+0xe0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x8a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <HAL_DMA_Abort_IT+0xe4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d102      	bne.n	8003bd0 <HAL_DMA_Abort_IT+0x84>
 8003bca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bce:	e00e      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd4:	e00b      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bda:	e008      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be0:	e005      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be6:	e002      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003be8:	2310      	movs	r3, #16
 8003bea:	e000      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <HAL_DMA_Abort_IT+0xe8>)
 8003bf0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
    } 
  }
  return status;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40020008 	.word	0x40020008
 8003c20:	4002001c 	.word	0x4002001c
 8003c24:	40020030 	.word	0x40020030
 8003c28:	40020044 	.word	0x40020044
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	4002006c 	.word	0x4002006c
 8003c34:	40020000 	.word	0x40020000

08003c38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2204      	movs	r2, #4
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d04f      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xc8>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04a      	beq.n	8003d00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d107      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a66      	ldr	r2, [pc, #408]	; (8003e28 <HAL_DMA_IRQHandler+0x1f0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d029      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0xae>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <HAL_DMA_IRQHandler+0x1f4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <HAL_DMA_IRQHandler+0xaa>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a63      	ldr	r2, [pc, #396]	; (8003e30 <HAL_DMA_IRQHandler+0x1f8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01a      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xa4>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a62      	ldr	r2, [pc, #392]	; (8003e34 <HAL_DMA_IRQHandler+0x1fc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d012      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x9e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a60      	ldr	r2, [pc, #384]	; (8003e38 <HAL_DMA_IRQHandler+0x200>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_DMA_IRQHandler+0x98>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a5f      	ldr	r2, [pc, #380]	; (8003e3c <HAL_DMA_IRQHandler+0x204>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d102      	bne.n	8003cca <HAL_DMA_IRQHandler+0x92>
 8003cc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cc8:	e00e      	b.n	8003ce8 <HAL_DMA_IRQHandler+0xb0>
 8003cca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003cce:	e00b      	b.n	8003ce8 <HAL_DMA_IRQHandler+0xb0>
 8003cd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cd4:	e008      	b.n	8003ce8 <HAL_DMA_IRQHandler+0xb0>
 8003cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cda:	e005      	b.n	8003ce8 <HAL_DMA_IRQHandler+0xb0>
 8003cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce0:	e002      	b.n	8003ce8 <HAL_DMA_IRQHandler+0xb0>
 8003ce2:	2340      	movs	r3, #64	; 0x40
 8003ce4:	e000      	b.n	8003ce8 <HAL_DMA_IRQHandler+0xb0>
 8003ce6:	2304      	movs	r3, #4
 8003ce8:	4a55      	ldr	r2, [pc, #340]	; (8003e40 <HAL_DMA_IRQHandler+0x208>)
 8003cea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8094 	beq.w	8003e1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003cfe:	e08e      	b.n	8003e1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2202      	movs	r2, #2
 8003d06:	409a      	lsls	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d056      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x186>
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d051      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 020a 	bic.w	r2, r2, #10
 8003d36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_DMA_IRQHandler+0x1f0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d029      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x166>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a37      	ldr	r2, [pc, #220]	; (8003e2c <HAL_DMA_IRQHandler+0x1f4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d022      	beq.n	8003d9a <HAL_DMA_IRQHandler+0x162>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a35      	ldr	r2, [pc, #212]	; (8003e30 <HAL_DMA_IRQHandler+0x1f8>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01a      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x15c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a34      	ldr	r2, [pc, #208]	; (8003e34 <HAL_DMA_IRQHandler+0x1fc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d012      	beq.n	8003d8e <HAL_DMA_IRQHandler+0x156>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <HAL_DMA_IRQHandler+0x200>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00a      	beq.n	8003d88 <HAL_DMA_IRQHandler+0x150>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a31      	ldr	r2, [pc, #196]	; (8003e3c <HAL_DMA_IRQHandler+0x204>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d102      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x14a>
 8003d7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d80:	e00e      	b.n	8003da0 <HAL_DMA_IRQHandler+0x168>
 8003d82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d86:	e00b      	b.n	8003da0 <HAL_DMA_IRQHandler+0x168>
 8003d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d8c:	e008      	b.n	8003da0 <HAL_DMA_IRQHandler+0x168>
 8003d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d92:	e005      	b.n	8003da0 <HAL_DMA_IRQHandler+0x168>
 8003d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d98:	e002      	b.n	8003da0 <HAL_DMA_IRQHandler+0x168>
 8003d9a:	2320      	movs	r3, #32
 8003d9c:	e000      	b.n	8003da0 <HAL_DMA_IRQHandler+0x168>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <HAL_DMA_IRQHandler+0x208>)
 8003da2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d034      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dbc:	e02f      	b.n	8003e1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d028      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x1e8>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d023      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 020e 	bic.w	r2, r2, #14
 8003de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	2101      	movs	r1, #1
 8003df2:	fa01 f202 	lsl.w	r2, r1, r2
 8003df6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d004      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
    }
  }
  return;
 8003e1e:	bf00      	nop
 8003e20:	bf00      	nop
}
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40020008 	.word	0x40020008
 8003e2c:	4002001c 	.word	0x4002001c
 8003e30:	40020030 	.word	0x40020030
 8003e34:	40020044 	.word	0x40020044
 8003e38:	40020058 	.word	0x40020058
 8003e3c:	4002006c 	.word	0x4002006c
 8003e40:	40020000 	.word	0x40020000

08003e44 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d108      	bne.n	8003e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e9a:	e007      	b.n	8003eac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	60da      	str	r2, [r3, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b08b      	sub	sp, #44	; 0x2c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eca:	e169      	b.n	80041a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ecc:	2201      	movs	r2, #1
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	f040 8158 	bne.w	800419a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a9a      	ldr	r2, [pc, #616]	; (8004158 <HAL_GPIO_Init+0x2a0>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d05e      	beq.n	8003fb2 <HAL_GPIO_Init+0xfa>
 8003ef4:	4a98      	ldr	r2, [pc, #608]	; (8004158 <HAL_GPIO_Init+0x2a0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d875      	bhi.n	8003fe6 <HAL_GPIO_Init+0x12e>
 8003efa:	4a98      	ldr	r2, [pc, #608]	; (800415c <HAL_GPIO_Init+0x2a4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d058      	beq.n	8003fb2 <HAL_GPIO_Init+0xfa>
 8003f00:	4a96      	ldr	r2, [pc, #600]	; (800415c <HAL_GPIO_Init+0x2a4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d86f      	bhi.n	8003fe6 <HAL_GPIO_Init+0x12e>
 8003f06:	4a96      	ldr	r2, [pc, #600]	; (8004160 <HAL_GPIO_Init+0x2a8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d052      	beq.n	8003fb2 <HAL_GPIO_Init+0xfa>
 8003f0c:	4a94      	ldr	r2, [pc, #592]	; (8004160 <HAL_GPIO_Init+0x2a8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d869      	bhi.n	8003fe6 <HAL_GPIO_Init+0x12e>
 8003f12:	4a94      	ldr	r2, [pc, #592]	; (8004164 <HAL_GPIO_Init+0x2ac>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d04c      	beq.n	8003fb2 <HAL_GPIO_Init+0xfa>
 8003f18:	4a92      	ldr	r2, [pc, #584]	; (8004164 <HAL_GPIO_Init+0x2ac>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d863      	bhi.n	8003fe6 <HAL_GPIO_Init+0x12e>
 8003f1e:	4a92      	ldr	r2, [pc, #584]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d046      	beq.n	8003fb2 <HAL_GPIO_Init+0xfa>
 8003f24:	4a90      	ldr	r2, [pc, #576]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d85d      	bhi.n	8003fe6 <HAL_GPIO_Init+0x12e>
 8003f2a:	2b12      	cmp	r3, #18
 8003f2c:	d82a      	bhi.n	8003f84 <HAL_GPIO_Init+0xcc>
 8003f2e:	2b12      	cmp	r3, #18
 8003f30:	d859      	bhi.n	8003fe6 <HAL_GPIO_Init+0x12e>
 8003f32:	a201      	add	r2, pc, #4	; (adr r2, 8003f38 <HAL_GPIO_Init+0x80>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003fb3 	.word	0x08003fb3
 8003f3c:	08003f8d 	.word	0x08003f8d
 8003f40:	08003f9f 	.word	0x08003f9f
 8003f44:	08003fe1 	.word	0x08003fe1
 8003f48:	08003fe7 	.word	0x08003fe7
 8003f4c:	08003fe7 	.word	0x08003fe7
 8003f50:	08003fe7 	.word	0x08003fe7
 8003f54:	08003fe7 	.word	0x08003fe7
 8003f58:	08003fe7 	.word	0x08003fe7
 8003f5c:	08003fe7 	.word	0x08003fe7
 8003f60:	08003fe7 	.word	0x08003fe7
 8003f64:	08003fe7 	.word	0x08003fe7
 8003f68:	08003fe7 	.word	0x08003fe7
 8003f6c:	08003fe7 	.word	0x08003fe7
 8003f70:	08003fe7 	.word	0x08003fe7
 8003f74:	08003fe7 	.word	0x08003fe7
 8003f78:	08003fe7 	.word	0x08003fe7
 8003f7c:	08003f95 	.word	0x08003f95
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	4a79      	ldr	r2, [pc, #484]	; (800416c <HAL_GPIO_Init+0x2b4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f8a:	e02c      	b.n	8003fe6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	623b      	str	r3, [r7, #32]
          break;
 8003f92:	e029      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	623b      	str	r3, [r7, #32]
          break;
 8003f9c:	e024      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	623b      	str	r3, [r7, #32]
          break;
 8003fa6:	e01f      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	330c      	adds	r3, #12
 8003fae:	623b      	str	r3, [r7, #32]
          break;
 8003fb0:	e01a      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003fba:	2304      	movs	r3, #4
 8003fbc:	623b      	str	r3, [r7, #32]
          break;
 8003fbe:	e013      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d105      	bne.n	8003fd4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fc8:	2308      	movs	r3, #8
 8003fca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	611a      	str	r2, [r3, #16]
          break;
 8003fd2:	e009      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	615a      	str	r2, [r3, #20]
          break;
 8003fde:	e003      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	623b      	str	r3, [r7, #32]
          break;
 8003fe4:	e000      	b.n	8003fe8 <HAL_GPIO_Init+0x130>
          break;
 8003fe6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	2bff      	cmp	r3, #255	; 0xff
 8003fec:	d801      	bhi.n	8003ff2 <HAL_GPIO_Init+0x13a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	e001      	b.n	8003ff6 <HAL_GPIO_Init+0x13e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2bff      	cmp	r3, #255	; 0xff
 8003ffc:	d802      	bhi.n	8004004 <HAL_GPIO_Init+0x14c>
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	e002      	b.n	800400a <HAL_GPIO_Init+0x152>
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	3b08      	subs	r3, #8
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	210f      	movs	r1, #15
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	401a      	ands	r2, r3
 800401c:	6a39      	ldr	r1, [r7, #32]
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	fa01 f303 	lsl.w	r3, r1, r3
 8004024:	431a      	orrs	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80b1 	beq.w	800419a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004038:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <HAL_GPIO_Init+0x2b8>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	4a4c      	ldr	r2, [pc, #304]	; (8004170 <HAL_GPIO_Init+0x2b8>)
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	6193      	str	r3, [r2, #24]
 8004044:	4b4a      	ldr	r3, [pc, #296]	; (8004170 <HAL_GPIO_Init+0x2b8>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004050:	4a48      	ldr	r2, [pc, #288]	; (8004174 <HAL_GPIO_Init+0x2bc>)
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	f003 0303 	and.w	r3, r3, #3
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	220f      	movs	r2, #15
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4013      	ands	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a40      	ldr	r2, [pc, #256]	; (8004178 <HAL_GPIO_Init+0x2c0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <HAL_GPIO_Init+0x1ec>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3f      	ldr	r2, [pc, #252]	; (800417c <HAL_GPIO_Init+0x2c4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00d      	beq.n	80040a0 <HAL_GPIO_Init+0x1e8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3e      	ldr	r2, [pc, #248]	; (8004180 <HAL_GPIO_Init+0x2c8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <HAL_GPIO_Init+0x1e4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a3d      	ldr	r2, [pc, #244]	; (8004184 <HAL_GPIO_Init+0x2cc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <HAL_GPIO_Init+0x1e0>
 8004094:	2303      	movs	r3, #3
 8004096:	e006      	b.n	80040a6 <HAL_GPIO_Init+0x1ee>
 8004098:	2304      	movs	r3, #4
 800409a:	e004      	b.n	80040a6 <HAL_GPIO_Init+0x1ee>
 800409c:	2302      	movs	r3, #2
 800409e:	e002      	b.n	80040a6 <HAL_GPIO_Init+0x1ee>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <HAL_GPIO_Init+0x1ee>
 80040a4:	2300      	movs	r3, #0
 80040a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a8:	f002 0203 	and.w	r2, r2, #3
 80040ac:	0092      	lsls	r2, r2, #2
 80040ae:	4093      	lsls	r3, r2
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040b6:	492f      	ldr	r1, [pc, #188]	; (8004174 <HAL_GPIO_Init+0x2bc>)
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d006      	beq.n	80040de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	492c      	ldr	r1, [pc, #176]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e006      	b.n	80040ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040de:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	4928      	ldr	r1, [pc, #160]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d006      	beq.n	8004106 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040f8:	4b23      	ldr	r3, [pc, #140]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4922      	ldr	r1, [pc, #136]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
 8004104:	e006      	b.n	8004114 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	43db      	mvns	r3, r3
 800410e:	491e      	ldr	r1, [pc, #120]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 8004110:	4013      	ands	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4918      	ldr	r1, [pc, #96]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]
 800412c:	e006      	b.n	800413c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800412e:	4b16      	ldr	r3, [pc, #88]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	43db      	mvns	r3, r3
 8004136:	4914      	ldr	r1, [pc, #80]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 8004138:	4013      	ands	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d021      	beq.n	800418c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	490e      	ldr	r1, [pc, #56]	; (8004188 <HAL_GPIO_Init+0x2d0>)
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	60cb      	str	r3, [r1, #12]
 8004154:	e021      	b.n	800419a <HAL_GPIO_Init+0x2e2>
 8004156:	bf00      	nop
 8004158:	10320000 	.word	0x10320000
 800415c:	10310000 	.word	0x10310000
 8004160:	10220000 	.word	0x10220000
 8004164:	10210000 	.word	0x10210000
 8004168:	10120000 	.word	0x10120000
 800416c:	10110000 	.word	0x10110000
 8004170:	40021000 	.word	0x40021000
 8004174:	40010000 	.word	0x40010000
 8004178:	40010800 	.word	0x40010800
 800417c:	40010c00 	.word	0x40010c00
 8004180:	40011000 	.word	0x40011000
 8004184:	40011400 	.word	0x40011400
 8004188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_GPIO_Init+0x304>)
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	43db      	mvns	r3, r3
 8004194:	4909      	ldr	r1, [pc, #36]	; (80041bc <HAL_GPIO_Init+0x304>)
 8004196:	4013      	ands	r3, r2
 8004198:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	3301      	adds	r3, #1
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f47f ae8e 	bne.w	8003ecc <HAL_GPIO_Init+0x14>
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	372c      	adds	r7, #44	; 0x2c
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr
 80041bc:	40010400 	.word	0x40010400

080041c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
 80041cc:	4613      	mov	r3, r2
 80041ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041d0:	787b      	ldrb	r3, [r7, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041dc:	e003      	b.n	80041e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	611a      	str	r2, [r3, #16]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e12b      	b.n	800445a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d106      	bne.n	800421c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fc fdfc 	bl	8000e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	; 0x24
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0201 	bic.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004242:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004254:	f002 ffbe 	bl	80071d4 <HAL_RCC_GetPCLK1Freq>
 8004258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4a81      	ldr	r2, [pc, #516]	; (8004464 <HAL_I2C_Init+0x274>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d807      	bhi.n	8004274 <HAL_I2C_Init+0x84>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a80      	ldr	r2, [pc, #512]	; (8004468 <HAL_I2C_Init+0x278>)
 8004268:	4293      	cmp	r3, r2
 800426a:	bf94      	ite	ls
 800426c:	2301      	movls	r3, #1
 800426e:	2300      	movhi	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e006      	b.n	8004282 <HAL_I2C_Init+0x92>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a7d      	ldr	r2, [pc, #500]	; (800446c <HAL_I2C_Init+0x27c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0e7      	b.n	800445a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a78      	ldr	r2, [pc, #480]	; (8004470 <HAL_I2C_Init+0x280>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	0c9b      	lsrs	r3, r3, #18
 8004294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a6a      	ldr	r2, [pc, #424]	; (8004464 <HAL_I2C_Init+0x274>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <HAL_I2C_Init+0xd4>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3301      	adds	r3, #1
 80042c2:	e009      	b.n	80042d8 <HAL_I2C_Init+0xe8>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	4a69      	ldr	r2, [pc, #420]	; (8004474 <HAL_I2C_Init+0x284>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	3301      	adds	r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	430b      	orrs	r3, r1
 80042de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	495c      	ldr	r1, [pc, #368]	; (8004464 <HAL_I2C_Init+0x274>)
 80042f4:	428b      	cmp	r3, r1
 80042f6:	d819      	bhi.n	800432c <HAL_I2C_Init+0x13c>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e59      	subs	r1, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	fbb1 f3f3 	udiv	r3, r1, r3
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	f640 73fc 	movw	r3, #4092	; 0xffc
 800430c:	400b      	ands	r3, r1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_I2C_Init+0x138>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1e59      	subs	r1, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004320:	3301      	adds	r3, #1
 8004322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004326:	e051      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 8004328:	2304      	movs	r3, #4
 800432a:	e04f      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d111      	bne.n	8004358 <HAL_I2C_Init+0x168>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	1e58      	subs	r0, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6859      	ldr	r1, [r3, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	440b      	add	r3, r1
 8004342:	fbb0 f3f3 	udiv	r3, r0, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e012      	b.n	800437e <HAL_I2C_Init+0x18e>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e58      	subs	r0, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6859      	ldr	r1, [r3, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	440b      	add	r3, r1
 8004366:	0099      	lsls	r1, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	fbb0 f3f3 	udiv	r3, r0, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Init+0x196>
 8004382:	2301      	movs	r3, #1
 8004384:	e022      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10e      	bne.n	80043ac <HAL_I2C_Init+0x1bc>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1e58      	subs	r0, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6859      	ldr	r1, [r3, #4]
 8004396:	460b      	mov	r3, r1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	440b      	add	r3, r1
 800439c:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043aa:	e00f      	b.n	80043cc <HAL_I2C_Init+0x1dc>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	0099      	lsls	r1, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	6809      	ldr	r1, [r1, #0]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6911      	ldr	r1, [r2, #16]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	68d2      	ldr	r2, [r2, #12]
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6812      	ldr	r2, [r2, #0]
 800440c:	430b      	orrs	r3, r1
 800440e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	000186a0 	.word	0x000186a0
 8004468:	001e847f 	.word	0x001e847f
 800446c:	003d08ff 	.word	0x003d08ff
 8004470:	431bde83 	.word	0x431bde83
 8004474:	10624dd3 	.word	0x10624dd3

08004478 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	607a      	str	r2, [r7, #4]
 8004482:	461a      	mov	r2, r3
 8004484:	460b      	mov	r3, r1
 8004486:	817b      	strh	r3, [r7, #10]
 8004488:	4613      	mov	r3, r2
 800448a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800448c:	f7fe fd10 	bl	8002eb0 <HAL_GetTick>
 8004490:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	f040 80e0 	bne.w	8004660 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	2319      	movs	r3, #25
 80044a6:	2201      	movs	r2, #1
 80044a8:	4970      	ldr	r1, [pc, #448]	; (800466c <HAL_I2C_Master_Transmit+0x1f4>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f002 f8ec 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0d3      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_I2C_Master_Transmit+0x50>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e0cc      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d007      	beq.n	80044ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2221      	movs	r2, #33	; 0x21
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2210      	movs	r2, #16
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	893a      	ldrh	r2, [r7, #8]
 800451e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a50      	ldr	r2, [pc, #320]	; (8004670 <HAL_I2C_Master_Transmit+0x1f8>)
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004530:	8979      	ldrh	r1, [r7, #10]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f001 fdda 	bl	80060f0 <I2C_MasterRequestWrite>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e08d      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	613b      	str	r3, [r7, #16]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800455c:	e066      	b.n	800462c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	6a39      	ldr	r1, [r7, #32]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f002 f966 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00d      	beq.n	800458a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004572:	2b04      	cmp	r3, #4
 8004574:	d107      	bne.n	8004586 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004584:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e06b      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	781a      	ldrb	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d11b      	bne.n	8004600 <HAL_I2C_Master_Transmit+0x188>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d017      	beq.n	8004600 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	6a39      	ldr	r1, [r7, #32]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f002 f956 	bl	80068b6 <I2C_WaitOnBTFFlagUntilTimeout>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00d      	beq.n	800462c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	2b04      	cmp	r3, #4
 8004616:	d107      	bne.n	8004628 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004626:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e01a      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	d194      	bne.n	800455e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	00100002 	.word	0x00100002
 8004670:	ffff0000 	.word	0xffff0000

08004674 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	; 0x28
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004692:	f7fe fc0d 	bl	8002eb0 <HAL_GetTick>
 8004696:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	f040 8126 	bne.w	80048f2 <HAL_I2C_Mem_Write_DMA+0x27e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80046a6:	4b95      	ldr	r3, [pc, #596]	; (80048fc <HAL_I2C_Mem_Write_DMA+0x288>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	08db      	lsrs	r3, r3, #3
 80046ac:	4a94      	ldr	r2, [pc, #592]	; (8004900 <HAL_I2C_Mem_Write_DMA+0x28c>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	0a1a      	lsrs	r2, r3, #8
 80046b4:	4613      	mov	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d116      	bne.n	80046fa <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0fc      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b02      	cmp	r3, #2
 8004706:	d0db      	beq.n	80046c0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470e:	2b01      	cmp	r3, #1
 8004710:	d101      	bne.n	8004716 <HAL_I2C_Mem_Write_DMA+0xa2>
 8004712:	2302      	movs	r3, #2
 8004714:	e0ee      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d007      	beq.n	800473c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2221      	movs	r2, #33	; 0x21
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2240      	movs	r2, #64	; 0x40
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a62      	ldr	r2, [pc, #392]	; (8004904 <HAL_I2C_Mem_Write_DMA+0x290>)
 800477c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 80a1 	beq.w	80048ca <HAL_I2C_Mem_Write_DMA+0x256>
    {
      if (hi2c->hdmatx != NULL)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	2b00      	cmp	r3, #0
 800478e:	d022      	beq.n	80047d6 <HAL_I2C_Mem_Write_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004794:	4a5c      	ldr	r2, [pc, #368]	; (8004908 <HAL_I2C_Mem_Write_DMA+0x294>)
 8004796:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800479c:	4a5b      	ldr	r2, [pc, #364]	; (800490c <HAL_I2C_Mem_Write_DMA+0x298>)
 800479e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a4:	2200      	movs	r2, #0
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	2200      	movs	r2, #0
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	4619      	mov	r1, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3310      	adds	r3, #16
 80047c0:	461a      	mov	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	f7ff f961 	bl	8003a8c <HAL_DMA_Start_IT>
 80047ca:	4603      	mov	r3, r0
 80047cc:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80047ce:	7efb      	ldrb	r3, [r7, #27]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d166      	bne.n	80048a2 <HAL_I2C_Mem_Write_DMA+0x22e>
 80047d4:	e013      	b.n	80047fe <HAL_I2C_Mem_Write_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e07a      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80047fe:	88f8      	ldrh	r0, [r7, #6]
 8004800:	893a      	ldrh	r2, [r7, #8]
 8004802:	8979      	ldrh	r1, [r7, #10]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	9301      	str	r3, [sp, #4]
 8004808:	2323      	movs	r3, #35	; 0x23
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	4603      	mov	r3, r0
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f001 fcf0 	bl	80061f4 <I2C_RequestMemoryWrite>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d022      	beq.n	8004860 <HAL_I2C_Mem_Write_DMA+0x1ec>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff f994 	bl	8003b4c <HAL_DMA_Abort_IT>
 8004824:	4603      	mov	r3, r0
 8004826:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800482c:	2200      	movs	r2, #0
 800482e:	629a      	str	r2, [r3, #40]	; 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e049      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004860:	2300      	movs	r3, #0
 8004862:	613b      	str	r3, [r7, #16]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800488c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800489c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e028      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0210 	orr.w	r2, r3, #16
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e014      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <HAL_I2C_Mem_Write_DMA+0x280>
    }
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000010 	.word	0x20000010
 8004900:	14f8b589 	.word	0x14f8b589
 8004904:	ffff0000 	.word	0xffff0000
 8004908:	08006321 	.word	0x08006321
 800490c:	080064cb 	.word	0x080064cb

08004910 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	607a      	str	r2, [r7, #4]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	460b      	mov	r3, r1
 800491e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004920:	f7fe fac6 	bl	8002eb0 <HAL_GetTick>
 8004924:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004926:	2301      	movs	r3, #1
 8004928:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b20      	cmp	r3, #32
 8004934:	f040 8111 	bne.w	8004b5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2319      	movs	r3, #25
 800493e:	2201      	movs	r2, #1
 8004940:	4988      	ldr	r1, [pc, #544]	; (8004b64 <HAL_I2C_IsDeviceReady+0x254>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f001 fea0 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
 8004950:	e104      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_I2C_IsDeviceReady+0x50>
 800495c:	2302      	movs	r3, #2
 800495e:	e0fd      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0301 	and.w	r3, r3, #1
 8004972:	2b01      	cmp	r3, #1
 8004974:	d007      	beq.n	8004986 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004994:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2224      	movs	r2, #36	; 0x24
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a70      	ldr	r2, [pc, #448]	; (8004b68 <HAL_I2C_IsDeviceReady+0x258>)
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f001 fe5e 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e0:	d103      	bne.n	80049ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0b6      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ee:	897b      	ldrh	r3, [r7, #10]
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80049fe:	f7fe fa57 	bl	8002eb0 <HAL_GetTick>
 8004a02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695b      	ldr	r3, [r3, #20]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a32:	e025      	b.n	8004a80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a34:	f7fe fa3c 	bl	8002eb0 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d302      	bcc.n	8004a4a <HAL_I2C_IsDeviceReady+0x13a>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22a0      	movs	r2, #160	; 0xa0
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2ba0      	cmp	r3, #160	; 0xa0
 8004a8a:	d005      	beq.n	8004a98 <HAL_I2C_IsDeviceReady+0x188>
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d102      	bne.n	8004a98 <HAL_I2C_IsDeviceReady+0x188>
 8004a92:	7dbb      	ldrb	r3, [r7, #22]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0cd      	beq.n	8004a34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d129      	bne.n	8004b02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004abc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	613b      	str	r3, [r7, #16]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	613b      	str	r3, [r7, #16]
 8004ad2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	2319      	movs	r3, #25
 8004ada:	2201      	movs	r2, #1
 8004adc:	4921      	ldr	r1, [pc, #132]	; (8004b64 <HAL_I2C_IsDeviceReady+0x254>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f001 fdd2 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e036      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e02c      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2319      	movs	r3, #25
 8004b22:	2201      	movs	r2, #1
 8004b24:	490f      	ldr	r1, [pc, #60]	; (8004b64 <HAL_I2C_IsDeviceReady+0x254>)
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f001 fdae 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e012      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f4ff af32 	bcc.w	80049aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	00100002 	.word	0x00100002
 8004b68:	ffff0000 	.word	0xffff0000

08004b6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d003      	beq.n	8004ba4 <HAL_I2C_EV_IRQHandler+0x38>
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	f040 80c1 	bne.w	8004d26 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <HAL_I2C_EV_IRQHandler+0x6e>
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004bc4:	d003      	beq.n	8004bce <HAL_I2C_EV_IRQHandler+0x62>
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2C_EV_IRQHandler+0x66>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <HAL_I2C_EV_IRQHandler+0x68>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	f000 8132 	beq.w	8004e3e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00c      	beq.n	8004bfe <HAL_I2C_EV_IRQHandler+0x92>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	0a5b      	lsrs	r3, r3, #9
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d006      	beq.n	8004bfe <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f001 ff01 	bl	80069f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fcc8 	bl	800558c <I2C_Master_SB>
 8004bfc:	e092      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	08db      	lsrs	r3, r3, #3
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0xb2>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	0a5b      	lsrs	r3, r3, #9
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fd3d 	bl	8005696 <I2C_Master_ADD10>
 8004c1c:	e082      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_I2C_EV_IRQHandler+0xd2>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	0a5b      	lsrs	r3, r3, #9
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fd56 	bl	80056e8 <I2C_Master_ADDR>
 8004c3c:	e072      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	089b      	lsrs	r3, r3, #2
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d03b      	beq.n	8004cc2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c58:	f000 80f3 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	09db      	lsrs	r3, r3, #7
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00f      	beq.n	8004c88 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	0a9b      	lsrs	r3, r3, #10
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	089b      	lsrs	r3, r3, #2
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f942 	bl	8004f0a <I2C_MasterTransmit_TXE>
 8004c86:	e04d      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	f003 0301 	and.w	r3, r3, #1
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 80d6 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	0a5b      	lsrs	r3, r3, #9
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 80cf 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	2b21      	cmp	r3, #33	; 0x21
 8004ca8:	d103      	bne.n	8004cb2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f9c9 	bl	8005042 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb0:	e0c7      	b.n	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b40      	cmp	r3, #64	; 0x40
 8004cb6:	f040 80c4 	bne.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 fa37 	bl	800512e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cc0:	e0bf      	b.n	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd0:	f000 80b7 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00f      	beq.n	8004d00 <HAL_I2C_EV_IRQHandler+0x194>
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	0a9b      	lsrs	r3, r3, #10
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_I2C_EV_IRQHandler+0x194>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d103      	bne.n	8004d00 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 faac 	bl	8005256 <I2C_MasterReceive_RXNE>
 8004cfe:	e011      	b.n	8004d24 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 809a 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	0a5b      	lsrs	r3, r3, #9
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 8093 	beq.w	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fb4b 	bl	80053b8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d22:	e08e      	b.n	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d24:	e08d      	b.n	8004e42 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e007      	b.n	8004d48 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d012      	beq.n	8004d7a <HAL_I2C_EV_IRQHandler+0x20e>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	0a5b      	lsrs	r3, r3, #9
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00c      	beq.n	8004d7a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 ff0f 	bl	8005b96 <I2C_Slave_ADDR>
 8004d78:	e066      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <HAL_I2C_EV_IRQHandler+0x22e>
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	0a5b      	lsrs	r3, r3, #9
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 ff4a 	bl	8005c2c <I2C_Slave_STOPF>
 8004d98:	e056      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	2b21      	cmp	r3, #33	; 0x21
 8004d9e:	d002      	beq.n	8004da6 <HAL_I2C_EV_IRQHandler+0x23a>
 8004da0:	7bbb      	ldrb	r3, [r7, #14]
 8004da2:	2b29      	cmp	r3, #41	; 0x29
 8004da4:	d125      	bne.n	8004df2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	09db      	lsrs	r3, r3, #7
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00f      	beq.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x266>
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	0a9b      	lsrs	r3, r3, #10
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x266>
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	089b      	lsrs	r3, r3, #2
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fe27 	bl	8005a1e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dd0:	e039      	b.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d033      	beq.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2da>
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	0a5b      	lsrs	r3, r3, #9
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02d      	beq.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fe54 	bl	8005a98 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df0:	e029      	b.n	8004e46 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	099b      	lsrs	r3, r3, #6
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00f      	beq.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	0a9b      	lsrs	r3, r3, #10
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fe5e 	bl	8005ad8 <I2C_SlaveReceive_RXNE>
 8004e1c:	e014      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	089b      	lsrs	r3, r3, #2
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00e      	beq.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	0a5b      	lsrs	r3, r3, #9
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fe8c 	bl	8005b54 <I2C_SlaveReceive_BTF>
 8004e3c:	e004      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e46:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr

08004e72 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr

08004e84 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004eca:	bf00      	nop
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc80      	pop	{r7}
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bc80      	pop	{r7}
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr

08004f0a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f20:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d150      	bne.n	8004fd2 <I2C_MasterTransmit_TXE+0xc8>
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b21      	cmp	r3, #33	; 0x21
 8004f34:	d14d      	bne.n	8004fd2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d01d      	beq.n	8004f78 <I2C_MasterTransmit_TXE+0x6e>
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d01a      	beq.n	8004f78 <I2C_MasterTransmit_TXE+0x6e>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f48:	d016      	beq.n	8004f78 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f58:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2211      	movs	r2, #17
 8004f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f7ff ff6c 	bl	8004e4e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f76:	e060      	b.n	800503a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f86:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	d107      	bne.n	8004fc2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ff81 	bl	8004ec2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fc0:	e03b      	b.n	800503a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff ff3f 	bl	8004e4e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fd0:	e033      	b.n	800503a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b21      	cmp	r3, #33	; 0x21
 8004fd6:	d005      	beq.n	8004fe4 <I2C_MasterTransmit_TXE+0xda>
 8004fd8:	7bbb      	ldrb	r3, [r7, #14]
 8004fda:	2b40      	cmp	r3, #64	; 0x40
 8004fdc:	d12d      	bne.n	800503a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004fde:	7bfb      	ldrb	r3, [r7, #15]
 8004fe0:	2b22      	cmp	r3, #34	; 0x22
 8004fe2:	d12a      	bne.n	800503a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ffe:	e01c      	b.n	800503a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d103      	bne.n	8005014 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f88e 	bl	800512e <I2C_MemoryTransmit_TXE_BTF>
}
 8005012:	e012      	b.n	800503a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005038:	e7ff      	b.n	800503a <I2C_MasterTransmit_TXE+0x130>
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b21      	cmp	r3, #33	; 0x21
 800505a:	d164      	bne.n	8005126 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d012      	beq.n	800508c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005080:	b29b      	uxth	r3, r3
 8005082:	3b01      	subs	r3, #1
 8005084:	b29a      	uxth	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800508a:	e04c      	b.n	8005126 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d01d      	beq.n	80050ce <I2C_MasterTransmit_BTF+0x8c>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b20      	cmp	r3, #32
 8005096:	d01a      	beq.n	80050ce <I2C_MasterTransmit_BTF+0x8c>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800509e:	d016      	beq.n	80050ce <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ae:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2211      	movs	r2, #17
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff fec1 	bl	8004e4e <HAL_I2C_MasterTxCpltCallback>
}
 80050cc:	e02b      	b.n	8005126 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050dc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ec:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b40      	cmp	r3, #64	; 0x40
 8005106:	d107      	bne.n	8005118 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fed6 	bl	8004ec2 <HAL_I2C_MemTxCpltCallback>
}
 8005116:	e006      	b.n	8005126 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff fe94 	bl	8004e4e <HAL_I2C_MasterTxCpltCallback>
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11d      	bne.n	8005182 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10b      	bne.n	8005166 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005152:	b2da      	uxtb	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	1c9a      	adds	r2, r3, #2
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005164:	e073      	b.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516a:	b29b      	uxth	r3, r3
 800516c:	121b      	asrs	r3, r3, #8
 800516e:	b2da      	uxtb	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005180:	e065      	b.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005186:	2b01      	cmp	r3, #1
 8005188:	d10b      	bne.n	80051a2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800518e:	b2da      	uxtb	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051a0:	e055      	b.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d151      	bne.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051aa:	7bfb      	ldrb	r3, [r7, #15]
 80051ac:	2b22      	cmp	r3, #34	; 0x22
 80051ae:	d10d      	bne.n	80051cc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051be:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051ca:	e040      	b.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d015      	beq.n	8005202 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b21      	cmp	r3, #33	; 0x21
 80051da:	d112      	bne.n	8005202 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	1c5a      	adds	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005200:	e025      	b.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d120      	bne.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b21      	cmp	r3, #33	; 0x21
 8005210:	d11d      	bne.n	800524e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005220:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005230:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fe3a 	bl	8004ec2 <HAL_I2C_MemTxCpltCallback>
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b22      	cmp	r3, #34	; 0x22
 8005268:	f040 80a2 	bne.w	80053b0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b03      	cmp	r3, #3
 8005278:	d921      	bls.n	80052be <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	f040 8082 	bne.w	80053b0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ba:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80052bc:	e078      	b.n	80053b0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d074      	beq.n	80053b0 <I2C_MasterReceive_RXNE+0x15a>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d002      	beq.n	80052d2 <I2C_MasterReceive_RXNE+0x7c>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d16e      	bne.n	80053b0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f001 fb30 	bl	8006938 <I2C_WaitOnSTOPRequestThroughIT>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d142      	bne.n	8005364 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052fc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2220      	movs	r2, #32
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d10a      	bne.n	800534e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff fdc4 	bl	8004ed4 <HAL_I2C_MemRxCpltCallback>
}
 800534c:	e030      	b.n	80053b0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2212      	movs	r2, #18
 800535a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fd7f 	bl	8004e60 <HAL_I2C_MasterRxCpltCallback>
}
 8005362:	e025      	b.n	80053b0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005372:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff fd9b 	bl	8004ee6 <HAL_I2C_ErrorCallback>
}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d11b      	bne.n	8005408 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	b2d2      	uxtb	r2, r2
 80053ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005406:	e0bd      	b.n	8005584 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b03      	cmp	r3, #3
 8005410:	d129      	bne.n	8005466 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2b04      	cmp	r3, #4
 8005426:	d00a      	beq.n	800543e <I2C_MasterReceive_BTF+0x86>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d007      	beq.n	800543e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005464:	e08e      	b.n	8005584 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546a:	b29b      	uxth	r3, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d176      	bne.n	800555e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d002      	beq.n	800547c <I2C_MasterReceive_BTF+0xc4>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b10      	cmp	r3, #16
 800547a:	d108      	bne.n	800548e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	e019      	b.n	80054c2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2b04      	cmp	r3, #4
 8005492:	d002      	beq.n	800549a <I2C_MasterReceive_BTF+0xe2>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b02      	cmp	r3, #2
 8005498:	d108      	bne.n	80054ac <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e00a      	b.n	80054c2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d007      	beq.n	80054c2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	691a      	ldr	r2, [r3, #16]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800551c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b40      	cmp	r3, #64	; 0x40
 8005530:	d10a      	bne.n	8005548 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f7ff fcc7 	bl	8004ed4 <HAL_I2C_MemRxCpltCallback>
}
 8005546:	e01d      	b.n	8005584 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2212      	movs	r2, #18
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7ff fc82 	bl	8004e60 <HAL_I2C_MasterRxCpltCallback>
}
 800555c:	e012      	b.n	8005584 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d117      	bne.n	80055d0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055ba:	e067      	b.n	800568c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]
}
 80055ce:	e05d      	b.n	800568c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d8:	d133      	bne.n	8005642 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b21      	cmp	r3, #33	; 0x21
 80055e4:	d109      	bne.n	80055fa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	461a      	mov	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f6:	611a      	str	r2, [r3, #16]
 80055f8:	e008      	b.n	800560c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <I2C_Master_SB+0x92>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561a:	2b00      	cmp	r3, #0
 800561c:	d108      	bne.n	8005630 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	2b00      	cmp	r3, #0
 8005624:	d032      	beq.n	800568c <I2C_Master_SB+0x100>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	2b00      	cmp	r3, #0
 800562e:	d02d      	beq.n	800568c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563e:	605a      	str	r2, [r3, #4]
}
 8005640:	e024      	b.n	800568c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10e      	bne.n	8005668 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564e:	b29b      	uxth	r3, r3
 8005650:	11db      	asrs	r3, r3, #7
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0306 	and.w	r3, r3, #6
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f063 030f 	orn	r3, r3, #15
 800565e:	b2da      	uxtb	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	611a      	str	r2, [r3, #16]
}
 8005666:	e011      	b.n	800568c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10d      	bne.n	800568c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005674:	b29b      	uxth	r3, r3
 8005676:	11db      	asrs	r3, r3, #7
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 0306 	and.w	r3, r3, #6
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f063 030e 	orn	r3, r3, #14
 8005684:	b2da      	uxtb	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	611a      	str	r2, [r3, #16]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	bc80      	pop	{r7}
 8005694:	4770      	bx	lr

08005696 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <I2C_Master_ADD10+0x26>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <I2C_Master_ADD10+0x48>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056dc:	605a      	str	r2, [r3, #4]
  }
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b091      	sub	sp, #68	; 0x44
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b22      	cmp	r3, #34	; 0x22
 8005710:	f040 8174 	bne.w	80059fc <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10f      	bne.n	800573c <I2C_Master_ADDR+0x54>
 800571c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005720:	2b40      	cmp	r3, #64	; 0x40
 8005722:	d10b      	bne.n	800573c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005724:	2300      	movs	r3, #0
 8005726:	633b      	str	r3, [r7, #48]	; 0x30
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	633b      	str	r3, [r7, #48]	; 0x30
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	e16b      	b.n	8005a14 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11d      	bne.n	8005780 <I2C_Master_ADDR+0x98>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800574c:	d118      	bne.n	8005780 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005762:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005772:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	651a      	str	r2, [r3, #80]	; 0x50
 800577e:	e149      	b.n	8005a14 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d113      	bne.n	80057b2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578a:	2300      	movs	r3, #0
 800578c:	62bb      	str	r3, [r7, #40]	; 0x28
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	62bb      	str	r3, [r7, #40]	; 0x28
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	e120      	b.n	80059f4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	f040 808a 	bne.w	80058d2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c4:	d137      	bne.n	8005836 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e4:	d113      	bne.n	800580e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f6:	2300      	movs	r3, #0
 80057f8:	627b      	str	r3, [r7, #36]	; 0x24
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	e0f2      	b.n	80059f4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580e:	2300      	movs	r3, #0
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	623b      	str	r3, [r7, #32]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e0de      	b.n	80059f4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	2b08      	cmp	r3, #8
 800583a:	d02e      	beq.n	800589a <I2C_Master_ADDR+0x1b2>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	2b20      	cmp	r3, #32
 8005840:	d02b      	beq.n	800589a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005844:	2b12      	cmp	r3, #18
 8005846:	d102      	bne.n	800584e <I2C_Master_ADDR+0x166>
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	2b01      	cmp	r3, #1
 800584c:	d125      	bne.n	800589a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005850:	2b04      	cmp	r3, #4
 8005852:	d00e      	beq.n	8005872 <I2C_Master_ADDR+0x18a>
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	2b02      	cmp	r3, #2
 8005858:	d00b      	beq.n	8005872 <I2C_Master_ADDR+0x18a>
 800585a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585c:	2b10      	cmp	r3, #16
 800585e:	d008      	beq.n	8005872 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e007      	b.n	8005882 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005880:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	e0ac      	b.n	80059f4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058aa:	2300      	movs	r3, #0
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ce:	601a      	str	r2, [r3, #0]
 80058d0:	e090      	b.n	80059f4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d158      	bne.n	800598e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d021      	beq.n	8005926 <I2C_Master_ADDR+0x23e>
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d01e      	beq.n	8005926 <I2C_Master_ADDR+0x23e>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d01b      	beq.n	8005926 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058fc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e012      	b.n	800594c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005934:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	613b      	str	r3, [r7, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800595a:	d14b      	bne.n	80059f4 <I2C_Master_ADDR+0x30c>
 800595c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005962:	d00b      	beq.n	800597c <I2C_Master_ADDR+0x294>
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	2b01      	cmp	r3, #1
 8005968:	d008      	beq.n	800597c <I2C_Master_ADDR+0x294>
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	2b08      	cmp	r3, #8
 800596e:	d005      	beq.n	800597c <I2C_Master_ADDR+0x294>
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	2b10      	cmp	r3, #16
 8005974:	d002      	beq.n	800597c <I2C_Master_ADDR+0x294>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b20      	cmp	r3, #32
 800597a:	d13b      	bne.n	80059f4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	e032      	b.n	80059f4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800599c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ac:	d117      	bne.n	80059de <I2C_Master_ADDR+0x2f6>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059b4:	d00b      	beq.n	80059ce <I2C_Master_ADDR+0x2e6>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d008      	beq.n	80059ce <I2C_Master_ADDR+0x2e6>
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d005      	beq.n	80059ce <I2C_Master_ADDR+0x2e6>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	2b10      	cmp	r3, #16
 80059c6:	d002      	beq.n	80059ce <I2C_Master_ADDR+0x2e6>
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d107      	bne.n	80059de <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059fa:	e00b      	b.n	8005a14 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fc:	2300      	movs	r3, #0
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
}
 8005a12:	e7ff      	b.n	8005a14 <I2C_Master_ADDR+0x32c>
 8005a14:	bf00      	nop
 8005a16:	3744      	adds	r7, #68	; 0x44
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bc80      	pop	{r7}
 8005a1c:	4770      	bx	lr

08005a1e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02b      	beq.n	8005a90 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	781a      	ldrb	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d114      	bne.n	8005a90 <I2C_SlaveTransmit_TXE+0x72>
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	2b29      	cmp	r3, #41	; 0x29
 8005a6a:	d111      	bne.n	8005a90 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2221      	movs	r2, #33	; 0x21
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2228      	movs	r2, #40	; 0x28
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff f9f1 	bl	8004e72 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d011      	beq.n	8005ace <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr

08005ad8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02c      	beq.n	8005b4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d114      	bne.n	8005b4c <I2C_SlaveReceive_RXNE+0x74>
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b2a      	cmp	r3, #42	; 0x2a
 8005b26:	d111      	bne.n	8005b4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2222      	movs	r2, #34	; 0x22
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2228      	movs	r2, #40	; 0x28
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f7ff f99c 	bl	8004e84 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d012      	beq.n	8005b8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	b2d2      	uxtb	r2, r2
 8005b72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr

08005b96 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bb0:	2b28      	cmp	r3, #40	; 0x28
 8005bb2:	d127      	bne.n	8005c04 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	089b      	lsrs	r3, r3, #2
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	09db      	lsrs	r3, r3, #7
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	81bb      	strh	r3, [r7, #12]
 8005be6:	e002      	b.n	8005bee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bf6:	89ba      	ldrh	r2, [r7, #12]
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff f94a 	bl	8004e96 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c02:	e00e      	b.n	8005c22 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c04:	2300      	movs	r3, #0
 8005c06:	60bb      	str	r3, [r7, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60bb      	str	r3, [r7, #8]
 8005c18:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	60bb      	str	r3, [r7, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c88:	d172      	bne.n	8005d70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	2b22      	cmp	r3, #34	; 0x22
 8005c8e:	d002      	beq.n	8005c96 <I2C_Slave_STOPF+0x6a>
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b2a      	cmp	r3, #42	; 0x2a
 8005c94:	d135      	bne.n	8005d02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f043 0204 	orr.w	r2, r3, #4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe f8b8 	bl	8003e44 <HAL_DMA_GetState>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d049      	beq.n	8005d6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	4a69      	ldr	r2, [pc, #420]	; (8005e84 <I2C_Slave_STOPF+0x258>)
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fd ff30 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d03d      	beq.n	8005d6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d00:	e035      	b.n	8005d6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f043 0204 	orr.w	r2, r3, #4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe f882 	bl	8003e44 <HAL_DMA_GetState>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d014      	beq.n	8005d70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	4a4e      	ldr	r2, [pc, #312]	; (8005e84 <I2C_Slave_STOPF+0x258>)
 8005d4c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fd fefa 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d008      	beq.n	8005d70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	e000      	b.n	8005d70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d03e      	beq.n	8005df8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d112      	bne.n	8005dae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691a      	ldr	r2, [r3, #16]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	695b      	ldr	r3, [r3, #20]
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d112      	bne.n	8005de2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d005      	beq.n	8005df8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	f043 0204 	orr.w	r2, r3, #4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f000 f843 	bl	8005e8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e06:	e039      	b.n	8005e7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0c:	d109      	bne.n	8005e22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2228      	movs	r2, #40	; 0x28
 8005e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff f831 	bl	8004e84 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b28      	cmp	r3, #40	; 0x28
 8005e2c:	d111      	bne.n	8005e52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <I2C_Slave_STOPF+0x25c>)
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff f830 	bl	8004eb0 <HAL_I2C_ListenCpltCallback>
}
 8005e50:	e014      	b.n	8005e7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	2b22      	cmp	r3, #34	; 0x22
 8005e58:	d002      	beq.n	8005e60 <I2C_Slave_STOPF+0x234>
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b22      	cmp	r3, #34	; 0x22
 8005e5e:	d10d      	bne.n	8005e7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff f804 	bl	8004e84 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	08006539 	.word	0x08006539
 8005e88:	ffff0000 	.word	0xffff0000

08005e8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ea4:	7bbb      	ldrb	r3, [r7, #14]
 8005ea6:	2b10      	cmp	r3, #16
 8005ea8:	d002      	beq.n	8005eb0 <I2C_ITError+0x24>
 8005eaa:	7bbb      	ldrb	r3, [r7, #14]
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d10a      	bne.n	8005ec6 <I2C_ITError+0x3a>
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b22      	cmp	r3, #34	; 0x22
 8005eb4:	d107      	bne.n	8005ec6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ec4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ecc:	2b28      	cmp	r3, #40	; 0x28
 8005ece:	d107      	bne.n	8005ee0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2228      	movs	r2, #40	; 0x28
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ede:	e015      	b.n	8005f0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eee:	d00a      	beq.n	8005f06 <I2C_ITError+0x7a>
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b60      	cmp	r3, #96	; 0x60
 8005ef4:	d007      	beq.n	8005f06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1a:	d161      	bne.n	8005fe0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d020      	beq.n	8005f7a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	4a6a      	ldr	r2, [pc, #424]	; (80060e8 <I2C_ITError+0x25c>)
 8005f3e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f44:	4618      	mov	r0, r3
 8005f46:	f7fd fe01 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8089 	beq.w	8006064 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 0201 	bic.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	e074      	b.n	8006064 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7e:	4a5a      	ldr	r2, [pc, #360]	; (80060e8 <I2C_ITError+0x25c>)
 8005f80:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7fd fde0 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d068      	beq.n	8006064 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d10b      	bne.n	8005fb8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691a      	ldr	r2, [r3, #16]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0201 	bic.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4798      	blx	r3
 8005fde:	e041      	b.n	8006064 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b60      	cmp	r3, #96	; 0x60
 8005fea:	d125      	bne.n	8006038 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d10b      	bne.n	8006020 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fe ff61 	bl	8004ef8 <HAL_I2C_AbortCpltCallback>
 8006036:	e015      	b.n	8006064 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b40      	cmp	r3, #64	; 0x40
 8006044:	d10b      	bne.n	800605e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7fe ff41 	bl	8004ee6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10e      	bne.n	8006092 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006084:	2b00      	cmp	r3, #0
 8006086:	d104      	bne.n	8006092 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a8:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d113      	bne.n	80060de <I2C_ITError+0x252>
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	2b28      	cmp	r3, #40	; 0x28
 80060ba:	d110      	bne.n	80060de <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a0b      	ldr	r2, [pc, #44]	; (80060ec <I2C_ITError+0x260>)
 80060c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fe fee9 	bl	8004eb0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	08006539 	.word	0x08006539
 80060ec:	ffff0000 	.word	0xffff0000

080060f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	460b      	mov	r3, r1
 80060fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b08      	cmp	r3, #8
 800610a:	d006      	beq.n	800611a <I2C_MasterRequestWrite+0x2a>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d003      	beq.n	800611a <I2C_MasterRequestWrite+0x2a>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006118:	d108      	bne.n	800612c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e00b      	b.n	8006144 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	2b12      	cmp	r3, #18
 8006132:	d107      	bne.n	8006144 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006142:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fa99 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00d      	beq.n	8006178 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800616a:	d103      	bne.n	8006174 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e035      	b.n	80061e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006180:	d108      	bne.n	8006194 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006182:	897b      	ldrh	r3, [r7, #10]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006190:	611a      	str	r2, [r3, #16]
 8006192:	e01b      	b.n	80061cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006194:	897b      	ldrh	r3, [r7, #10]
 8006196:	11db      	asrs	r3, r3, #7
 8006198:	b2db      	uxtb	r3, r3
 800619a:	f003 0306 	and.w	r3, r3, #6
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	f063 030f 	orn	r3, r3, #15
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	490e      	ldr	r1, [pc, #56]	; (80061ec <I2C_MasterRequestWrite+0xfc>)
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fabf 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e010      	b.n	80061e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061c2:	897b      	ldrh	r3, [r7, #10]
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4907      	ldr	r1, [pc, #28]	; (80061f0 <I2C_MasterRequestWrite+0x100>)
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 faaf 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	00010008 	.word	0x00010008
 80061f0:	00010002 	.word	0x00010002

080061f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b088      	sub	sp, #32
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	4608      	mov	r0, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	461a      	mov	r2, r3
 8006202:	4603      	mov	r3, r0
 8006204:	817b      	strh	r3, [r7, #10]
 8006206:	460b      	mov	r3, r1
 8006208:	813b      	strh	r3, [r7, #8]
 800620a:	4613      	mov	r3, r2
 800620c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800621c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	2200      	movs	r2, #0
 8006226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fa2c 	bl	8006688 <I2C_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00d      	beq.n	8006252 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006244:	d103      	bne.n	800624e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e05f      	b.n	8006312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006252:	897b      	ldrh	r3, [r7, #10]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006260:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	492d      	ldr	r1, [pc, #180]	; (800631c <I2C_RequestMemoryWrite+0x128>)
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fa64 	bl	8006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e04c      	b.n	8006312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006278:	2300      	movs	r3, #0
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800628e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006290:	6a39      	ldr	r1, [r7, #32]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 face 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00d      	beq.n	80062ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d107      	bne.n	80062b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e02b      	b.n	8006312 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d105      	bne.n	80062cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062c0:	893b      	ldrh	r3, [r7, #8]
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	611a      	str	r2, [r3, #16]
 80062ca:	e021      	b.n	8006310 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062cc:	893b      	ldrh	r3, [r7, #8]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062dc:	6a39      	ldr	r1, [r7, #32]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 faa8 	bl	8006834 <I2C_WaitOnTXEFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d107      	bne.n	8006302 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006300:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e005      	b.n	8006312 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006306:	893b      	ldrh	r3, [r7, #8]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	00010002 	.word	0x00010002

08006320 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006334:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006342:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006352:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006360:	2200      	movs	r2, #0
 8006362:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	2200      	movs	r2, #0
 8006372:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006374:	7cfb      	ldrb	r3, [r7, #19]
 8006376:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800637a:	2b21      	cmp	r3, #33	; 0x21
 800637c:	d007      	beq.n	800638e <I2C_DMAXferCplt+0x6e>
 800637e:	7cfb      	ldrb	r3, [r7, #19]
 8006380:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006384:	2b22      	cmp	r3, #34	; 0x22
 8006386:	d131      	bne.n	80063ec <I2C_DMAXferCplt+0xcc>
 8006388:	7cbb      	ldrb	r3, [r7, #18]
 800638a:	2b20      	cmp	r3, #32
 800638c:	d12e      	bne.n	80063ec <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800639c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063a4:	7cfb      	ldrb	r3, [r7, #19]
 80063a6:	2b29      	cmp	r3, #41	; 0x29
 80063a8:	d10a      	bne.n	80063c0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2221      	movs	r2, #33	; 0x21
 80063ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2228      	movs	r2, #40	; 0x28
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063b8:	6978      	ldr	r0, [r7, #20]
 80063ba:	f7fe fd5a 	bl	8004e72 <HAL_I2C_SlaveTxCpltCallback>
 80063be:	e00c      	b.n	80063da <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80063c0:	7cfb      	ldrb	r3, [r7, #19]
 80063c2:	2b2a      	cmp	r3, #42	; 0x2a
 80063c4:	d109      	bne.n	80063da <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2222      	movs	r2, #34	; 0x22
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2228      	movs	r2, #40	; 0x28
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063d4:	6978      	ldr	r0, [r7, #20]
 80063d6:	f7fe fd55 	bl	8004e84 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685a      	ldr	r2, [r3, #4]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80063e8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80063ea:	e06a      	b.n	80064c2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d064      	beq.n	80064c2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d107      	bne.n	8006412 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006410:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006420:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006428:	d009      	beq.n	800643e <I2C_DMAXferCplt+0x11e>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d006      	beq.n	800643e <I2C_DMAXferCplt+0x11e>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006436:	d002      	beq.n	800643e <I2C_DMAXferCplt+0x11e>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b20      	cmp	r3, #32
 800643c:	d107      	bne.n	800644e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800644c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800645c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800646c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	f7fe fd32 	bl	8004ee6 <HAL_I2C_ErrorCallback>
}
 8006482:	e01e      	b.n	80064c2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	d10a      	bne.n	80064ae <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2200      	movs	r2, #0
 80064a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80064a6:	6978      	ldr	r0, [r7, #20]
 80064a8:	f7fe fd14 	bl	8004ed4 <HAL_I2C_MemRxCpltCallback>
}
 80064ac:	e009      	b.n	80064c2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2212      	movs	r2, #18
 80064ba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80064bc:	6978      	ldr	r0, [r7, #20]
 80064be:	f7fe fccf 	bl	8004e60 <HAL_I2C_MasterRxCpltCallback>
}
 80064c2:	bf00      	nop
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e4:	2200      	movs	r2, #0
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006506:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f043 0210 	orr.w	r2, r3, #16
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f7fe fcdb 	bl	8004ee6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b086      	sub	sp, #24
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006550:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006552:	4b4b      	ldr	r3, [pc, #300]	; (8006680 <I2C_DMAAbort+0x148>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	08db      	lsrs	r3, r3, #3
 8006558:	4a4a      	ldr	r2, [pc, #296]	; (8006684 <I2C_DMAAbort+0x14c>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	0a1a      	lsrs	r2, r3, #8
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00da      	lsls	r2, r3, #3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800657e:	e00a      	b.n	8006596 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3b01      	subs	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006594:	d0ea      	beq.n	800656c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a2:	2200      	movs	r2, #0
 80065a4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	2200      	movs	r2, #0
 80065b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065c4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	2200      	movs	r2, #0
 80065ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	2200      	movs	r2, #0
 80065da:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e8:	2200      	movs	r2, #0
 80065ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0201 	bic.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b60      	cmp	r3, #96	; 0x60
 8006606:	d10e      	bne.n	8006626 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2200      	movs	r2, #0
 800661c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7fe fc6a 	bl	8004ef8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006624:	e027      	b.n	8006676 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006626:	7cfb      	ldrb	r3, [r7, #19]
 8006628:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800662c:	2b28      	cmp	r3, #40	; 0x28
 800662e:	d117      	bne.n	8006660 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800664e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2228      	movs	r2, #40	; 0x28
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800665e:	e007      	b.n	8006670 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006670:	6978      	ldr	r0, [r7, #20]
 8006672:	f7fe fc38 	bl	8004ee6 <HAL_I2C_ErrorCallback>
}
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000010 	.word	0x20000010
 8006684:	14f8b589 	.word	0x14f8b589

08006688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006698:	e025      	b.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d021      	beq.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a2:	f7fc fc05 	bl	8002eb0 <HAL_GetTick>
 80066a6:	4602      	mov	r2, r0
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d302      	bcc.n	80066b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d116      	bne.n	80066e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	f043 0220 	orr.w	r2, r3, #32
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e023      	b.n	800672e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d10d      	bne.n	800670c <I2C_WaitOnFlagUntilTimeout+0x84>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	43da      	mvns	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4013      	ands	r3, r2
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	bf0c      	ite	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	2300      	movne	r3, #0
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	e00c      	b.n	8006726 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	43da      	mvns	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4013      	ands	r3, r2
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf0c      	ite	eq
 800671e:	2301      	moveq	r3, #1
 8006720:	2300      	movne	r3, #0
 8006722:	b2db      	uxtb	r3, r3
 8006724:	461a      	mov	r2, r3
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	429a      	cmp	r2, r3
 800672a:	d0b6      	beq.n	800669a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006744:	e051      	b.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006754:	d123      	bne.n	800679e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006764:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800676e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f043 0204 	orr.w	r2, r3, #4
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e046      	b.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d021      	beq.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fc fb83 	bl	8002eb0 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d116      	bne.n	80067ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f043 0220 	orr.w	r2, r3, #32
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e020      	b.n	800682c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d10c      	bne.n	800680e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	43da      	mvns	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf14      	ite	ne
 8006806:	2301      	movne	r3, #1
 8006808:	2300      	moveq	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	e00b      	b.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	43da      	mvns	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	b29b      	uxth	r3, r3
 800681c:	2b00      	cmp	r3, #0
 800681e:	bf14      	ite	ne
 8006820:	2301      	movne	r3, #1
 8006822:	2300      	moveq	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d18d      	bne.n	8006746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006840:	e02d      	b.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 f8aa 	bl	800699c <I2C_IsAcknowledgeFailed>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e02d      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d021      	beq.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc fb29 	bl	8002eb0 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	68ba      	ldr	r2, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d116      	bne.n	800689e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e007      	b.n	80068ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a8:	2b80      	cmp	r3, #128	; 0x80
 80068aa:	d1ca      	bne.n	8006842 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068c2:	e02d      	b.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f869 	bl	800699c <I2C_IsAcknowledgeFailed>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e02d      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d021      	beq.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7fc fae8 	bl	8002eb0 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d116      	bne.n	8006920 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e007      	b.n	8006930 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b04      	cmp	r3, #4
 800692c:	d1ca      	bne.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006940:	2300      	movs	r3, #0
 8006942:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006944:	4b13      	ldr	r3, [pc, #76]	; (8006994 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	08db      	lsrs	r3, r3, #3
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800694c:	fba2 2303 	umull	r2, r3, r2, r3
 8006950:	0a1a      	lsrs	r2, r3, #8
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b01      	subs	r3, #1
 800695e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e008      	b.n	8006988 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006984:	d0e9      	beq.n	800695a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	bc80      	pop	{r7}
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20000010 	.word	0x20000010
 8006998:	14f8b589 	.word	0x14f8b589

0800699c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b2:	d11b      	bne.n	80069ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80069bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d8:	f043 0204 	orr.w	r2, r3, #4
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bc80      	pop	{r7}
 80069f6:	4770      	bx	lr

080069f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006a08:	d103      	bne.n	8006a12 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a10:	e007      	b.n	8006a22 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006a1a:	d102      	bne.n	8006a22 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2208      	movs	r2, #8
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006a22:	bf00      	nop
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e272      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8087 	beq.w	8006b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a4c:	4b92      	ldr	r3, [pc, #584]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d00c      	beq.n	8006a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a58:	4b8f      	ldr	r3, [pc, #572]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d112      	bne.n	8006a8a <HAL_RCC_OscConfig+0x5e>
 8006a64:	4b8c      	ldr	r3, [pc, #560]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	d10b      	bne.n	8006a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a72:	4b89      	ldr	r3, [pc, #548]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d06c      	beq.n	8006b58 <HAL_RCC_OscConfig+0x12c>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d168      	bne.n	8006b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e24c      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x76>
 8006a94:	4b80      	ldr	r3, [pc, #512]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a7f      	ldr	r2, [pc, #508]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a9e:	6013      	str	r3, [r2, #0]
 8006aa0:	e02e      	b.n	8006b00 <HAL_RCC_OscConfig+0xd4>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10c      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x98>
 8006aaa:	4b7b      	ldr	r3, [pc, #492]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a7a      	ldr	r2, [pc, #488]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	4b78      	ldr	r3, [pc, #480]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a77      	ldr	r2, [pc, #476]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	e01d      	b.n	8006b00 <HAL_RCC_OscConfig+0xd4>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCC_OscConfig+0xbc>
 8006ace:	4b72      	ldr	r3, [pc, #456]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a71      	ldr	r2, [pc, #452]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	4b6f      	ldr	r3, [pc, #444]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a6e      	ldr	r2, [pc, #440]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e00b      	b.n	8006b00 <HAL_RCC_OscConfig+0xd4>
 8006ae8:	4b6b      	ldr	r3, [pc, #428]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a6a      	ldr	r2, [pc, #424]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af2:	6013      	str	r3, [r2, #0]
 8006af4:	4b68      	ldr	r3, [pc, #416]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a67      	ldr	r2, [pc, #412]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d013      	beq.n	8006b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b08:	f7fc f9d2 	bl	8002eb0 <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0e:	e008      	b.n	8006b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b10:	f7fc f9ce 	bl	8002eb0 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b64      	cmp	r3, #100	; 0x64
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e200      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b22:	4b5d      	ldr	r3, [pc, #372]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0f0      	beq.n	8006b10 <HAL_RCC_OscConfig+0xe4>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b30:	f7fc f9be 	bl	8002eb0 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b38:	f7fc f9ba 	bl	8002eb0 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b64      	cmp	r3, #100	; 0x64
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e1ec      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4a:	4b53      	ldr	r3, [pc, #332]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1f0      	bne.n	8006b38 <HAL_RCC_OscConfig+0x10c>
 8006b56:	e000      	b.n	8006b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d063      	beq.n	8006c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b66:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f003 030c 	and.w	r3, r3, #12
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00b      	beq.n	8006b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b72:	4b49      	ldr	r3, [pc, #292]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f003 030c 	and.w	r3, r3, #12
 8006b7a:	2b08      	cmp	r3, #8
 8006b7c:	d11c      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x18c>
 8006b7e:	4b46      	ldr	r3, [pc, #280]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d116      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	4b43      	ldr	r3, [pc, #268]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x176>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d001      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e1c0      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba2:	4b3d      	ldr	r3, [pc, #244]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4939      	ldr	r1, [pc, #228]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	e03a      	b.n	8006c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d020      	beq.n	8006c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc0:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_RCC_OscConfig+0x270>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc6:	f7fc f973 	bl	8002eb0 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bce:	f7fc f96f 	bl	8002eb0 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e1a1      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be0:	4b2d      	ldr	r3, [pc, #180]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bec:	4b2a      	ldr	r3, [pc, #168]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4927      	ldr	r1, [pc, #156]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	600b      	str	r3, [r1, #0]
 8006c00:	e015      	b.n	8006c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c02:	4b26      	ldr	r3, [pc, #152]	; (8006c9c <HAL_RCC_OscConfig+0x270>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c08:	f7fc f952 	bl	8002eb0 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c10:	f7fc f94e 	bl	8002eb0 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e180      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c22:	4b1d      	ldr	r3, [pc, #116]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1f0      	bne.n	8006c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d03a      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d019      	beq.n	8006c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <HAL_RCC_OscConfig+0x274>)
 8006c44:	2201      	movs	r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c48:	f7fc f932 	bl	8002eb0 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c50:	f7fc f92e 	bl	8002eb0 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e160      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c62:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <HAL_RCC_OscConfig+0x26c>)
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f003 0302 	and.w	r3, r3, #2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c6e:	2001      	movs	r0, #1
 8006c70:	f000 fad8 	bl	8007224 <RCC_Delay>
 8006c74:	e01c      	b.n	8006cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c76:	4b0a      	ldr	r3, [pc, #40]	; (8006ca0 <HAL_RCC_OscConfig+0x274>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7c:	f7fc f918 	bl	8002eb0 <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c82:	e00f      	b.n	8006ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c84:	f7fc f914 	bl	8002eb0 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d908      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e146      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
 8006c96:	bf00      	nop
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	42420000 	.word	0x42420000
 8006ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca4:	4b92      	ldr	r3, [pc, #584]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e9      	bne.n	8006c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0304 	and.w	r3, r3, #4
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80a6 	beq.w	8006e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cc2:	4b8b      	ldr	r3, [pc, #556]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006cc4:	69db      	ldr	r3, [r3, #28]
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10d      	bne.n	8006cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cce:	4b88      	ldr	r3, [pc, #544]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4a87      	ldr	r2, [pc, #540]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	61d3      	str	r3, [r2, #28]
 8006cda:	4b85      	ldr	r3, [pc, #532]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	4b82      	ldr	r3, [pc, #520]	; (8006ef4 <HAL_RCC_OscConfig+0x4c8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d118      	bne.n	8006d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf6:	4b7f      	ldr	r3, [pc, #508]	; (8006ef4 <HAL_RCC_OscConfig+0x4c8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a7e      	ldr	r2, [pc, #504]	; (8006ef4 <HAL_RCC_OscConfig+0x4c8>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7fc f8d5 	bl	8002eb0 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0a:	f7fc f8d1 	bl	8002eb0 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b64      	cmp	r3, #100	; 0x64
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e103      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	4b75      	ldr	r3, [pc, #468]	; (8006ef4 <HAL_RCC_OscConfig+0x4c8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCC_OscConfig+0x312>
 8006d30:	4b6f      	ldr	r3, [pc, #444]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d32:	6a1b      	ldr	r3, [r3, #32]
 8006d34:	4a6e      	ldr	r2, [pc, #440]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6213      	str	r3, [r2, #32]
 8006d3c:	e02d      	b.n	8006d9a <HAL_RCC_OscConfig+0x36e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x334>
 8006d46:	4b6a      	ldr	r3, [pc, #424]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	4a69      	ldr	r2, [pc, #420]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d4c:	f023 0301 	bic.w	r3, r3, #1
 8006d50:	6213      	str	r3, [r2, #32]
 8006d52:	4b67      	ldr	r3, [pc, #412]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	4a66      	ldr	r2, [pc, #408]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d58:	f023 0304 	bic.w	r3, r3, #4
 8006d5c:	6213      	str	r3, [r2, #32]
 8006d5e:	e01c      	b.n	8006d9a <HAL_RCC_OscConfig+0x36e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	2b05      	cmp	r3, #5
 8006d66:	d10c      	bne.n	8006d82 <HAL_RCC_OscConfig+0x356>
 8006d68:	4b61      	ldr	r3, [pc, #388]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	4a60      	ldr	r2, [pc, #384]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d6e:	f043 0304 	orr.w	r3, r3, #4
 8006d72:	6213      	str	r3, [r2, #32]
 8006d74:	4b5e      	ldr	r3, [pc, #376]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	4a5d      	ldr	r2, [pc, #372]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	6213      	str	r3, [r2, #32]
 8006d80:	e00b      	b.n	8006d9a <HAL_RCC_OscConfig+0x36e>
 8006d82:	4b5b      	ldr	r3, [pc, #364]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	4a5a      	ldr	r2, [pc, #360]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	6213      	str	r3, [r2, #32]
 8006d8e:	4b58      	ldr	r3, [pc, #352]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	4a57      	ldr	r2, [pc, #348]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006d94:	f023 0304 	bic.w	r3, r3, #4
 8006d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d015      	beq.n	8006dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da2:	f7fc f885 	bl	8002eb0 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fc f881 	bl	8002eb0 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e0b1      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc0:	4b4b      	ldr	r3, [pc, #300]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0ee      	beq.n	8006daa <HAL_RCC_OscConfig+0x37e>
 8006dcc:	e014      	b.n	8006df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dce:	f7fc f86f 	bl	8002eb0 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dd4:	e00a      	b.n	8006dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd6:	f7fc f86b 	bl	8002eb0 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e09b      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dec:	4b40      	ldr	r3, [pc, #256]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ee      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d105      	bne.n	8006e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dfe:	4b3c      	ldr	r3, [pc, #240]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	4a3b      	ldr	r2, [pc, #236]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8087 	beq.w	8006f22 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e14:	4b36      	ldr	r3, [pc, #216]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	f003 030c 	and.w	r3, r3, #12
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d061      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d146      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e28:	4b33      	ldr	r3, [pc, #204]	; (8006ef8 <HAL_RCC_OscConfig+0x4cc>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2e:	f7fc f83f 	bl	8002eb0 <HAL_GetTick>
 8006e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e34:	e008      	b.n	8006e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e36:	f7fc f83b 	bl	8002eb0 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d901      	bls.n	8006e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e06d      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e48:	4b29      	ldr	r3, [pc, #164]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f0      	bne.n	8006e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5c:	d108      	bne.n	8006e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e5e:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	4921      	ldr	r1, [pc, #132]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e70:	4b1f      	ldr	r3, [pc, #124]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a19      	ldr	r1, [r3, #32]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	430b      	orrs	r3, r1
 8006e82:	491b      	ldr	r1, [pc, #108]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <HAL_RCC_OscConfig+0x4cc>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8e:	f7fc f80f 	bl	8002eb0 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e96:	f7fc f80b 	bl	8002eb0 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e03d      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006ea8:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f0      	beq.n	8006e96 <HAL_RCC_OscConfig+0x46a>
 8006eb4:	e035      	b.n	8006f22 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb6:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <HAL_RCC_OscConfig+0x4cc>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebc:	f7fb fff8 	bl	8002eb0 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec4:	f7fb fff4 	bl	8002eb0 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e026      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <HAL_RCC_OscConfig+0x4c4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x498>
 8006ee2:	e01e      	b.n	8006f22 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d107      	bne.n	8006efc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e019      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	40007000 	.word	0x40007000
 8006ef8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <HAL_RCC_OscConfig+0x500>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a1b      	ldr	r3, [r3, #32]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d106      	bne.n	8006f1e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d001      	beq.n	8006f22 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40021000 	.word	0x40021000

08006f30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0d0      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f44:	4b6a      	ldr	r3, [pc, #424]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0307 	and.w	r3, r3, #7
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d910      	bls.n	8006f74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f52:	4b67      	ldr	r3, [pc, #412]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 0207 	bic.w	r2, r3, #7
 8006f5a:	4965      	ldr	r1, [pc, #404]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f62:	4b63      	ldr	r3, [pc, #396]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d001      	beq.n	8006f74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e0b8      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d020      	beq.n	8006fc2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d005      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f8c:	4b59      	ldr	r3, [pc, #356]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	4a58      	ldr	r2, [pc, #352]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fa4:	4b53      	ldr	r3, [pc, #332]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	4a52      	ldr	r2, [pc, #328]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006faa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006fae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fb0:	4b50      	ldr	r3, [pc, #320]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	494d      	ldr	r1, [pc, #308]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0301 	and.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d040      	beq.n	8007050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d107      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fd6:	4b47      	ldr	r3, [pc, #284]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d115      	bne.n	800700e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e07f      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d107      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fee:	4b41      	ldr	r3, [pc, #260]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d109      	bne.n	800700e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e073      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ffe:	4b3d      	ldr	r3, [pc, #244]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 0302 	and.w	r3, r3, #2
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e06b      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800700e:	4b39      	ldr	r3, [pc, #228]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f023 0203 	bic.w	r2, r3, #3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4936      	ldr	r1, [pc, #216]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 800701c:	4313      	orrs	r3, r2
 800701e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007020:	f7fb ff46 	bl	8002eb0 <HAL_GetTick>
 8007024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007026:	e00a      	b.n	800703e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007028:	f7fb ff42 	bl	8002eb0 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	f241 3288 	movw	r2, #5000	; 0x1388
 8007036:	4293      	cmp	r3, r2
 8007038:	d901      	bls.n	800703e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e053      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703e:	4b2d      	ldr	r3, [pc, #180]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f003 020c 	and.w	r2, r3, #12
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	429a      	cmp	r2, r3
 800704e:	d1eb      	bne.n	8007028 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007050:	4b27      	ldr	r3, [pc, #156]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	683a      	ldr	r2, [r7, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d210      	bcs.n	8007080 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800705e:	4b24      	ldr	r3, [pc, #144]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f023 0207 	bic.w	r2, r3, #7
 8007066:	4922      	ldr	r1, [pc, #136]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800706e:	4b20      	ldr	r3, [pc, #128]	; (80070f0 <HAL_RCC_ClockConfig+0x1c0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e032      	b.n	80070e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4916      	ldr	r1, [pc, #88]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070aa:	4b12      	ldr	r3, [pc, #72]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	490e      	ldr	r1, [pc, #56]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070be:	f000 f821 	bl	8007104 <HAL_RCC_GetSysClockFreq>
 80070c2:	4602      	mov	r2, r0
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <HAL_RCC_ClockConfig+0x1c4>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	091b      	lsrs	r3, r3, #4
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	490a      	ldr	r1, [pc, #40]	; (80070f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070d0:	5ccb      	ldrb	r3, [r1, r3]
 80070d2:	fa22 f303 	lsr.w	r3, r2, r3
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <HAL_RCC_ClockConfig+0x1cc>)
 80070d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <HAL_RCC_ClockConfig+0x1d0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fb fea4 	bl	8002e2c <HAL_InitTick>

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	40022000 	.word	0x40022000
 80070f4:	40021000 	.word	0x40021000
 80070f8:	0800b078 	.word	0x0800b078
 80070fc:	20000010 	.word	0x20000010
 8007100:	20000014 	.word	0x20000014

08007104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007104:	b490      	push	{r4, r7}
 8007106:	b08a      	sub	sp, #40	; 0x28
 8007108:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <HAL_RCC_GetSysClockFreq+0xac>)
 800710c:	1d3c      	adds	r4, r7, #4
 800710e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007114:	f240 2301 	movw	r3, #513	; 0x201
 8007118:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	61fb      	str	r3, [r7, #28]
 800711e:	2300      	movs	r3, #0
 8007120:	61bb      	str	r3, [r7, #24]
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800712e:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	f003 030c 	and.w	r3, r3, #12
 800713a:	2b04      	cmp	r3, #4
 800713c:	d002      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x40>
 800713e:	2b08      	cmp	r3, #8
 8007140:	d003      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x46>
 8007142:	e02b      	b.n	800719c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007144:	4b1c      	ldr	r3, [pc, #112]	; (80071b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007146:	623b      	str	r3, [r7, #32]
      break;
 8007148:	e02b      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	0c9b      	lsrs	r3, r3, #18
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	3328      	adds	r3, #40	; 0x28
 8007154:	443b      	add	r3, r7
 8007156:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800715a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d012      	beq.n	800718c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	0c5b      	lsrs	r3, r3, #17
 800716c:	f003 0301 	and.w	r3, r3, #1
 8007170:	3328      	adds	r3, #40	; 0x28
 8007172:	443b      	add	r3, r7
 8007174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007178:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800717e:	fb03 f202 	mul.w	r2, r3, r2
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
 800718a:	e004      	b.n	8007196 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	4a0b      	ldr	r2, [pc, #44]	; (80071bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007190:	fb02 f303 	mul.w	r3, r2, r3
 8007194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	623b      	str	r3, [r7, #32]
      break;
 800719a:	e002      	b.n	80071a2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800719c:	4b06      	ldr	r3, [pc, #24]	; (80071b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800719e:	623b      	str	r3, [r7, #32]
      break;
 80071a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80071a2:	6a3b      	ldr	r3, [r7, #32]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3728      	adds	r7, #40	; 0x28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc90      	pop	{r4, r7}
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	0800a9b0 	.word	0x0800a9b0
 80071b4:	40021000 	.word	0x40021000
 80071b8:	007a1200 	.word	0x007a1200
 80071bc:	003d0900 	.word	0x003d0900

080071c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071c4:	4b02      	ldr	r3, [pc, #8]	; (80071d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80071c6:	681b      	ldr	r3, [r3, #0]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr
 80071d0:	20000010 	.word	0x20000010

080071d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071d8:	f7ff fff2 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 80071dc:	4602      	mov	r2, r0
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	4903      	ldr	r1, [pc, #12]	; (80071f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071ea:	5ccb      	ldrb	r3, [r1, r3]
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40021000 	.word	0x40021000
 80071f8:	0800b088 	.word	0x0800b088

080071fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007200:	f7ff ffde 	bl	80071c0 <HAL_RCC_GetHCLKFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	0adb      	lsrs	r3, r3, #11
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	4903      	ldr	r1, [pc, #12]	; (8007220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40021000 	.word	0x40021000
 8007220:	0800b088 	.word	0x0800b088

08007224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <RCC_Delay+0x34>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a0a      	ldr	r2, [pc, #40]	; (800725c <RCC_Delay+0x38>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	0a5b      	lsrs	r3, r3, #9
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007240:	bf00      	nop
  }
  while (Delay --);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1e5a      	subs	r2, r3, #1
 8007246:	60fa      	str	r2, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f9      	bne.n	8007240 <RCC_Delay+0x1c>
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	bc80      	pop	{r7}
 8007256:	4770      	bx	lr
 8007258:	20000010 	.word	0x20000010
 800725c:	10624dd3 	.word	0x10624dd3

08007260 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d07d      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800727c:	2300      	movs	r3, #0
 800727e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007280:	4b4f      	ldr	r3, [pc, #316]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10d      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800728c:	4b4c      	ldr	r3, [pc, #304]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728e:	69db      	ldr	r3, [r3, #28]
 8007290:	4a4b      	ldr	r2, [pc, #300]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007296:	61d3      	str	r3, [r2, #28]
 8007298:	4b49      	ldr	r3, [pc, #292]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a8:	4b46      	ldr	r3, [pc, #280]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d118      	bne.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072b4:	4b43      	ldr	r3, [pc, #268]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a42      	ldr	r2, [pc, #264]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072c0:	f7fb fdf6 	bl	8002eb0 <HAL_GetTick>
 80072c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072c6:	e008      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072c8:	f7fb fdf2 	bl	8002eb0 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b64      	cmp	r3, #100	; 0x64
 80072d4:	d901      	bls.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e06d      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072da:	4b3a      	ldr	r3, [pc, #232]	; (80073c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f0      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072e6:	4b36      	ldr	r3, [pc, #216]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d02e      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	429a      	cmp	r2, r3
 8007302:	d027      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007304:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800730e:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007310:	2201      	movs	r2, #1
 8007312:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007314:	4b2c      	ldr	r3, [pc, #176]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d014      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800732a:	f7fb fdc1 	bl	8002eb0 <HAL_GetTick>
 800732e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007330:	e00a      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007332:	f7fb fdbd 	bl	8002eb0 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007340:	4293      	cmp	r3, r2
 8007342:	d901      	bls.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e036      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007348:	4b1d      	ldr	r3, [pc, #116]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0ee      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007354:	4b1a      	ldr	r3, [pc, #104]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4917      	ldr	r1, [pc, #92]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007362:	4313      	orrs	r3, r2
 8007364:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d105      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800736c:	4b14      	ldr	r3, [pc, #80]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007384:	4b0e      	ldr	r3, [pc, #56]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	490b      	ldr	r1, [pc, #44]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007392:	4313      	orrs	r3, r2
 8007394:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d008      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073a2:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	4904      	ldr	r1, [pc, #16]	; (80073c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40021000 	.word	0x40021000
 80073c4:	40007000 	.word	0x40007000
 80073c8:	42420440 	.word	0x42420440

080073cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073cc:	b590      	push	{r4, r7, lr}
 80073ce:	b08d      	sub	sp, #52	; 0x34
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80073d4:	4b58      	ldr	r3, [pc, #352]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80073d6:	f107 040c 	add.w	r4, r7, #12
 80073da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80073e0:	f240 2301 	movw	r3, #513	; 0x201
 80073e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
 80073ea:	2300      	movs	r3, #0
 80073ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ee:	2300      	movs	r3, #0
 80073f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	61fb      	str	r3, [r7, #28]
 80073f6:	2300      	movs	r3, #0
 80073f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b10      	cmp	r3, #16
 80073fe:	d00a      	beq.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b10      	cmp	r3, #16
 8007404:	f200 808e 	bhi.w	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d049      	beq.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b02      	cmp	r3, #2
 8007412:	d079      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007414:	e086      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8007416:	4b49      	ldr	r3, [pc, #292]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800741c:	4b47      	ldr	r3, [pc, #284]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d07f      	beq.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	0c9b      	lsrs	r3, r3, #18
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	3330      	adds	r3, #48	; 0x30
 8007432:	443b      	add	r3, r7
 8007434:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007438:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d017      	beq.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007444:	4b3d      	ldr	r3, [pc, #244]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	0c5b      	lsrs	r3, r3, #17
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	3330      	adds	r3, #48	; 0x30
 8007450:	443b      	add	r3, r7
 8007452:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007462:	4a37      	ldr	r2, [pc, #220]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	fbb2 f2f3 	udiv	r2, r2, r3
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007472:	e004      	b.n	800747e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	4a33      	ldr	r2, [pc, #204]	; (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8007478:	fb02 f303 	mul.w	r3, r2, r3
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800747e:	4b2f      	ldr	r3, [pc, #188]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800748a:	d102      	bne.n	8007492 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007490:	e04a      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	005b      	lsls	r3, r3, #1
 8007496:	4a2c      	ldr	r2, [pc, #176]	; (8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80074a0:	e042      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80074a2:	4b26      	ldr	r3, [pc, #152]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b2:	d108      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80074be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c4:	e01f      	b.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d0:	d109      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80074de:	f649 4340 	movw	r3, #40000	; 0x9c40
 80074e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074e4:	e00f      	b.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074f0:	d11c      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80074f2:	4b12      	ldr	r3, [pc, #72]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d016      	beq.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80074fe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007504:	e012      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007506:	e011      	b.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007508:	f7ff fe78 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 800750c:	4602      	mov	r2, r0
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	0b9b      	lsrs	r3, r3, #14
 8007514:	f003 0303 	and.w	r3, r3, #3
 8007518:	3301      	adds	r3, #1
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007522:	e004      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007524:	bf00      	nop
 8007526:	e002      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007528:	bf00      	nop
 800752a:	e000      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800752c:	bf00      	nop
    }
  }
  return (frequency);
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007530:	4618      	mov	r0, r3
 8007532:	3734      	adds	r7, #52	; 0x34
 8007534:	46bd      	mov	sp, r7
 8007536:	bd90      	pop	{r4, r7, pc}
 8007538:	0800a9c0 	.word	0x0800a9c0
 800753c:	40021000 	.word	0x40021000
 8007540:	007a1200 	.word	0x007a1200
 8007544:	003d0900 	.word	0x003d0900
 8007548:	aaaaaaab 	.word	0xaaaaaaab

0800754c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e076      	b.n	800764c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	2b00      	cmp	r3, #0
 8007564:	d108      	bne.n	8007578 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800756e:	d009      	beq.n	8007584 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	61da      	str	r2, [r3, #28]
 8007576:	e005      	b.n	8007584 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d106      	bne.n	80075a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fa fe9e 	bl	80022e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007608:	ea42 0103 	orr.w	r1, r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	0c1a      	lsrs	r2, r3, #16
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f002 0204 	and.w	r2, r2, #4
 800762a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	69da      	ldr	r2, [r3, #28]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800763a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	4613      	mov	r3, r2
 8007660:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007662:	2300      	movs	r3, #0
 8007664:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800766c:	2b01      	cmp	r3, #1
 800766e:	d101      	bne.n	8007674 <HAL_SPI_Transmit_DMA+0x20>
 8007670:	2302      	movs	r3, #2
 8007672:	e09b      	b.n	80077ac <HAL_SPI_Transmit_DMA+0x158>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d002      	beq.n	800768e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007688:	2302      	movs	r3, #2
 800768a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800768c:	e089      	b.n	80077a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <HAL_SPI_Transmit_DMA+0x46>
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800769e:	e080      	b.n	80077a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2203      	movs	r2, #3
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	88fa      	ldrh	r2, [r7, #6]
 80076b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	88fa      	ldrh	r2, [r7, #6]
 80076be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2200      	movs	r2, #0
 80076dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e6:	d10f      	bne.n	8007708 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007706:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770c:	4a29      	ldr	r2, [pc, #164]	; (80077b4 <HAL_SPI_Transmit_DMA+0x160>)
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007714:	4a28      	ldr	r2, [pc, #160]	; (80077b8 <HAL_SPI_Transmit_DMA+0x164>)
 8007716:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771c:	4a27      	ldr	r2, [pc, #156]	; (80077bc <HAL_SPI_Transmit_DMA+0x168>)
 800771e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007724:	2200      	movs	r2, #0
 8007726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	4619      	mov	r1, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	330c      	adds	r3, #12
 8007738:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800773e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007740:	f7fc f9a4 	bl	8003a8c <HAL_DMA_Start_IT>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00c      	beq.n	8007764 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774e:	f043 0210 	orr.w	r2, r3, #16
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007762:	e01e      	b.n	80077a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b40      	cmp	r3, #64	; 0x40
 8007770:	d007      	beq.n	8007782 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007780:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0220 	orr.w	r2, r2, #32
 8007790:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0202 	orr.w	r2, r2, #2
 80077a0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	0800789d 	.word	0x0800789d
 80077b8:	080077f7 	.word	0x080077f7
 80077bc:	080078b9 	.word	0x080078b9

080077c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bc80      	pop	{r7}
 80077d0:	4770      	bx	lr

080077d2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b086      	sub	sp, #24
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007804:	f7fb fb54 	bl	8002eb0 <HAL_GetTick>
 8007808:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b20      	cmp	r3, #32
 8007816:	d03b      	beq.n	8007890 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0220 	bic.w	r2, r2, #32
 8007826:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0202 	bic.w	r2, r2, #2
 8007836:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	2164      	movs	r1, #100	; 0x64
 800783c:	6978      	ldr	r0, [r7, #20]
 800783e:	f000 f8e3 	bl	8007a08 <SPI_EndRxTxTransaction>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f043 0220 	orr.w	r2, r3, #32
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	60fb      	str	r3, [r7, #12]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	60fb      	str	r3, [r7, #12]
 8007870:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	2200      	movs	r2, #0
 8007876:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007888:	6978      	ldr	r0, [r7, #20]
 800788a:	f7ff ffab 	bl	80077e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800788e:	e002      	b.n	8007896 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007890:	6978      	ldr	r0, [r7, #20]
 8007892:	f7ff ff95 	bl	80077c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7ff ff91 	bl	80077d2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078b0:	bf00      	nop
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0203 	bic.w	r2, r2, #3
 80078d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078da:	f043 0210 	orr.w	r2, r3, #16
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff ff7a 	bl	80077e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	4613      	mov	r3, r2
 8007906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007908:	f7fb fad2 	bl	8002eb0 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	4413      	add	r3, r2
 8007916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007918:	f7fb faca 	bl	8002eb0 <HAL_GetTick>
 800791c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800791e:	4b39      	ldr	r3, [pc, #228]	; (8007a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	015b      	lsls	r3, r3, #5
 8007924:	0d1b      	lsrs	r3, r3, #20
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800792e:	e054      	b.n	80079da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007936:	d050      	beq.n	80079da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007938:	f7fb faba 	bl	8002eb0 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	429a      	cmp	r2, r3
 8007946:	d902      	bls.n	800794e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d13d      	bne.n	80079ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800795c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007966:	d111      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007970:	d004      	beq.n	800797c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797a:	d107      	bne.n	800798c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800798a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007994:	d10f      	bne.n	80079b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e017      	b.n	80079fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4013      	ands	r3, r2
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	bf0c      	ite	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	2300      	movne	r3, #0
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	461a      	mov	r2, r3
 80079f2:	79fb      	ldrb	r3, [r7, #7]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d19b      	bne.n	8007930 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000010 	.word	0x20000010

08007a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2180      	movs	r1, #128	; 0x80
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff ff6a 	bl	80078f8 <SPI_WaitFlagStateUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d007      	beq.n	8007a3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e000      	b.n	8007a3c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e041      	b.n	8007ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d106      	bne.n	8007a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fb f97c 	bl	8002d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3304      	adds	r3, #4
 8007a80:	4619      	mov	r1, r3
 8007a82:	4610      	mov	r0, r2
 8007a84:	f000 fa70 	bl	8007f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d001      	beq.n	8007afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e03a      	b.n	8007b72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0201 	orr.w	r2, r2, #1
 8007b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <HAL_TIM_Base_Start_IT+0x98>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d00e      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x58>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b26:	d009      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x58>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a14      	ldr	r2, [pc, #80]	; (8007b80 <HAL_TIM_Base_Start_IT+0x9c>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d004      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0x58>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d111      	bne.n	8007b60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b06      	cmp	r3, #6
 8007b4c:	d010      	beq.n	8007b70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	e007      	b.n	8007b70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr
 8007b7c:	40012c00 	.word	0x40012c00
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800

08007b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d122      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d11b      	bne.n	8007be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0202 	mvn.w	r2, #2
 8007bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d003      	beq.n	8007bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f9b1 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007bd0:	e005      	b.n	8007bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9a4 	bl	8007f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f9b3 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b04      	cmp	r3, #4
 8007bf0:	d122      	bne.n	8007c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b04      	cmp	r3, #4
 8007bfe:	d11b      	bne.n	8007c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f06f 0204 	mvn.w	r2, #4
 8007c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f987 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007c24:	e005      	b.n	8007c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f97a 	bl	8007f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f989 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d122      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	f003 0308 	and.w	r3, r3, #8
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d11b      	bne.n	8007c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f06f 0208 	mvn.w	r2, #8
 8007c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2204      	movs	r2, #4
 8007c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f95d 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007c78:	e005      	b.n	8007c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f950 	bl	8007f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f95f 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d122      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f003 0310 	and.w	r3, r3, #16
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d11b      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f06f 0210 	mvn.w	r2, #16
 8007cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2208      	movs	r2, #8
 8007cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f933 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007ccc:	e005      	b.n	8007cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f926 	bl	8007f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f935 	bl	8007f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d10e      	bne.n	8007d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d107      	bne.n	8007d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f06f 0201 	mvn.w	r2, #1
 8007d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7f9 f8f4 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d16:	2b80      	cmp	r3, #128	; 0x80
 8007d18:	d10e      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b80      	cmp	r3, #128	; 0x80
 8007d26:	d107      	bne.n	8007d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa77 	bl	8008226 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b40      	cmp	r3, #64	; 0x40
 8007d44:	d10e      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d50:	2b40      	cmp	r3, #64	; 0x40
 8007d52:	d107      	bne.n	8007d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f8f9 	bl	8007f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	f003 0320 	and.w	r3, r3, #32
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d10e      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d107      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f06f 0220 	mvn.w	r2, #32
 8007d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa42 	bl	8008214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_ConfigClockSource+0x18>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e0b3      	b.n	8007f18 <HAL_TIM_ConfigClockSource+0x180>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007dd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de8:	d03e      	beq.n	8007e68 <HAL_TIM_ConfigClockSource+0xd0>
 8007dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dee:	f200 8087 	bhi.w	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df6:	f000 8085 	beq.w	8007f04 <HAL_TIM_ConfigClockSource+0x16c>
 8007dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dfe:	d87f      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e00:	2b70      	cmp	r3, #112	; 0x70
 8007e02:	d01a      	beq.n	8007e3a <HAL_TIM_ConfigClockSource+0xa2>
 8007e04:	2b70      	cmp	r3, #112	; 0x70
 8007e06:	d87b      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e08:	2b60      	cmp	r3, #96	; 0x60
 8007e0a:	d050      	beq.n	8007eae <HAL_TIM_ConfigClockSource+0x116>
 8007e0c:	2b60      	cmp	r3, #96	; 0x60
 8007e0e:	d877      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e10:	2b50      	cmp	r3, #80	; 0x50
 8007e12:	d03c      	beq.n	8007e8e <HAL_TIM_ConfigClockSource+0xf6>
 8007e14:	2b50      	cmp	r3, #80	; 0x50
 8007e16:	d873      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e18:	2b40      	cmp	r3, #64	; 0x40
 8007e1a:	d058      	beq.n	8007ece <HAL_TIM_ConfigClockSource+0x136>
 8007e1c:	2b40      	cmp	r3, #64	; 0x40
 8007e1e:	d86f      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e20:	2b30      	cmp	r3, #48	; 0x30
 8007e22:	d064      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x156>
 8007e24:	2b30      	cmp	r3, #48	; 0x30
 8007e26:	d86b      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d060      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x156>
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d867      	bhi.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d05c      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x156>
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d05a      	beq.n	8007eee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007e38:	e062      	b.n	8007f00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6818      	ldr	r0, [r3, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	6899      	ldr	r1, [r3, #8]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	685a      	ldr	r2, [r3, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f000 f966 	bl	800811a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	609a      	str	r2, [r3, #8]
      break;
 8007e66:	e04e      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6818      	ldr	r0, [r3, #0]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	6899      	ldr	r1, [r3, #8]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f000 f94f 	bl	800811a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689a      	ldr	r2, [r3, #8]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e8a:	609a      	str	r2, [r3, #8]
      break;
 8007e8c:	e03b      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6818      	ldr	r0, [r3, #0]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6859      	ldr	r1, [r3, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f000 f8c6 	bl	800802c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2150      	movs	r1, #80	; 0x50
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f91d 	bl	80080e6 <TIM_ITRx_SetConfig>
      break;
 8007eac:	e02b      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6859      	ldr	r1, [r3, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f000 f8e4 	bl	8008088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2160      	movs	r1, #96	; 0x60
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f90d 	bl	80080e6 <TIM_ITRx_SetConfig>
      break;
 8007ecc:	e01b      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	6859      	ldr	r1, [r3, #4]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	461a      	mov	r2, r3
 8007edc:	f000 f8a6 	bl	800802c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	2140      	movs	r1, #64	; 0x40
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f000 f8fd 	bl	80080e6 <TIM_ITRx_SetConfig>
      break;
 8007eec:	e00b      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f000 f8f4 	bl	80080e6 <TIM_ITRx_SetConfig>
        break;
 8007efe:	e002      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bc80      	pop	{r7}
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bc80      	pop	{r7}
 8007f54:	4770      	bx	lr

08007f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a29      	ldr	r2, [pc, #164]	; (8008020 <TIM_Base_SetConfig+0xb8>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <TIM_Base_SetConfig+0x30>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0x30>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a26      	ldr	r2, [pc, #152]	; (8008024 <TIM_Base_SetConfig+0xbc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0x30>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a25      	ldr	r2, [pc, #148]	; (8008028 <TIM_Base_SetConfig+0xc0>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <TIM_Base_SetConfig+0xb8>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <TIM_Base_SetConfig+0x62>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb8:	d007      	beq.n	8007fca <TIM_Base_SetConfig+0x62>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a19      	ldr	r2, [pc, #100]	; (8008024 <TIM_Base_SetConfig+0xbc>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_Base_SetConfig+0x62>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a18      	ldr	r2, [pc, #96]	; (8008028 <TIM_Base_SetConfig+0xc0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d108      	bne.n	8007fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	689a      	ldr	r2, [r3, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a07      	ldr	r2, [pc, #28]	; (8008020 <TIM_Base_SetConfig+0xb8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d103      	bne.n	8008010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	615a      	str	r2, [r3, #20]
}
 8008016:	bf00      	nop
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40000400 	.word	0x40000400
 8008028:	40000800 	.word	0x40000800

0800802c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800802c:	b480      	push	{r7}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f023 0201 	bic.w	r2, r3, #1
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 030a 	bic.w	r3, r3, #10
 8008068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	621a      	str	r2, [r3, #32]
}
 800807e:	bf00      	nop
 8008080:	371c      	adds	r7, #28
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr

08008088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	f023 0210 	bic.w	r2, r3, #16
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	031b      	lsls	r3, r3, #12
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	621a      	str	r2, [r3, #32]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr

080080e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	f043 0307 	orr.w	r3, r3, #7
 8008108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	609a      	str	r2, [r3, #8]
}
 8008110:	bf00      	nop
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr

0800811a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800811a:	b480      	push	{r7}
 800811c:	b087      	sub	sp, #28
 800811e:	af00      	add	r7, sp, #0
 8008120:	60f8      	str	r0, [r7, #12]
 8008122:	60b9      	str	r1, [r7, #8]
 8008124:	607a      	str	r2, [r7, #4]
 8008126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	021a      	lsls	r2, r3, #8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	431a      	orrs	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	4313      	orrs	r3, r2
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	609a      	str	r2, [r3, #8]
}
 800814e:	bf00      	nop
 8008150:	371c      	adds	r7, #28
 8008152:	46bd      	mov	sp, r7
 8008154:	bc80      	pop	{r7}
 8008156:	4770      	bx	lr

08008158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800816c:	2302      	movs	r3, #2
 800816e:	e046      	b.n	80081fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2202      	movs	r2, #2
 800817c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	4313      	orrs	r3, r2
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a16      	ldr	r2, [pc, #88]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00e      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081bc:	d009      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a12      	ldr	r2, [pc, #72]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a10      	ldr	r2, [pc, #64]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d10c      	bne.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr
 8008208:	40012c00 	.word	0x40012c00
 800820c:	40000400 	.word	0x40000400
 8008210:	40000800 	.word	0x40000800

08008214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	bc80      	pop	{r7}
 8008224:	4770      	bx	lr

08008226 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	bc80      	pop	{r7}
 8008236:	4770      	bx	lr

08008238 <cos>:
 8008238:	b530      	push	{r4, r5, lr}
 800823a:	4a20      	ldr	r2, [pc, #128]	; (80082bc <cos+0x84>)
 800823c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008240:	4293      	cmp	r3, r2
 8008242:	b087      	sub	sp, #28
 8008244:	dc06      	bgt.n	8008254 <cos+0x1c>
 8008246:	2200      	movs	r2, #0
 8008248:	2300      	movs	r3, #0
 800824a:	b007      	add	sp, #28
 800824c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008250:	f000 bbba 	b.w	80089c8 <__kernel_cos>
 8008254:	4a1a      	ldr	r2, [pc, #104]	; (80082c0 <cos+0x88>)
 8008256:	4293      	cmp	r3, r2
 8008258:	dd05      	ble.n	8008266 <cos+0x2e>
 800825a:	4602      	mov	r2, r0
 800825c:	460b      	mov	r3, r1
 800825e:	f7f7 ff7b 	bl	8000158 <__aeabi_dsub>
 8008262:	b007      	add	sp, #28
 8008264:	bd30      	pop	{r4, r5, pc}
 8008266:	aa02      	add	r2, sp, #8
 8008268:	f000 f906 	bl	8008478 <__ieee754_rem_pio2>
 800826c:	f000 0003 	and.w	r0, r0, #3
 8008270:	2801      	cmp	r0, #1
 8008272:	d009      	beq.n	8008288 <cos+0x50>
 8008274:	2802      	cmp	r0, #2
 8008276:	d011      	beq.n	800829c <cos+0x64>
 8008278:	b9b8      	cbnz	r0, 80082aa <cos+0x72>
 800827a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800827e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008282:	f000 fba1 	bl	80089c8 <__kernel_cos>
 8008286:	e7ec      	b.n	8008262 <cos+0x2a>
 8008288:	9000      	str	r0, [sp, #0]
 800828a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800828e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008292:	f000 ff99 	bl	80091c8 <__kernel_sin>
 8008296:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800829a:	e7e2      	b.n	8008262 <cos+0x2a>
 800829c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a4:	f000 fb90 	bl	80089c8 <__kernel_cos>
 80082a8:	e7f5      	b.n	8008296 <cos+0x5e>
 80082aa:	2301      	movs	r3, #1
 80082ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b6:	f000 ff87 	bl	80091c8 <__kernel_sin>
 80082ba:	e7d2      	b.n	8008262 <cos+0x2a>
 80082bc:	3fe921fb 	.word	0x3fe921fb
 80082c0:	7fefffff 	.word	0x7fefffff

080082c4 <log10>:
 80082c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c6:	4604      	mov	r4, r0
 80082c8:	460d      	mov	r5, r1
 80082ca:	f000 f851 	bl	8008370 <__ieee754_log10>
 80082ce:	4622      	mov	r2, r4
 80082d0:	4606      	mov	r6, r0
 80082d2:	460f      	mov	r7, r1
 80082d4:	462b      	mov	r3, r5
 80082d6:	4620      	mov	r0, r4
 80082d8:	4629      	mov	r1, r5
 80082da:	f7f8 fb8f 	bl	80009fc <__aeabi_dcmpun>
 80082de:	b998      	cbnz	r0, 8008308 <log10+0x44>
 80082e0:	2200      	movs	r2, #0
 80082e2:	2300      	movs	r3, #0
 80082e4:	4620      	mov	r0, r4
 80082e6:	4629      	mov	r1, r5
 80082e8:	f7f8 fb6a 	bl	80009c0 <__aeabi_dcmple>
 80082ec:	b160      	cbz	r0, 8008308 <log10+0x44>
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fb4f 	bl	8000998 <__aeabi_dcmpeq>
 80082fa:	b140      	cbz	r0, 800830e <log10+0x4a>
 80082fc:	f001 fada 	bl	80098b4 <__errno>
 8008300:	2322      	movs	r3, #34	; 0x22
 8008302:	2600      	movs	r6, #0
 8008304:	4f06      	ldr	r7, [pc, #24]	; (8008320 <log10+0x5c>)
 8008306:	6003      	str	r3, [r0, #0]
 8008308:	4630      	mov	r0, r6
 800830a:	4639      	mov	r1, r7
 800830c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830e:	f001 fad1 	bl	80098b4 <__errno>
 8008312:	2321      	movs	r3, #33	; 0x21
 8008314:	6003      	str	r3, [r0, #0]
 8008316:	4803      	ldr	r0, [pc, #12]	; (8008324 <log10+0x60>)
 8008318:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800831c:	f001 b890 	b.w	8009440 <nan>
 8008320:	fff00000 	.word	0xfff00000
 8008324:	0800b319 	.word	0x0800b319

08008328 <sqrt>:
 8008328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832a:	4606      	mov	r6, r0
 800832c:	460f      	mov	r7, r1
 800832e:	f000 fa9b 	bl	8008868 <__ieee754_sqrt>
 8008332:	4632      	mov	r2, r6
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	463b      	mov	r3, r7
 800833a:	4630      	mov	r0, r6
 800833c:	4639      	mov	r1, r7
 800833e:	f7f8 fb5d 	bl	80009fc <__aeabi_dcmpun>
 8008342:	b990      	cbnz	r0, 800836a <sqrt+0x42>
 8008344:	2200      	movs	r2, #0
 8008346:	2300      	movs	r3, #0
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fb2e 	bl	80009ac <__aeabi_dcmplt>
 8008350:	b158      	cbz	r0, 800836a <sqrt+0x42>
 8008352:	f001 faaf 	bl	80098b4 <__errno>
 8008356:	2321      	movs	r3, #33	; 0x21
 8008358:	2200      	movs	r2, #0
 800835a:	6003      	str	r3, [r0, #0]
 800835c:	2300      	movs	r3, #0
 800835e:	4610      	mov	r0, r2
 8008360:	4619      	mov	r1, r3
 8008362:	f7f8 f9db 	bl	800071c <__aeabi_ddiv>
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	4620      	mov	r0, r4
 800836c:	4629      	mov	r1, r5
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008370 <__ieee754_log10>:
 8008370:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008378:	4604      	mov	r4, r0
 800837a:	460d      	mov	r5, r1
 800837c:	460b      	mov	r3, r1
 800837e:	da26      	bge.n	80083ce <__ieee754_log10+0x5e>
 8008380:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008384:	4302      	orrs	r2, r0
 8008386:	d107      	bne.n	8008398 <__ieee754_log10+0x28>
 8008388:	2200      	movs	r2, #0
 800838a:	2300      	movs	r3, #0
 800838c:	2000      	movs	r0, #0
 800838e:	4936      	ldr	r1, [pc, #216]	; (8008468 <__ieee754_log10+0xf8>)
 8008390:	f7f8 f9c4 	bl	800071c <__aeabi_ddiv>
 8008394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008398:	2900      	cmp	r1, #0
 800839a:	da05      	bge.n	80083a8 <__ieee754_log10+0x38>
 800839c:	4602      	mov	r2, r0
 800839e:	f7f7 fedb 	bl	8000158 <__aeabi_dsub>
 80083a2:	2200      	movs	r2, #0
 80083a4:	2300      	movs	r3, #0
 80083a6:	e7f3      	b.n	8008390 <__ieee754_log10+0x20>
 80083a8:	2200      	movs	r2, #0
 80083aa:	4b30      	ldr	r3, [pc, #192]	; (800846c <__ieee754_log10+0xfc>)
 80083ac:	f7f8 f88c 	bl	80004c8 <__aeabi_dmul>
 80083b0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80083b4:	4604      	mov	r4, r0
 80083b6:	460d      	mov	r5, r1
 80083b8:	460b      	mov	r3, r1
 80083ba:	492d      	ldr	r1, [pc, #180]	; (8008470 <__ieee754_log10+0x100>)
 80083bc:	428b      	cmp	r3, r1
 80083be:	dd08      	ble.n	80083d2 <__ieee754_log10+0x62>
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	4620      	mov	r0, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	f7f7 fec8 	bl	800015c <__adddf3>
 80083cc:	e7e2      	b.n	8008394 <__ieee754_log10+0x24>
 80083ce:	2200      	movs	r2, #0
 80083d0:	e7f3      	b.n	80083ba <__ieee754_log10+0x4a>
 80083d2:	1518      	asrs	r0, r3, #20
 80083d4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80083d8:	4410      	add	r0, r2
 80083da:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80083de:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80083e2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80083e6:	f7f8 f805 	bl	80003f4 <__aeabi_i2d>
 80083ea:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80083ee:	3303      	adds	r3, #3
 80083f0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80083f4:	4606      	mov	r6, r0
 80083f6:	460f      	mov	r7, r1
 80083f8:	4620      	mov	r0, r4
 80083fa:	4629      	mov	r1, r5
 80083fc:	f001 f8a8 	bl	8009550 <__ieee754_log>
 8008400:	a313      	add	r3, pc, #76	; (adr r3, 8008450 <__ieee754_log10+0xe0>)
 8008402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008406:	4680      	mov	r8, r0
 8008408:	4689      	mov	r9, r1
 800840a:	4630      	mov	r0, r6
 800840c:	4639      	mov	r1, r7
 800840e:	f7f8 f85b 	bl	80004c8 <__aeabi_dmul>
 8008412:	a311      	add	r3, pc, #68	; (adr r3, 8008458 <__ieee754_log10+0xe8>)
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	4604      	mov	r4, r0
 800841a:	460d      	mov	r5, r1
 800841c:	4640      	mov	r0, r8
 800841e:	4649      	mov	r1, r9
 8008420:	f7f8 f852 	bl	80004c8 <__aeabi_dmul>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4620      	mov	r0, r4
 800842a:	4629      	mov	r1, r5
 800842c:	f7f7 fe96 	bl	800015c <__adddf3>
 8008430:	a30b      	add	r3, pc, #44	; (adr r3, 8008460 <__ieee754_log10+0xf0>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f8 f843 	bl	80004c8 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	e7bd      	b.n	80083c8 <__ieee754_log10+0x58>
 800844c:	f3af 8000 	nop.w
 8008450:	11f12b36 	.word	0x11f12b36
 8008454:	3d59fef3 	.word	0x3d59fef3
 8008458:	1526e50e 	.word	0x1526e50e
 800845c:	3fdbcb7b 	.word	0x3fdbcb7b
 8008460:	509f6000 	.word	0x509f6000
 8008464:	3fd34413 	.word	0x3fd34413
 8008468:	c3500000 	.word	0xc3500000
 800846c:	43500000 	.word	0x43500000
 8008470:	7fefffff 	.word	0x7fefffff
 8008474:	00000000 	.word	0x00000000

08008478 <__ieee754_rem_pio2>:
 8008478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847c:	4614      	mov	r4, r2
 800847e:	4ac4      	ldr	r2, [pc, #784]	; (8008790 <__ieee754_rem_pio2+0x318>)
 8008480:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008484:	b08d      	sub	sp, #52	; 0x34
 8008486:	4592      	cmp	sl, r2
 8008488:	9104      	str	r1, [sp, #16]
 800848a:	dc07      	bgt.n	800849c <__ieee754_rem_pio2+0x24>
 800848c:	2200      	movs	r2, #0
 800848e:	2300      	movs	r3, #0
 8008490:	e9c4 0100 	strd	r0, r1, [r4]
 8008494:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008498:	2500      	movs	r5, #0
 800849a:	e024      	b.n	80084e6 <__ieee754_rem_pio2+0x6e>
 800849c:	4abd      	ldr	r2, [pc, #756]	; (8008794 <__ieee754_rem_pio2+0x31c>)
 800849e:	4592      	cmp	sl, r2
 80084a0:	dc72      	bgt.n	8008588 <__ieee754_rem_pio2+0x110>
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	4dbc      	ldr	r5, [pc, #752]	; (8008798 <__ieee754_rem_pio2+0x320>)
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008758 <__ieee754_rem_pio2+0x2e0>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	dd36      	ble.n	800851e <__ieee754_rem_pio2+0xa6>
 80084b0:	f7f7 fe52 	bl	8000158 <__aeabi_dsub>
 80084b4:	45aa      	cmp	sl, r5
 80084b6:	4606      	mov	r6, r0
 80084b8:	460f      	mov	r7, r1
 80084ba:	d018      	beq.n	80084ee <__ieee754_rem_pio2+0x76>
 80084bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008760 <__ieee754_rem_pio2+0x2e8>)
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	f7f7 fe49 	bl	8000158 <__aeabi_dsub>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4630      	mov	r0, r6
 80084cc:	e9c4 2300 	strd	r2, r3, [r4]
 80084d0:	4639      	mov	r1, r7
 80084d2:	f7f7 fe41 	bl	8000158 <__aeabi_dsub>
 80084d6:	a3a2      	add	r3, pc, #648	; (adr r3, 8008760 <__ieee754_rem_pio2+0x2e8>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fe3c 	bl	8000158 <__aeabi_dsub>
 80084e0:	2501      	movs	r5, #1
 80084e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80084e6:	4628      	mov	r0, r5
 80084e8:	b00d      	add	sp, #52	; 0x34
 80084ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ee:	a39e      	add	r3, pc, #632	; (adr r3, 8008768 <__ieee754_rem_pio2+0x2f0>)
 80084f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f4:	f7f7 fe30 	bl	8000158 <__aeabi_dsub>
 80084f8:	a39d      	add	r3, pc, #628	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2f8>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f7f7 fe29 	bl	8000158 <__aeabi_dsub>
 8008506:	4602      	mov	r2, r0
 8008508:	460b      	mov	r3, r1
 800850a:	4630      	mov	r0, r6
 800850c:	e9c4 2300 	strd	r2, r3, [r4]
 8008510:	4639      	mov	r1, r7
 8008512:	f7f7 fe21 	bl	8000158 <__aeabi_dsub>
 8008516:	a396      	add	r3, pc, #600	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2f8>)
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	e7de      	b.n	80084dc <__ieee754_rem_pio2+0x64>
 800851e:	f7f7 fe1d 	bl	800015c <__adddf3>
 8008522:	45aa      	cmp	sl, r5
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	d016      	beq.n	8008558 <__ieee754_rem_pio2+0xe0>
 800852a:	a38d      	add	r3, pc, #564	; (adr r3, 8008760 <__ieee754_rem_pio2+0x2e8>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	f7f7 fe14 	bl	800015c <__adddf3>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4630      	mov	r0, r6
 800853a:	e9c4 2300 	strd	r2, r3, [r4]
 800853e:	4639      	mov	r1, r7
 8008540:	f7f7 fe0a 	bl	8000158 <__aeabi_dsub>
 8008544:	a386      	add	r3, pc, #536	; (adr r3, 8008760 <__ieee754_rem_pio2+0x2e8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fe07 	bl	800015c <__adddf3>
 800854e:	f04f 35ff 	mov.w	r5, #4294967295
 8008552:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008556:	e7c6      	b.n	80084e6 <__ieee754_rem_pio2+0x6e>
 8008558:	a383      	add	r3, pc, #524	; (adr r3, 8008768 <__ieee754_rem_pio2+0x2f0>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f7 fdfd 	bl	800015c <__adddf3>
 8008562:	a383      	add	r3, pc, #524	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2f8>)
 8008564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008568:	4606      	mov	r6, r0
 800856a:	460f      	mov	r7, r1
 800856c:	f7f7 fdf6 	bl	800015c <__adddf3>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4630      	mov	r0, r6
 8008576:	e9c4 2300 	strd	r2, r3, [r4]
 800857a:	4639      	mov	r1, r7
 800857c:	f7f7 fdec 	bl	8000158 <__aeabi_dsub>
 8008580:	a37b      	add	r3, pc, #492	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2f8>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	e7e0      	b.n	800854a <__ieee754_rem_pio2+0xd2>
 8008588:	4a84      	ldr	r2, [pc, #528]	; (800879c <__ieee754_rem_pio2+0x324>)
 800858a:	4592      	cmp	sl, r2
 800858c:	f300 80d5 	bgt.w	800873a <__ieee754_rem_pio2+0x2c2>
 8008590:	f000 fed0 	bl	8009334 <fabs>
 8008594:	a378      	add	r3, pc, #480	; (adr r3, 8008778 <__ieee754_rem_pio2+0x300>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	f7f7 ff93 	bl	80004c8 <__aeabi_dmul>
 80085a2:	2200      	movs	r2, #0
 80085a4:	4b7e      	ldr	r3, [pc, #504]	; (80087a0 <__ieee754_rem_pio2+0x328>)
 80085a6:	f7f7 fdd9 	bl	800015c <__adddf3>
 80085aa:	f7f8 fa3d 	bl	8000a28 <__aeabi_d2iz>
 80085ae:	4605      	mov	r5, r0
 80085b0:	f7f7 ff20 	bl	80003f4 <__aeabi_i2d>
 80085b4:	4602      	mov	r2, r0
 80085b6:	460b      	mov	r3, r1
 80085b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085bc:	a366      	add	r3, pc, #408	; (adr r3, 8008758 <__ieee754_rem_pio2+0x2e0>)
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	f7f7 ff81 	bl	80004c8 <__aeabi_dmul>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f7 fdc3 	bl	8000158 <__aeabi_dsub>
 80085d2:	a363      	add	r3, pc, #396	; (adr r3, 8008760 <__ieee754_rem_pio2+0x2e8>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	4680      	mov	r8, r0
 80085da:	4689      	mov	r9, r1
 80085dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e0:	f7f7 ff72 	bl	80004c8 <__aeabi_dmul>
 80085e4:	2d1f      	cmp	r5, #31
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	dc0e      	bgt.n	800860a <__ieee754_rem_pio2+0x192>
 80085ec:	4b6d      	ldr	r3, [pc, #436]	; (80087a4 <__ieee754_rem_pio2+0x32c>)
 80085ee:	1e6a      	subs	r2, r5, #1
 80085f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f4:	4553      	cmp	r3, sl
 80085f6:	d008      	beq.n	800860a <__ieee754_rem_pio2+0x192>
 80085f8:	4632      	mov	r2, r6
 80085fa:	463b      	mov	r3, r7
 80085fc:	4640      	mov	r0, r8
 80085fe:	4649      	mov	r1, r9
 8008600:	f7f7 fdaa 	bl	8000158 <__aeabi_dsub>
 8008604:	e9c4 0100 	strd	r0, r1, [r4]
 8008608:	e013      	b.n	8008632 <__ieee754_rem_pio2+0x1ba>
 800860a:	463b      	mov	r3, r7
 800860c:	4632      	mov	r2, r6
 800860e:	4640      	mov	r0, r8
 8008610:	4649      	mov	r1, r9
 8008612:	f7f7 fda1 	bl	8000158 <__aeabi_dsub>
 8008616:	ea4f 532a 	mov.w	r3, sl, asr #20
 800861a:	9305      	str	r3, [sp, #20]
 800861c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008620:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008624:	f1ba 0f10 	cmp.w	sl, #16
 8008628:	dc1f      	bgt.n	800866a <__ieee754_rem_pio2+0x1f2>
 800862a:	4602      	mov	r2, r0
 800862c:	460b      	mov	r3, r1
 800862e:	e9c4 2300 	strd	r2, r3, [r4]
 8008632:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008636:	4640      	mov	r0, r8
 8008638:	4653      	mov	r3, sl
 800863a:	4649      	mov	r1, r9
 800863c:	f7f7 fd8c 	bl	8000158 <__aeabi_dsub>
 8008640:	4632      	mov	r2, r6
 8008642:	463b      	mov	r3, r7
 8008644:	f7f7 fd88 	bl	8000158 <__aeabi_dsub>
 8008648:	460b      	mov	r3, r1
 800864a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800864e:	9904      	ldr	r1, [sp, #16]
 8008650:	4602      	mov	r2, r0
 8008652:	2900      	cmp	r1, #0
 8008654:	f6bf af47 	bge.w	80084e6 <__ieee754_rem_pio2+0x6e>
 8008658:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800865c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008660:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008664:	60e3      	str	r3, [r4, #12]
 8008666:	426d      	negs	r5, r5
 8008668:	e73d      	b.n	80084e6 <__ieee754_rem_pio2+0x6e>
 800866a:	a33f      	add	r3, pc, #252	; (adr r3, 8008768 <__ieee754_rem_pio2+0x2f0>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008674:	f7f7 ff28 	bl	80004c8 <__aeabi_dmul>
 8008678:	4606      	mov	r6, r0
 800867a:	460f      	mov	r7, r1
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f7 fd68 	bl	8000158 <__aeabi_dsub>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4682      	mov	sl, r0
 800868e:	468b      	mov	fp, r1
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f7 fd60 	bl	8000158 <__aeabi_dsub>
 8008698:	4632      	mov	r2, r6
 800869a:	463b      	mov	r3, r7
 800869c:	f7f7 fd5c 	bl	8000158 <__aeabi_dsub>
 80086a0:	a333      	add	r3, pc, #204	; (adr r3, 8008770 <__ieee754_rem_pio2+0x2f8>)
 80086a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a6:	4606      	mov	r6, r0
 80086a8:	460f      	mov	r7, r1
 80086aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ae:	f7f7 ff0b 	bl	80004c8 <__aeabi_dmul>
 80086b2:	4632      	mov	r2, r6
 80086b4:	463b      	mov	r3, r7
 80086b6:	f7f7 fd4f 	bl	8000158 <__aeabi_dsub>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4606      	mov	r6, r0
 80086c0:	460f      	mov	r7, r1
 80086c2:	4650      	mov	r0, sl
 80086c4:	4659      	mov	r1, fp
 80086c6:	f7f7 fd47 	bl	8000158 <__aeabi_dsub>
 80086ca:	9a05      	ldr	r2, [sp, #20]
 80086cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	2b31      	cmp	r3, #49	; 0x31
 80086d4:	dc06      	bgt.n	80086e4 <__ieee754_rem_pio2+0x26c>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	46d0      	mov	r8, sl
 80086dc:	46d9      	mov	r9, fp
 80086de:	e9c4 2300 	strd	r2, r3, [r4]
 80086e2:	e7a6      	b.n	8008632 <__ieee754_rem_pio2+0x1ba>
 80086e4:	a326      	add	r3, pc, #152	; (adr r3, 8008780 <__ieee754_rem_pio2+0x308>)
 80086e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086ee:	f7f7 feeb 	bl	80004c8 <__aeabi_dmul>
 80086f2:	4606      	mov	r6, r0
 80086f4:	460f      	mov	r7, r1
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4650      	mov	r0, sl
 80086fc:	4659      	mov	r1, fp
 80086fe:	f7f7 fd2b 	bl	8000158 <__aeabi_dsub>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4680      	mov	r8, r0
 8008708:	4689      	mov	r9, r1
 800870a:	4650      	mov	r0, sl
 800870c:	4659      	mov	r1, fp
 800870e:	f7f7 fd23 	bl	8000158 <__aeabi_dsub>
 8008712:	4632      	mov	r2, r6
 8008714:	463b      	mov	r3, r7
 8008716:	f7f7 fd1f 	bl	8000158 <__aeabi_dsub>
 800871a:	a31b      	add	r3, pc, #108	; (adr r3, 8008788 <__ieee754_rem_pio2+0x310>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	4606      	mov	r6, r0
 8008722:	460f      	mov	r7, r1
 8008724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008728:	f7f7 fece 	bl	80004c8 <__aeabi_dmul>
 800872c:	4632      	mov	r2, r6
 800872e:	463b      	mov	r3, r7
 8008730:	f7f7 fd12 	bl	8000158 <__aeabi_dsub>
 8008734:	4606      	mov	r6, r0
 8008736:	460f      	mov	r7, r1
 8008738:	e75e      	b.n	80085f8 <__ieee754_rem_pio2+0x180>
 800873a:	4a1b      	ldr	r2, [pc, #108]	; (80087a8 <__ieee754_rem_pio2+0x330>)
 800873c:	4592      	cmp	sl, r2
 800873e:	dd35      	ble.n	80087ac <__ieee754_rem_pio2+0x334>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	f7f7 fd08 	bl	8000158 <__aeabi_dsub>
 8008748:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800874c:	e9c4 0100 	strd	r0, r1, [r4]
 8008750:	e6a2      	b.n	8008498 <__ieee754_rem_pio2+0x20>
 8008752:	bf00      	nop
 8008754:	f3af 8000 	nop.w
 8008758:	54400000 	.word	0x54400000
 800875c:	3ff921fb 	.word	0x3ff921fb
 8008760:	1a626331 	.word	0x1a626331
 8008764:	3dd0b461 	.word	0x3dd0b461
 8008768:	1a600000 	.word	0x1a600000
 800876c:	3dd0b461 	.word	0x3dd0b461
 8008770:	2e037073 	.word	0x2e037073
 8008774:	3ba3198a 	.word	0x3ba3198a
 8008778:	6dc9c883 	.word	0x6dc9c883
 800877c:	3fe45f30 	.word	0x3fe45f30
 8008780:	2e000000 	.word	0x2e000000
 8008784:	3ba3198a 	.word	0x3ba3198a
 8008788:	252049c1 	.word	0x252049c1
 800878c:	397b839a 	.word	0x397b839a
 8008790:	3fe921fb 	.word	0x3fe921fb
 8008794:	4002d97b 	.word	0x4002d97b
 8008798:	3ff921fb 	.word	0x3ff921fb
 800879c:	413921fb 	.word	0x413921fb
 80087a0:	3fe00000 	.word	0x3fe00000
 80087a4:	0800b090 	.word	0x0800b090
 80087a8:	7fefffff 	.word	0x7fefffff
 80087ac:	ea4f 552a 	mov.w	r5, sl, asr #20
 80087b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80087b4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80087b8:	460f      	mov	r7, r1
 80087ba:	4606      	mov	r6, r0
 80087bc:	f7f8 f934 	bl	8000a28 <__aeabi_d2iz>
 80087c0:	f7f7 fe18 	bl	80003f4 <__aeabi_i2d>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4630      	mov	r0, r6
 80087ca:	4639      	mov	r1, r7
 80087cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80087d0:	f7f7 fcc2 	bl	8000158 <__aeabi_dsub>
 80087d4:	2200      	movs	r2, #0
 80087d6:	4b22      	ldr	r3, [pc, #136]	; (8008860 <__ieee754_rem_pio2+0x3e8>)
 80087d8:	f7f7 fe76 	bl	80004c8 <__aeabi_dmul>
 80087dc:	460f      	mov	r7, r1
 80087de:	4606      	mov	r6, r0
 80087e0:	f7f8 f922 	bl	8000a28 <__aeabi_d2iz>
 80087e4:	f7f7 fe06 	bl	80003f4 <__aeabi_i2d>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	4630      	mov	r0, r6
 80087ee:	4639      	mov	r1, r7
 80087f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087f4:	f7f7 fcb0 	bl	8000158 <__aeabi_dsub>
 80087f8:	2200      	movs	r2, #0
 80087fa:	4b19      	ldr	r3, [pc, #100]	; (8008860 <__ieee754_rem_pio2+0x3e8>)
 80087fc:	f7f7 fe64 	bl	80004c8 <__aeabi_dmul>
 8008800:	f04f 0803 	mov.w	r8, #3
 8008804:	2600      	movs	r6, #0
 8008806:	2700      	movs	r7, #0
 8008808:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800880c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008810:	4632      	mov	r2, r6
 8008812:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008816:	463b      	mov	r3, r7
 8008818:	46c2      	mov	sl, r8
 800881a:	f108 38ff 	add.w	r8, r8, #4294967295
 800881e:	f7f8 f8bb 	bl	8000998 <__aeabi_dcmpeq>
 8008822:	2800      	cmp	r0, #0
 8008824:	d1f4      	bne.n	8008810 <__ieee754_rem_pio2+0x398>
 8008826:	4b0f      	ldr	r3, [pc, #60]	; (8008864 <__ieee754_rem_pio2+0x3ec>)
 8008828:	462a      	mov	r2, r5
 800882a:	9301      	str	r3, [sp, #4]
 800882c:	2302      	movs	r3, #2
 800882e:	4621      	mov	r1, r4
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	a806      	add	r0, sp, #24
 8008834:	4653      	mov	r3, sl
 8008836:	f000 f985 	bl	8008b44 <__kernel_rem_pio2>
 800883a:	9b04      	ldr	r3, [sp, #16]
 800883c:	4605      	mov	r5, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	f6bf ae51 	bge.w	80084e6 <__ieee754_rem_pio2+0x6e>
 8008844:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800884c:	e9c4 2300 	strd	r2, r3, [r4]
 8008850:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008858:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800885c:	e703      	b.n	8008666 <__ieee754_rem_pio2+0x1ee>
 800885e:	bf00      	nop
 8008860:	41700000 	.word	0x41700000
 8008864:	0800b110 	.word	0x0800b110

08008868 <__ieee754_sqrt>:
 8008868:	f8df c158 	ldr.w	ip, [pc, #344]	; 80089c4 <__ieee754_sqrt+0x15c>
 800886c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008870:	ea3c 0c01 	bics.w	ip, ip, r1
 8008874:	4606      	mov	r6, r0
 8008876:	460d      	mov	r5, r1
 8008878:	460c      	mov	r4, r1
 800887a:	460a      	mov	r2, r1
 800887c:	4607      	mov	r7, r0
 800887e:	4603      	mov	r3, r0
 8008880:	d10f      	bne.n	80088a2 <__ieee754_sqrt+0x3a>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	f7f7 fe1f 	bl	80004c8 <__aeabi_dmul>
 800888a:	4602      	mov	r2, r0
 800888c:	460b      	mov	r3, r1
 800888e:	4630      	mov	r0, r6
 8008890:	4629      	mov	r1, r5
 8008892:	f7f7 fc63 	bl	800015c <__adddf3>
 8008896:	4606      	mov	r6, r0
 8008898:	460d      	mov	r5, r1
 800889a:	4630      	mov	r0, r6
 800889c:	4629      	mov	r1, r5
 800889e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a2:	2900      	cmp	r1, #0
 80088a4:	dc0e      	bgt.n	80088c4 <__ieee754_sqrt+0x5c>
 80088a6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80088aa:	ea5c 0707 	orrs.w	r7, ip, r7
 80088ae:	d0f4      	beq.n	800889a <__ieee754_sqrt+0x32>
 80088b0:	b141      	cbz	r1, 80088c4 <__ieee754_sqrt+0x5c>
 80088b2:	4602      	mov	r2, r0
 80088b4:	460b      	mov	r3, r1
 80088b6:	f7f7 fc4f 	bl	8000158 <__aeabi_dsub>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	f7f7 ff2d 	bl	800071c <__aeabi_ddiv>
 80088c2:	e7e8      	b.n	8008896 <__ieee754_sqrt+0x2e>
 80088c4:	1521      	asrs	r1, r4, #20
 80088c6:	d075      	beq.n	80089b4 <__ieee754_sqrt+0x14c>
 80088c8:	07cc      	lsls	r4, r1, #31
 80088ca:	f04f 0400 	mov.w	r4, #0
 80088ce:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80088d2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80088d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80088da:	bf5e      	ittt	pl
 80088dc:	0fd9      	lsrpl	r1, r3, #31
 80088de:	005b      	lslpl	r3, r3, #1
 80088e0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80088e4:	0fd9      	lsrs	r1, r3, #31
 80088e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80088ea:	2516      	movs	r5, #22
 80088ec:	4620      	mov	r0, r4
 80088ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088f2:	107f      	asrs	r7, r7, #1
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	1846      	adds	r6, r0, r1
 80088f8:	4296      	cmp	r6, r2
 80088fa:	bfde      	ittt	le
 80088fc:	1b92      	suble	r2, r2, r6
 80088fe:	1870      	addle	r0, r6, r1
 8008900:	1864      	addle	r4, r4, r1
 8008902:	0052      	lsls	r2, r2, #1
 8008904:	3d01      	subs	r5, #1
 8008906:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800890a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800890e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008912:	d1f0      	bne.n	80088f6 <__ieee754_sqrt+0x8e>
 8008914:	4629      	mov	r1, r5
 8008916:	f04f 0e20 	mov.w	lr, #32
 800891a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800891e:	4282      	cmp	r2, r0
 8008920:	eb06 0c05 	add.w	ip, r6, r5
 8008924:	dc02      	bgt.n	800892c <__ieee754_sqrt+0xc4>
 8008926:	d113      	bne.n	8008950 <__ieee754_sqrt+0xe8>
 8008928:	459c      	cmp	ip, r3
 800892a:	d811      	bhi.n	8008950 <__ieee754_sqrt+0xe8>
 800892c:	f1bc 0f00 	cmp.w	ip, #0
 8008930:	eb0c 0506 	add.w	r5, ip, r6
 8008934:	da43      	bge.n	80089be <__ieee754_sqrt+0x156>
 8008936:	2d00      	cmp	r5, #0
 8008938:	db41      	blt.n	80089be <__ieee754_sqrt+0x156>
 800893a:	f100 0801 	add.w	r8, r0, #1
 800893e:	1a12      	subs	r2, r2, r0
 8008940:	4640      	mov	r0, r8
 8008942:	459c      	cmp	ip, r3
 8008944:	bf88      	it	hi
 8008946:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800894a:	eba3 030c 	sub.w	r3, r3, ip
 800894e:	4431      	add	r1, r6
 8008950:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008954:	f1be 0e01 	subs.w	lr, lr, #1
 8008958:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800895c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008960:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008964:	d1db      	bne.n	800891e <__ieee754_sqrt+0xb6>
 8008966:	4313      	orrs	r3, r2
 8008968:	d006      	beq.n	8008978 <__ieee754_sqrt+0x110>
 800896a:	1c48      	adds	r0, r1, #1
 800896c:	bf0b      	itete	eq
 800896e:	4671      	moveq	r1, lr
 8008970:	3101      	addne	r1, #1
 8008972:	3401      	addeq	r4, #1
 8008974:	f021 0101 	bicne.w	r1, r1, #1
 8008978:	1063      	asrs	r3, r4, #1
 800897a:	0849      	lsrs	r1, r1, #1
 800897c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008980:	07e2      	lsls	r2, r4, #31
 8008982:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008986:	bf48      	it	mi
 8008988:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800898c:	460e      	mov	r6, r1
 800898e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008992:	e782      	b.n	800889a <__ieee754_sqrt+0x32>
 8008994:	0ada      	lsrs	r2, r3, #11
 8008996:	3815      	subs	r0, #21
 8008998:	055b      	lsls	r3, r3, #21
 800899a:	2a00      	cmp	r2, #0
 800899c:	d0fa      	beq.n	8008994 <__ieee754_sqrt+0x12c>
 800899e:	02d5      	lsls	r5, r2, #11
 80089a0:	d50a      	bpl.n	80089b8 <__ieee754_sqrt+0x150>
 80089a2:	f1c1 0420 	rsb	r4, r1, #32
 80089a6:	fa23 f404 	lsr.w	r4, r3, r4
 80089aa:	1e4d      	subs	r5, r1, #1
 80089ac:	408b      	lsls	r3, r1
 80089ae:	4322      	orrs	r2, r4
 80089b0:	1b41      	subs	r1, r0, r5
 80089b2:	e789      	b.n	80088c8 <__ieee754_sqrt+0x60>
 80089b4:	4608      	mov	r0, r1
 80089b6:	e7f0      	b.n	800899a <__ieee754_sqrt+0x132>
 80089b8:	0052      	lsls	r2, r2, #1
 80089ba:	3101      	adds	r1, #1
 80089bc:	e7ef      	b.n	800899e <__ieee754_sqrt+0x136>
 80089be:	4680      	mov	r8, r0
 80089c0:	e7bd      	b.n	800893e <__ieee754_sqrt+0xd6>
 80089c2:	bf00      	nop
 80089c4:	7ff00000 	.word	0x7ff00000

080089c8 <__kernel_cos>:
 80089c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80089d4:	4680      	mov	r8, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	e9cd 2300 	strd	r2, r3, [sp]
 80089dc:	da04      	bge.n	80089e8 <__kernel_cos+0x20>
 80089de:	f7f8 f823 	bl	8000a28 <__aeabi_d2iz>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	f000 8086 	beq.w	8008af4 <__kernel_cos+0x12c>
 80089e8:	4642      	mov	r2, r8
 80089ea:	463b      	mov	r3, r7
 80089ec:	4640      	mov	r0, r8
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 fd6a 	bl	80004c8 <__aeabi_dmul>
 80089f4:	2200      	movs	r2, #0
 80089f6:	4b4e      	ldr	r3, [pc, #312]	; (8008b30 <__kernel_cos+0x168>)
 80089f8:	4604      	mov	r4, r0
 80089fa:	460d      	mov	r5, r1
 80089fc:	f7f7 fd64 	bl	80004c8 <__aeabi_dmul>
 8008a00:	a33f      	add	r3, pc, #252	; (adr r3, 8008b00 <__kernel_cos+0x138>)
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	4682      	mov	sl, r0
 8008a08:	468b      	mov	fp, r1
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	f7f7 fd5b 	bl	80004c8 <__aeabi_dmul>
 8008a12:	a33d      	add	r3, pc, #244	; (adr r3, 8008b08 <__kernel_cos+0x140>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fba0 	bl	800015c <__adddf3>
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	462b      	mov	r3, r5
 8008a20:	f7f7 fd52 	bl	80004c8 <__aeabi_dmul>
 8008a24:	a33a      	add	r3, pc, #232	; (adr r3, 8008b10 <__kernel_cos+0x148>)
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	f7f7 fb95 	bl	8000158 <__aeabi_dsub>
 8008a2e:	4622      	mov	r2, r4
 8008a30:	462b      	mov	r3, r5
 8008a32:	f7f7 fd49 	bl	80004c8 <__aeabi_dmul>
 8008a36:	a338      	add	r3, pc, #224	; (adr r3, 8008b18 <__kernel_cos+0x150>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fb8e 	bl	800015c <__adddf3>
 8008a40:	4622      	mov	r2, r4
 8008a42:	462b      	mov	r3, r5
 8008a44:	f7f7 fd40 	bl	80004c8 <__aeabi_dmul>
 8008a48:	a335      	add	r3, pc, #212	; (adr r3, 8008b20 <__kernel_cos+0x158>)
 8008a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4e:	f7f7 fb83 	bl	8000158 <__aeabi_dsub>
 8008a52:	4622      	mov	r2, r4
 8008a54:	462b      	mov	r3, r5
 8008a56:	f7f7 fd37 	bl	80004c8 <__aeabi_dmul>
 8008a5a:	a333      	add	r3, pc, #204	; (adr r3, 8008b28 <__kernel_cos+0x160>)
 8008a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a60:	f7f7 fb7c 	bl	800015c <__adddf3>
 8008a64:	4622      	mov	r2, r4
 8008a66:	462b      	mov	r3, r5
 8008a68:	f7f7 fd2e 	bl	80004c8 <__aeabi_dmul>
 8008a6c:	4622      	mov	r2, r4
 8008a6e:	462b      	mov	r3, r5
 8008a70:	f7f7 fd2a 	bl	80004c8 <__aeabi_dmul>
 8008a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a78:	4604      	mov	r4, r0
 8008a7a:	460d      	mov	r5, r1
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f7 fd22 	bl	80004c8 <__aeabi_dmul>
 8008a84:	460b      	mov	r3, r1
 8008a86:	4602      	mov	r2, r0
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7f7 fb64 	bl	8000158 <__aeabi_dsub>
 8008a90:	4b28      	ldr	r3, [pc, #160]	; (8008b34 <__kernel_cos+0x16c>)
 8008a92:	4680      	mov	r8, r0
 8008a94:	429e      	cmp	r6, r3
 8008a96:	4689      	mov	r9, r1
 8008a98:	dc0e      	bgt.n	8008ab8 <__kernel_cos+0xf0>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4650      	mov	r0, sl
 8008aa0:	4659      	mov	r1, fp
 8008aa2:	f7f7 fb59 	bl	8000158 <__aeabi_dsub>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4922      	ldr	r1, [pc, #136]	; (8008b38 <__kernel_cos+0x170>)
 8008aae:	f7f7 fb53 	bl	8000158 <__aeabi_dsub>
 8008ab2:	b003      	add	sp, #12
 8008ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab8:	2400      	movs	r4, #0
 8008aba:	4b20      	ldr	r3, [pc, #128]	; (8008b3c <__kernel_cos+0x174>)
 8008abc:	4622      	mov	r2, r4
 8008abe:	429e      	cmp	r6, r3
 8008ac0:	bfcc      	ite	gt
 8008ac2:	4d1f      	ldrgt	r5, [pc, #124]	; (8008b40 <__kernel_cos+0x178>)
 8008ac4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008ac8:	462b      	mov	r3, r5
 8008aca:	2000      	movs	r0, #0
 8008acc:	491a      	ldr	r1, [pc, #104]	; (8008b38 <__kernel_cos+0x170>)
 8008ace:	f7f7 fb43 	bl	8000158 <__aeabi_dsub>
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	460f      	mov	r7, r1
 8008ad8:	462b      	mov	r3, r5
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fb3b 	bl	8000158 <__aeabi_dsub>
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	464b      	mov	r3, r9
 8008ae6:	f7f7 fb37 	bl	8000158 <__aeabi_dsub>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	e7dc      	b.n	8008aae <__kernel_cos+0xe6>
 8008af4:	2000      	movs	r0, #0
 8008af6:	4910      	ldr	r1, [pc, #64]	; (8008b38 <__kernel_cos+0x170>)
 8008af8:	e7db      	b.n	8008ab2 <__kernel_cos+0xea>
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w
 8008b00:	be8838d4 	.word	0xbe8838d4
 8008b04:	bda8fae9 	.word	0xbda8fae9
 8008b08:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b0c:	3e21ee9e 	.word	0x3e21ee9e
 8008b10:	809c52ad 	.word	0x809c52ad
 8008b14:	3e927e4f 	.word	0x3e927e4f
 8008b18:	19cb1590 	.word	0x19cb1590
 8008b1c:	3efa01a0 	.word	0x3efa01a0
 8008b20:	16c15177 	.word	0x16c15177
 8008b24:	3f56c16c 	.word	0x3f56c16c
 8008b28:	5555554c 	.word	0x5555554c
 8008b2c:	3fa55555 	.word	0x3fa55555
 8008b30:	3fe00000 	.word	0x3fe00000
 8008b34:	3fd33332 	.word	0x3fd33332
 8008b38:	3ff00000 	.word	0x3ff00000
 8008b3c:	3fe90000 	.word	0x3fe90000
 8008b40:	3fd20000 	.word	0x3fd20000

08008b44 <__kernel_rem_pio2>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008b4c:	9308      	str	r3, [sp, #32]
 8008b4e:	9106      	str	r1, [sp, #24]
 8008b50:	4bb6      	ldr	r3, [pc, #728]	; (8008e2c <__kernel_rem_pio2+0x2e8>)
 8008b52:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008b54:	f112 0f14 	cmn.w	r2, #20
 8008b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b5c:	bfa8      	it	ge
 8008b5e:	1ed4      	subge	r4, r2, #3
 8008b60:	9302      	str	r3, [sp, #8]
 8008b62:	9b08      	ldr	r3, [sp, #32]
 8008b64:	bfb8      	it	lt
 8008b66:	2400      	movlt	r4, #0
 8008b68:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b6c:	9307      	str	r3, [sp, #28]
 8008b6e:	bfa4      	itt	ge
 8008b70:	2318      	movge	r3, #24
 8008b72:	fb94 f4f3 	sdivge	r4, r4, r3
 8008b76:	f06f 0317 	mvn.w	r3, #23
 8008b7a:	fb04 3303 	mla	r3, r4, r3, r3
 8008b7e:	eb03 0b02 	add.w	fp, r3, r2
 8008b82:	9a07      	ldr	r2, [sp, #28]
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	1aa7      	subs	r7, r4, r2
 8008b88:	eb03 0802 	add.w	r8, r3, r2
 8008b8c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008b8e:	2500      	movs	r5, #0
 8008b90:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008b94:	2200      	movs	r2, #0
 8008b96:	2300      	movs	r3, #0
 8008b98:	9009      	str	r0, [sp, #36]	; 0x24
 8008b9a:	ae20      	add	r6, sp, #128	; 0x80
 8008b9c:	4545      	cmp	r5, r8
 8008b9e:	dd14      	ble.n	8008bca <__kernel_rem_pio2+0x86>
 8008ba0:	f04f 0800 	mov.w	r8, #0
 8008ba4:	9a08      	ldr	r2, [sp, #32]
 8008ba6:	ab20      	add	r3, sp, #128	; 0x80
 8008ba8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008bac:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008bb0:	9b02      	ldr	r3, [sp, #8]
 8008bb2:	4598      	cmp	r8, r3
 8008bb4:	dc35      	bgt.n	8008c22 <__kernel_rem_pio2+0xde>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f1a3 0908 	sub.w	r9, r3, #8
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	462f      	mov	r7, r5
 8008bc2:	2600      	movs	r6, #0
 8008bc4:	e9cd 2300 	strd	r2, r3, [sp]
 8008bc8:	e01f      	b.n	8008c0a <__kernel_rem_pio2+0xc6>
 8008bca:	42ef      	cmn	r7, r5
 8008bcc:	d40b      	bmi.n	8008be6 <__kernel_rem_pio2+0xa2>
 8008bce:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008bd2:	e9cd 2300 	strd	r2, r3, [sp]
 8008bd6:	f7f7 fc0d 	bl	80003f4 <__aeabi_i2d>
 8008bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bde:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008be2:	3501      	adds	r5, #1
 8008be4:	e7da      	b.n	8008b9c <__kernel_rem_pio2+0x58>
 8008be6:	4610      	mov	r0, r2
 8008be8:	4619      	mov	r1, r3
 8008bea:	e7f8      	b.n	8008bde <__kernel_rem_pio2+0x9a>
 8008bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bf0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008bf4:	f7f7 fc68 	bl	80004c8 <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c00:	f7f7 faac 	bl	800015c <__adddf3>
 8008c04:	e9cd 0100 	strd	r0, r1, [sp]
 8008c08:	3601      	adds	r6, #1
 8008c0a:	9b07      	ldr	r3, [sp, #28]
 8008c0c:	3f08      	subs	r7, #8
 8008c0e:	429e      	cmp	r6, r3
 8008c10:	ddec      	ble.n	8008bec <__kernel_rem_pio2+0xa8>
 8008c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c16:	f108 0801 	add.w	r8, r8, #1
 8008c1a:	e8ea 2302 	strd	r2, r3, [sl], #8
 8008c1e:	3508      	adds	r5, #8
 8008c20:	e7c6      	b.n	8008bb0 <__kernel_rem_pio2+0x6c>
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	aa0c      	add	r2, sp, #48	; 0x30
 8008c26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c2c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008c2e:	9e02      	ldr	r6, [sp, #8]
 8008c30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008c34:	930a      	str	r3, [sp, #40]	; 0x28
 8008c36:	ab98      	add	r3, sp, #608	; 0x260
 8008c38:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c3c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008c40:	ab70      	add	r3, sp, #448	; 0x1c0
 8008c42:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 8008c46:	46d0      	mov	r8, sl
 8008c48:	46b1      	mov	r9, r6
 8008c4a:	af0c      	add	r7, sp, #48	; 0x30
 8008c4c:	9700      	str	r7, [sp, #0]
 8008c4e:	f1b9 0f00 	cmp.w	r9, #0
 8008c52:	f1a8 0808 	sub.w	r8, r8, #8
 8008c56:	dc71      	bgt.n	8008d3c <__kernel_rem_pio2+0x1f8>
 8008c58:	465a      	mov	r2, fp
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	f000 fbf7 	bl	8009450 <scalbn>
 8008c62:	2200      	movs	r2, #0
 8008c64:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	f7f7 fc2c 	bl	80004c8 <__aeabi_dmul>
 8008c70:	f000 fb66 	bl	8009340 <floor>
 8008c74:	2200      	movs	r2, #0
 8008c76:	4b6e      	ldr	r3, [pc, #440]	; (8008e30 <__kernel_rem_pio2+0x2ec>)
 8008c78:	f7f7 fc26 	bl	80004c8 <__aeabi_dmul>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	460b      	mov	r3, r1
 8008c80:	4620      	mov	r0, r4
 8008c82:	4629      	mov	r1, r5
 8008c84:	f7f7 fa68 	bl	8000158 <__aeabi_dsub>
 8008c88:	460d      	mov	r5, r1
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	f7f7 fecc 	bl	8000a28 <__aeabi_d2iz>
 8008c90:	9004      	str	r0, [sp, #16]
 8008c92:	f7f7 fbaf 	bl	80003f4 <__aeabi_i2d>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	4629      	mov	r1, r5
 8008c9e:	f7f7 fa5b 	bl	8000158 <__aeabi_dsub>
 8008ca2:	f1bb 0f00 	cmp.w	fp, #0
 8008ca6:	4680      	mov	r8, r0
 8008ca8:	4689      	mov	r9, r1
 8008caa:	dd70      	ble.n	8008d8e <__kernel_rem_pio2+0x24a>
 8008cac:	1e72      	subs	r2, r6, #1
 8008cae:	ab0c      	add	r3, sp, #48	; 0x30
 8008cb0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008cb4:	9c04      	ldr	r4, [sp, #16]
 8008cb6:	f1cb 0118 	rsb	r1, fp, #24
 8008cba:	fa40 f301 	asr.w	r3, r0, r1
 8008cbe:	441c      	add	r4, r3
 8008cc0:	408b      	lsls	r3, r1
 8008cc2:	1ac0      	subs	r0, r0, r3
 8008cc4:	ab0c      	add	r3, sp, #48	; 0x30
 8008cc6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008cca:	f1cb 0317 	rsb	r3, fp, #23
 8008cce:	9404      	str	r4, [sp, #16]
 8008cd0:	fa40 f303 	asr.w	r3, r0, r3
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	dd66      	ble.n	8008daa <__kernel_rem_pio2+0x266>
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008ce2:	4614      	mov	r4, r2
 8008ce4:	9b04      	ldr	r3, [sp, #16]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	9304      	str	r3, [sp, #16]
 8008cea:	4296      	cmp	r6, r2
 8008cec:	f300 80ac 	bgt.w	8008e48 <__kernel_rem_pio2+0x304>
 8008cf0:	f1bb 0f00 	cmp.w	fp, #0
 8008cf4:	dd07      	ble.n	8008d06 <__kernel_rem_pio2+0x1c2>
 8008cf6:	f1bb 0f01 	cmp.w	fp, #1
 8008cfa:	f000 80b4 	beq.w	8008e66 <__kernel_rem_pio2+0x322>
 8008cfe:	f1bb 0f02 	cmp.w	fp, #2
 8008d02:	f000 80ba 	beq.w	8008e7a <__kernel_rem_pio2+0x336>
 8008d06:	9b00      	ldr	r3, [sp, #0]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d14e      	bne.n	8008daa <__kernel_rem_pio2+0x266>
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	464b      	mov	r3, r9
 8008d10:	2000      	movs	r0, #0
 8008d12:	4948      	ldr	r1, [pc, #288]	; (8008e34 <__kernel_rem_pio2+0x2f0>)
 8008d14:	f7f7 fa20 	bl	8000158 <__aeabi_dsub>
 8008d18:	4680      	mov	r8, r0
 8008d1a:	4689      	mov	r9, r1
 8008d1c:	2c00      	cmp	r4, #0
 8008d1e:	d044      	beq.n	8008daa <__kernel_rem_pio2+0x266>
 8008d20:	465a      	mov	r2, fp
 8008d22:	2000      	movs	r0, #0
 8008d24:	4943      	ldr	r1, [pc, #268]	; (8008e34 <__kernel_rem_pio2+0x2f0>)
 8008d26:	f000 fb93 	bl	8009450 <scalbn>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fa11 	bl	8000158 <__aeabi_dsub>
 8008d36:	4680      	mov	r8, r0
 8008d38:	4689      	mov	r9, r1
 8008d3a:	e036      	b.n	8008daa <__kernel_rem_pio2+0x266>
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <__kernel_rem_pio2+0x2f4>)
 8008d40:	4620      	mov	r0, r4
 8008d42:	4629      	mov	r1, r5
 8008d44:	f7f7 fbc0 	bl	80004c8 <__aeabi_dmul>
 8008d48:	f7f7 fe6e 	bl	8000a28 <__aeabi_d2iz>
 8008d4c:	f7f7 fb52 	bl	80003f4 <__aeabi_i2d>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <__kernel_rem_pio2+0x2f8>)
 8008d5c:	f7f7 fbb4 	bl	80004c8 <__aeabi_dmul>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4620      	mov	r0, r4
 8008d66:	4629      	mov	r1, r5
 8008d68:	f7f7 f9f6 	bl	8000158 <__aeabi_dsub>
 8008d6c:	f7f7 fe5c 	bl	8000a28 <__aeabi_d2iz>
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d76:	f843 0b04 	str.w	r0, [r3], #4
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d80:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d84:	f7f7 f9ea 	bl	800015c <__adddf3>
 8008d88:	4604      	mov	r4, r0
 8008d8a:	460d      	mov	r5, r1
 8008d8c:	e75f      	b.n	8008c4e <__kernel_rem_pio2+0x10a>
 8008d8e:	d105      	bne.n	8008d9c <__kernel_rem_pio2+0x258>
 8008d90:	1e73      	subs	r3, r6, #1
 8008d92:	aa0c      	add	r2, sp, #48	; 0x30
 8008d94:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008d98:	15c3      	asrs	r3, r0, #23
 8008d9a:	e79b      	b.n	8008cd4 <__kernel_rem_pio2+0x190>
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4b28      	ldr	r3, [pc, #160]	; (8008e40 <__kernel_rem_pio2+0x2fc>)
 8008da0:	f7f7 fe18 	bl	80009d4 <__aeabi_dcmpge>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d13e      	bne.n	8008e26 <__kernel_rem_pio2+0x2e2>
 8008da8:	9000      	str	r0, [sp, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	2300      	movs	r3, #0
 8008dae:	4640      	mov	r0, r8
 8008db0:	4649      	mov	r1, r9
 8008db2:	f7f7 fdf1 	bl	8000998 <__aeabi_dcmpeq>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f000 80b1 	beq.w	8008f1e <__kernel_rem_pio2+0x3da>
 8008dbc:	1e74      	subs	r4, r6, #1
 8008dbe:	4623      	mov	r3, r4
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	9902      	ldr	r1, [sp, #8]
 8008dc4:	428b      	cmp	r3, r1
 8008dc6:	da5f      	bge.n	8008e88 <__kernel_rem_pio2+0x344>
 8008dc8:	2a00      	cmp	r2, #0
 8008dca:	d074      	beq.n	8008eb6 <__kernel_rem_pio2+0x372>
 8008dcc:	ab0c      	add	r3, sp, #48	; 0x30
 8008dce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008dd2:	f1ab 0b18 	sub.w	fp, fp, #24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 809f 	beq.w	8008f1a <__kernel_rem_pio2+0x3d6>
 8008ddc:	465a      	mov	r2, fp
 8008dde:	2000      	movs	r0, #0
 8008de0:	4914      	ldr	r1, [pc, #80]	; (8008e34 <__kernel_rem_pio2+0x2f0>)
 8008de2:	f000 fb35 	bl	8009450 <scalbn>
 8008de6:	46a2      	mov	sl, r4
 8008de8:	4606      	mov	r6, r0
 8008dea:	460f      	mov	r7, r1
 8008dec:	f04f 0800 	mov.w	r8, #0
 8008df0:	ab70      	add	r3, sp, #448	; 0x1c0
 8008df2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008e38 <__kernel_rem_pio2+0x2f4>
 8008df6:	00e5      	lsls	r5, r4, #3
 8008df8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008dfc:	f1ba 0f00 	cmp.w	sl, #0
 8008e00:	f280 80c3 	bge.w	8008f8a <__kernel_rem_pio2+0x446>
 8008e04:	4626      	mov	r6, r4
 8008e06:	2e00      	cmp	r6, #0
 8008e08:	f2c0 80f5 	blt.w	8008ff6 <__kernel_rem_pio2+0x4b2>
 8008e0c:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <__kernel_rem_pio2+0x300>)
 8008e0e:	f04f 0a00 	mov.w	sl, #0
 8008e12:	9307      	str	r3, [sp, #28]
 8008e14:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e16:	f04f 0b00 	mov.w	fp, #0
 8008e1a:	f04f 0800 	mov.w	r8, #0
 8008e1e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008e22:	1ba7      	subs	r7, r4, r6
 8008e24:	e0db      	b.n	8008fde <__kernel_rem_pio2+0x49a>
 8008e26:	2302      	movs	r3, #2
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	e757      	b.n	8008cdc <__kernel_rem_pio2+0x198>
 8008e2c:	0800b258 	.word	0x0800b258
 8008e30:	40200000 	.word	0x40200000
 8008e34:	3ff00000 	.word	0x3ff00000
 8008e38:	3e700000 	.word	0x3e700000
 8008e3c:	41700000 	.word	0x41700000
 8008e40:	3fe00000 	.word	0x3fe00000
 8008e44:	0800b218 	.word	0x0800b218
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	b944      	cbnz	r4, 8008e5e <__kernel_rem_pio2+0x31a>
 8008e4c:	b11b      	cbz	r3, 8008e56 <__kernel_rem_pio2+0x312>
 8008e4e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008e52:	603b      	str	r3, [r7, #0]
 8008e54:	2301      	movs	r3, #1
 8008e56:	461c      	mov	r4, r3
 8008e58:	3201      	adds	r2, #1
 8008e5a:	3704      	adds	r7, #4
 8008e5c:	e745      	b.n	8008cea <__kernel_rem_pio2+0x1a6>
 8008e5e:	1acb      	subs	r3, r1, r3
 8008e60:	603b      	str	r3, [r7, #0]
 8008e62:	4623      	mov	r3, r4
 8008e64:	e7f7      	b.n	8008e56 <__kernel_rem_pio2+0x312>
 8008e66:	1e72      	subs	r2, r6, #1
 8008e68:	ab0c      	add	r3, sp, #48	; 0x30
 8008e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008e72:	a90c      	add	r1, sp, #48	; 0x30
 8008e74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008e78:	e745      	b.n	8008d06 <__kernel_rem_pio2+0x1c2>
 8008e7a:	1e72      	subs	r2, r6, #1
 8008e7c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e82:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008e86:	e7f4      	b.n	8008e72 <__kernel_rem_pio2+0x32e>
 8008e88:	a90c      	add	r1, sp, #48	; 0x30
 8008e8a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	430a      	orrs	r2, r1
 8008e92:	e796      	b.n	8008dc2 <__kernel_rem_pio2+0x27e>
 8008e94:	3401      	adds	r4, #1
 8008e96:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008e9a:	2a00      	cmp	r2, #0
 8008e9c:	d0fa      	beq.n	8008e94 <__kernel_rem_pio2+0x350>
 8008e9e:	9b08      	ldr	r3, [sp, #32]
 8008ea0:	f106 0801 	add.w	r8, r6, #1
 8008ea4:	18f5      	adds	r5, r6, r3
 8008ea6:	ab20      	add	r3, sp, #128	; 0x80
 8008ea8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008eac:	4434      	add	r4, r6
 8008eae:	4544      	cmp	r4, r8
 8008eb0:	da04      	bge.n	8008ebc <__kernel_rem_pio2+0x378>
 8008eb2:	4626      	mov	r6, r4
 8008eb4:	e6bf      	b.n	8008c36 <__kernel_rem_pio2+0xf2>
 8008eb6:	2401      	movs	r4, #1
 8008eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eba:	e7ec      	b.n	8008e96 <__kernel_rem_pio2+0x352>
 8008ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ebe:	f04f 0900 	mov.w	r9, #0
 8008ec2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008ec6:	f7f7 fa95 	bl	80003f4 <__aeabi_i2d>
 8008eca:	2600      	movs	r6, #0
 8008ecc:	2700      	movs	r7, #0
 8008ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ed0:	e9c5 0100 	strd	r0, r1, [r5]
 8008ed4:	3b08      	subs	r3, #8
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	9504      	str	r5, [sp, #16]
 8008eda:	9b07      	ldr	r3, [sp, #28]
 8008edc:	4599      	cmp	r9, r3
 8008ede:	dd05      	ble.n	8008eec <__kernel_rem_pio2+0x3a8>
 8008ee0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8008ee4:	f108 0801 	add.w	r8, r8, #1
 8008ee8:	3508      	adds	r5, #8
 8008eea:	e7e0      	b.n	8008eae <__kernel_rem_pio2+0x36a>
 8008eec:	f8dd c010 	ldr.w	ip, [sp, #16]
 8008ef0:	9900      	ldr	r1, [sp, #0]
 8008ef2:	f109 0901 	add.w	r9, r9, #1
 8008ef6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008efa:	9100      	str	r1, [sp, #0]
 8008efc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8008f00:	f8cd c010 	str.w	ip, [sp, #16]
 8008f04:	f7f7 fae0 	bl	80004c8 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 f924 	bl	800015c <__adddf3>
 8008f14:	4606      	mov	r6, r0
 8008f16:	460f      	mov	r7, r1
 8008f18:	e7df      	b.n	8008eda <__kernel_rem_pio2+0x396>
 8008f1a:	3c01      	subs	r4, #1
 8008f1c:	e756      	b.n	8008dcc <__kernel_rem_pio2+0x288>
 8008f1e:	f1cb 0200 	rsb	r2, fp, #0
 8008f22:	4640      	mov	r0, r8
 8008f24:	4649      	mov	r1, r9
 8008f26:	f000 fa93 	bl	8009450 <scalbn>
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4ba4      	ldr	r3, [pc, #656]	; (80091c0 <__kernel_rem_pio2+0x67c>)
 8008f2e:	4604      	mov	r4, r0
 8008f30:	460d      	mov	r5, r1
 8008f32:	f7f7 fd4f 	bl	80009d4 <__aeabi_dcmpge>
 8008f36:	b1f8      	cbz	r0, 8008f78 <__kernel_rem_pio2+0x434>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4ba2      	ldr	r3, [pc, #648]	; (80091c4 <__kernel_rem_pio2+0x680>)
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	4629      	mov	r1, r5
 8008f40:	f7f7 fac2 	bl	80004c8 <__aeabi_dmul>
 8008f44:	f7f7 fd70 	bl	8000a28 <__aeabi_d2iz>
 8008f48:	4607      	mov	r7, r0
 8008f4a:	f7f7 fa53 	bl	80003f4 <__aeabi_i2d>
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4b9b      	ldr	r3, [pc, #620]	; (80091c0 <__kernel_rem_pio2+0x67c>)
 8008f52:	f7f7 fab9 	bl	80004c8 <__aeabi_dmul>
 8008f56:	460b      	mov	r3, r1
 8008f58:	4602      	mov	r2, r0
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	f7f7 f8fb 	bl	8000158 <__aeabi_dsub>
 8008f62:	f7f7 fd61 	bl	8000a28 <__aeabi_d2iz>
 8008f66:	1c74      	adds	r4, r6, #1
 8008f68:	ab0c      	add	r3, sp, #48	; 0x30
 8008f6a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008f6e:	f10b 0b18 	add.w	fp, fp, #24
 8008f72:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 8008f76:	e731      	b.n	8008ddc <__kernel_rem_pio2+0x298>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 fd54 	bl	8000a28 <__aeabi_d2iz>
 8008f80:	ab0c      	add	r3, sp, #48	; 0x30
 8008f82:	4634      	mov	r4, r6
 8008f84:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008f88:	e728      	b.n	8008ddc <__kernel_rem_pio2+0x298>
 8008f8a:	ab0c      	add	r3, sp, #48	; 0x30
 8008f8c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008f90:	f7f7 fa30 	bl	80003f4 <__aeabi_i2d>
 8008f94:	4632      	mov	r2, r6
 8008f96:	463b      	mov	r3, r7
 8008f98:	f7f7 fa96 	bl	80004c8 <__aeabi_dmul>
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	e86b 0102 	strd	r0, r1, [fp], #-8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 fa8e 	bl	80004c8 <__aeabi_dmul>
 8008fac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	e722      	b.n	8008dfc <__kernel_rem_pio2+0x2b8>
 8008fb6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008fba:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008fbe:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8008fc2:	f8cd c01c 	str.w	ip, [sp, #28]
 8008fc6:	f7f7 fa7f 	bl	80004c8 <__aeabi_dmul>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4650      	mov	r0, sl
 8008fd0:	4659      	mov	r1, fp
 8008fd2:	f7f7 f8c3 	bl	800015c <__adddf3>
 8008fd6:	4682      	mov	sl, r0
 8008fd8:	468b      	mov	fp, r1
 8008fda:	f108 0801 	add.w	r8, r8, #1
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	4598      	cmp	r8, r3
 8008fe2:	dc01      	bgt.n	8008fe8 <__kernel_rem_pio2+0x4a4>
 8008fe4:	45b8      	cmp	r8, r7
 8008fe6:	dde6      	ble.n	8008fb6 <__kernel_rem_pio2+0x472>
 8008fe8:	ab48      	add	r3, sp, #288	; 0x120
 8008fea:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008fee:	e9c7 ab00 	strd	sl, fp, [r7]
 8008ff2:	3e01      	subs	r6, #1
 8008ff4:	e707      	b.n	8008e06 <__kernel_rem_pio2+0x2c2>
 8008ff6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	dc09      	bgt.n	8009010 <__kernel_rem_pio2+0x4cc>
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dc32      	bgt.n	8009066 <__kernel_rem_pio2+0x522>
 8009000:	d05a      	beq.n	80090b8 <__kernel_rem_pio2+0x574>
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	f003 0007 	and.w	r0, r3, #7
 8009008:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009010:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009012:	2b03      	cmp	r3, #3
 8009014:	d1f5      	bne.n	8009002 <__kernel_rem_pio2+0x4be>
 8009016:	ab48      	add	r3, sp, #288	; 0x120
 8009018:	441d      	add	r5, r3
 800901a:	46aa      	mov	sl, r5
 800901c:	46a3      	mov	fp, r4
 800901e:	f1bb 0f00 	cmp.w	fp, #0
 8009022:	dc76      	bgt.n	8009112 <__kernel_rem_pio2+0x5ce>
 8009024:	46aa      	mov	sl, r5
 8009026:	46a3      	mov	fp, r4
 8009028:	f1bb 0f01 	cmp.w	fp, #1
 800902c:	f300 8090 	bgt.w	8009150 <__kernel_rem_pio2+0x60c>
 8009030:	2700      	movs	r7, #0
 8009032:	463e      	mov	r6, r7
 8009034:	2c01      	cmp	r4, #1
 8009036:	f300 80aa 	bgt.w	800918e <__kernel_rem_pio2+0x64a>
 800903a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800903e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8009042:	9b00      	ldr	r3, [sp, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f040 80ac 	bne.w	80091a2 <__kernel_rem_pio2+0x65e>
 800904a:	4603      	mov	r3, r0
 800904c:	462a      	mov	r2, r5
 800904e:	9806      	ldr	r0, [sp, #24]
 8009050:	e9c0 2300 	strd	r2, r3, [r0]
 8009054:	4622      	mov	r2, r4
 8009056:	460b      	mov	r3, r1
 8009058:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800905c:	463a      	mov	r2, r7
 800905e:	4633      	mov	r3, r6
 8009060:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009064:	e7cd      	b.n	8009002 <__kernel_rem_pio2+0x4be>
 8009066:	2000      	movs	r0, #0
 8009068:	46a0      	mov	r8, r4
 800906a:	4601      	mov	r1, r0
 800906c:	ab48      	add	r3, sp, #288	; 0x120
 800906e:	441d      	add	r5, r3
 8009070:	f1b8 0f00 	cmp.w	r8, #0
 8009074:	da3a      	bge.n	80090ec <__kernel_rem_pio2+0x5a8>
 8009076:	9b00      	ldr	r3, [sp, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d03e      	beq.n	80090fa <__kernel_rem_pio2+0x5b6>
 800907c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009080:	4602      	mov	r2, r0
 8009082:	462b      	mov	r3, r5
 8009084:	9d06      	ldr	r5, [sp, #24]
 8009086:	2601      	movs	r6, #1
 8009088:	e9c5 2300 	strd	r2, r3, [r5]
 800908c:	460b      	mov	r3, r1
 800908e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009092:	f7f7 f861 	bl	8000158 <__aeabi_dsub>
 8009096:	4684      	mov	ip, r0
 8009098:	460f      	mov	r7, r1
 800909a:	ad48      	add	r5, sp, #288	; 0x120
 800909c:	42b4      	cmp	r4, r6
 800909e:	f105 0508 	add.w	r5, r5, #8
 80090a2:	da2c      	bge.n	80090fe <__kernel_rem_pio2+0x5ba>
 80090a4:	9b00      	ldr	r3, [sp, #0]
 80090a6:	b10b      	cbz	r3, 80090ac <__kernel_rem_pio2+0x568>
 80090a8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80090ac:	4662      	mov	r2, ip
 80090ae:	463b      	mov	r3, r7
 80090b0:	9906      	ldr	r1, [sp, #24]
 80090b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80090b6:	e7a4      	b.n	8009002 <__kernel_rem_pio2+0x4be>
 80090b8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80090ba:	ab48      	add	r3, sp, #288	; 0x120
 80090bc:	4637      	mov	r7, r6
 80090be:	441d      	add	r5, r3
 80090c0:	2c00      	cmp	r4, #0
 80090c2:	da09      	bge.n	80090d8 <__kernel_rem_pio2+0x594>
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	b10b      	cbz	r3, 80090cc <__kernel_rem_pio2+0x588>
 80090c8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80090cc:	4632      	mov	r2, r6
 80090ce:	463b      	mov	r3, r7
 80090d0:	9906      	ldr	r1, [sp, #24]
 80090d2:	e9c1 2300 	strd	r2, r3, [r1]
 80090d6:	e794      	b.n	8009002 <__kernel_rem_pio2+0x4be>
 80090d8:	4630      	mov	r0, r6
 80090da:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80090de:	4639      	mov	r1, r7
 80090e0:	f7f7 f83c 	bl	800015c <__adddf3>
 80090e4:	3c01      	subs	r4, #1
 80090e6:	4606      	mov	r6, r0
 80090e8:	460f      	mov	r7, r1
 80090ea:	e7e9      	b.n	80090c0 <__kernel_rem_pio2+0x57c>
 80090ec:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80090f0:	f7f7 f834 	bl	800015c <__adddf3>
 80090f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80090f8:	e7ba      	b.n	8009070 <__kernel_rem_pio2+0x52c>
 80090fa:	460d      	mov	r5, r1
 80090fc:	e7c0      	b.n	8009080 <__kernel_rem_pio2+0x53c>
 80090fe:	4660      	mov	r0, ip
 8009100:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 f829 	bl	800015c <__adddf3>
 800910a:	3601      	adds	r6, #1
 800910c:	4684      	mov	ip, r0
 800910e:	460f      	mov	r7, r1
 8009110:	e7c4      	b.n	800909c <__kernel_rem_pio2+0x558>
 8009112:	e9da 6700 	ldrd	r6, r7, [sl]
 8009116:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800911a:	4632      	mov	r2, r6
 800911c:	463b      	mov	r3, r7
 800911e:	4640      	mov	r0, r8
 8009120:	4649      	mov	r1, r9
 8009122:	f7f7 f81b 	bl	800015c <__adddf3>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800912e:	4640      	mov	r0, r8
 8009130:	4649      	mov	r1, r9
 8009132:	f7f7 f811 	bl	8000158 <__aeabi_dsub>
 8009136:	4632      	mov	r2, r6
 8009138:	463b      	mov	r3, r7
 800913a:	f7f7 f80f 	bl	800015c <__adddf3>
 800913e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009142:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009146:	f10b 3bff 	add.w	fp, fp, #4294967295
 800914a:	e9ca 2300 	strd	r2, r3, [sl]
 800914e:	e766      	b.n	800901e <__kernel_rem_pio2+0x4da>
 8009150:	e9da 8900 	ldrd	r8, r9, [sl]
 8009154:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009158:	4642      	mov	r2, r8
 800915a:	464b      	mov	r3, r9
 800915c:	4630      	mov	r0, r6
 800915e:	4639      	mov	r1, r7
 8009160:	f7f6 fffc 	bl	800015c <__adddf3>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800916c:	4630      	mov	r0, r6
 800916e:	4639      	mov	r1, r7
 8009170:	f7f6 fff2 	bl	8000158 <__aeabi_dsub>
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	f7f6 fff0 	bl	800015c <__adddf3>
 800917c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009180:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009184:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009188:	e9ca 2300 	strd	r2, r3, [sl]
 800918c:	e74c      	b.n	8009028 <__kernel_rem_pio2+0x4e4>
 800918e:	4638      	mov	r0, r7
 8009190:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009194:	4631      	mov	r1, r6
 8009196:	f7f6 ffe1 	bl	800015c <__adddf3>
 800919a:	3c01      	subs	r4, #1
 800919c:	4607      	mov	r7, r0
 800919e:	460e      	mov	r6, r1
 80091a0:	e748      	b.n	8009034 <__kernel_rem_pio2+0x4f0>
 80091a2:	9b06      	ldr	r3, [sp, #24]
 80091a4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80091a8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80091ac:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80091b0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80091b4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80091b8:	601d      	str	r5, [r3, #0]
 80091ba:	615e      	str	r6, [r3, #20]
 80091bc:	e721      	b.n	8009002 <__kernel_rem_pio2+0x4be>
 80091be:	bf00      	nop
 80091c0:	41700000 	.word	0x41700000
 80091c4:	3e700000 	.word	0x3e700000

080091c8 <__kernel_sin>:
 80091c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	e9cd 2300 	strd	r2, r3, [sp]
 80091d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80091da:	4682      	mov	sl, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80091e0:	da03      	bge.n	80091ea <__kernel_sin+0x22>
 80091e2:	f7f7 fc21 	bl	8000a28 <__aeabi_d2iz>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d050      	beq.n	800928c <__kernel_sin+0xc4>
 80091ea:	4652      	mov	r2, sl
 80091ec:	4623      	mov	r3, r4
 80091ee:	4650      	mov	r0, sl
 80091f0:	4621      	mov	r1, r4
 80091f2:	f7f7 f969 	bl	80004c8 <__aeabi_dmul>
 80091f6:	4606      	mov	r6, r0
 80091f8:	460f      	mov	r7, r1
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4650      	mov	r0, sl
 8009200:	4621      	mov	r1, r4
 8009202:	f7f7 f961 	bl	80004c8 <__aeabi_dmul>
 8009206:	a33e      	add	r3, pc, #248	; (adr r3, 8009300 <__kernel_sin+0x138>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	4680      	mov	r8, r0
 800920e:	4689      	mov	r9, r1
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	f7f7 f958 	bl	80004c8 <__aeabi_dmul>
 8009218:	a33b      	add	r3, pc, #236	; (adr r3, 8009308 <__kernel_sin+0x140>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f6 ff9b 	bl	8000158 <__aeabi_dsub>
 8009222:	4632      	mov	r2, r6
 8009224:	463b      	mov	r3, r7
 8009226:	f7f7 f94f 	bl	80004c8 <__aeabi_dmul>
 800922a:	a339      	add	r3, pc, #228	; (adr r3, 8009310 <__kernel_sin+0x148>)
 800922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009230:	f7f6 ff94 	bl	800015c <__adddf3>
 8009234:	4632      	mov	r2, r6
 8009236:	463b      	mov	r3, r7
 8009238:	f7f7 f946 	bl	80004c8 <__aeabi_dmul>
 800923c:	a336      	add	r3, pc, #216	; (adr r3, 8009318 <__kernel_sin+0x150>)
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f6 ff89 	bl	8000158 <__aeabi_dsub>
 8009246:	4632      	mov	r2, r6
 8009248:	463b      	mov	r3, r7
 800924a:	f7f7 f93d 	bl	80004c8 <__aeabi_dmul>
 800924e:	a334      	add	r3, pc, #208	; (adr r3, 8009320 <__kernel_sin+0x158>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	f7f6 ff82 	bl	800015c <__adddf3>
 8009258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800925c:	b9dd      	cbnz	r5, 8009296 <__kernel_sin+0xce>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4630      	mov	r0, r6
 8009264:	4639      	mov	r1, r7
 8009266:	f7f7 f92f 	bl	80004c8 <__aeabi_dmul>
 800926a:	a32f      	add	r3, pc, #188	; (adr r3, 8009328 <__kernel_sin+0x160>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f6 ff72 	bl	8000158 <__aeabi_dsub>
 8009274:	4642      	mov	r2, r8
 8009276:	464b      	mov	r3, r9
 8009278:	f7f7 f926 	bl	80004c8 <__aeabi_dmul>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4650      	mov	r0, sl
 8009282:	4621      	mov	r1, r4
 8009284:	f7f6 ff6a 	bl	800015c <__adddf3>
 8009288:	4682      	mov	sl, r0
 800928a:	460c      	mov	r4, r1
 800928c:	4650      	mov	r0, sl
 800928e:	4621      	mov	r1, r4
 8009290:	b006      	add	sp, #24
 8009292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009296:	2200      	movs	r2, #0
 8009298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800929c:	4b24      	ldr	r3, [pc, #144]	; (8009330 <__kernel_sin+0x168>)
 800929e:	f7f7 f913 	bl	80004c8 <__aeabi_dmul>
 80092a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092aa:	4640      	mov	r0, r8
 80092ac:	4649      	mov	r1, r9
 80092ae:	f7f7 f90b 	bl	80004c8 <__aeabi_dmul>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ba:	f7f6 ff4d 	bl	8000158 <__aeabi_dsub>
 80092be:	4632      	mov	r2, r6
 80092c0:	463b      	mov	r3, r7
 80092c2:	f7f7 f901 	bl	80004c8 <__aeabi_dmul>
 80092c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092ca:	f7f6 ff45 	bl	8000158 <__aeabi_dsub>
 80092ce:	a316      	add	r3, pc, #88	; (adr r3, 8009328 <__kernel_sin+0x160>)
 80092d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d4:	4606      	mov	r6, r0
 80092d6:	460f      	mov	r7, r1
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	f7f7 f8f4 	bl	80004c8 <__aeabi_dmul>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f6 ff38 	bl	800015c <__adddf3>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4650      	mov	r0, sl
 80092f2:	4621      	mov	r1, r4
 80092f4:	f7f6 ff30 	bl	8000158 <__aeabi_dsub>
 80092f8:	e7c6      	b.n	8009288 <__kernel_sin+0xc0>
 80092fa:	bf00      	nop
 80092fc:	f3af 8000 	nop.w
 8009300:	5acfd57c 	.word	0x5acfd57c
 8009304:	3de5d93a 	.word	0x3de5d93a
 8009308:	8a2b9ceb 	.word	0x8a2b9ceb
 800930c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009310:	57b1fe7d 	.word	0x57b1fe7d
 8009314:	3ec71de3 	.word	0x3ec71de3
 8009318:	19c161d5 	.word	0x19c161d5
 800931c:	3f2a01a0 	.word	0x3f2a01a0
 8009320:	1110f8a6 	.word	0x1110f8a6
 8009324:	3f811111 	.word	0x3f811111
 8009328:	55555549 	.word	0x55555549
 800932c:	3fc55555 	.word	0x3fc55555
 8009330:	3fe00000 	.word	0x3fe00000

08009334 <fabs>:
 8009334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009338:	4770      	bx	lr
 800933a:	0000      	movs	r0, r0
 800933c:	0000      	movs	r0, r0
	...

08009340 <floor>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009348:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800934c:	2e13      	cmp	r6, #19
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	4607      	mov	r7, r0
 8009354:	460c      	mov	r4, r1
 8009356:	4605      	mov	r5, r0
 8009358:	dc33      	bgt.n	80093c2 <floor+0x82>
 800935a:	2e00      	cmp	r6, #0
 800935c:	da14      	bge.n	8009388 <floor+0x48>
 800935e:	a334      	add	r3, pc, #208	; (adr r3, 8009430 <floor+0xf0>)
 8009360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009364:	f7f6 fefa 	bl	800015c <__adddf3>
 8009368:	2200      	movs	r2, #0
 800936a:	2300      	movs	r3, #0
 800936c:	f7f7 fb3c 	bl	80009e8 <__aeabi_dcmpgt>
 8009370:	b138      	cbz	r0, 8009382 <floor+0x42>
 8009372:	2c00      	cmp	r4, #0
 8009374:	da58      	bge.n	8009428 <floor+0xe8>
 8009376:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800937a:	431d      	orrs	r5, r3
 800937c:	d001      	beq.n	8009382 <floor+0x42>
 800937e:	2500      	movs	r5, #0
 8009380:	4c2d      	ldr	r4, [pc, #180]	; (8009438 <floor+0xf8>)
 8009382:	4623      	mov	r3, r4
 8009384:	462f      	mov	r7, r5
 8009386:	e025      	b.n	80093d4 <floor+0x94>
 8009388:	4a2c      	ldr	r2, [pc, #176]	; (800943c <floor+0xfc>)
 800938a:	fa42 f806 	asr.w	r8, r2, r6
 800938e:	ea01 0208 	and.w	r2, r1, r8
 8009392:	4302      	orrs	r2, r0
 8009394:	d01e      	beq.n	80093d4 <floor+0x94>
 8009396:	a326      	add	r3, pc, #152	; (adr r3, 8009430 <floor+0xf0>)
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f7f6 fede 	bl	800015c <__adddf3>
 80093a0:	2200      	movs	r2, #0
 80093a2:	2300      	movs	r3, #0
 80093a4:	f7f7 fb20 	bl	80009e8 <__aeabi_dcmpgt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0ea      	beq.n	8009382 <floor+0x42>
 80093ac:	2c00      	cmp	r4, #0
 80093ae:	bfbe      	ittt	lt
 80093b0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80093b4:	fa43 f606 	asrlt.w	r6, r3, r6
 80093b8:	19a4      	addlt	r4, r4, r6
 80093ba:	2500      	movs	r5, #0
 80093bc:	ea24 0408 	bic.w	r4, r4, r8
 80093c0:	e7df      	b.n	8009382 <floor+0x42>
 80093c2:	2e33      	cmp	r6, #51	; 0x33
 80093c4:	dd0a      	ble.n	80093dc <floor+0x9c>
 80093c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80093ca:	d103      	bne.n	80093d4 <floor+0x94>
 80093cc:	f7f6 fec6 	bl	800015c <__adddf3>
 80093d0:	4607      	mov	r7, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	4638      	mov	r0, r7
 80093d6:	4619      	mov	r1, r3
 80093d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093dc:	f04f 32ff 	mov.w	r2, #4294967295
 80093e0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80093e4:	fa22 f808 	lsr.w	r8, r2, r8
 80093e8:	ea18 0f00 	tst.w	r8, r0
 80093ec:	d0f2      	beq.n	80093d4 <floor+0x94>
 80093ee:	a310      	add	r3, pc, #64	; (adr r3, 8009430 <floor+0xf0>)
 80093f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f4:	f7f6 feb2 	bl	800015c <__adddf3>
 80093f8:	2200      	movs	r2, #0
 80093fa:	2300      	movs	r3, #0
 80093fc:	f7f7 faf4 	bl	80009e8 <__aeabi_dcmpgt>
 8009400:	2800      	cmp	r0, #0
 8009402:	d0be      	beq.n	8009382 <floor+0x42>
 8009404:	2c00      	cmp	r4, #0
 8009406:	da02      	bge.n	800940e <floor+0xce>
 8009408:	2e14      	cmp	r6, #20
 800940a:	d103      	bne.n	8009414 <floor+0xd4>
 800940c:	3401      	adds	r4, #1
 800940e:	ea25 0508 	bic.w	r5, r5, r8
 8009412:	e7b6      	b.n	8009382 <floor+0x42>
 8009414:	2301      	movs	r3, #1
 8009416:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800941a:	fa03 f606 	lsl.w	r6, r3, r6
 800941e:	4435      	add	r5, r6
 8009420:	42bd      	cmp	r5, r7
 8009422:	bf38      	it	cc
 8009424:	18e4      	addcc	r4, r4, r3
 8009426:	e7f2      	b.n	800940e <floor+0xce>
 8009428:	2500      	movs	r5, #0
 800942a:	462c      	mov	r4, r5
 800942c:	e7a9      	b.n	8009382 <floor+0x42>
 800942e:	bf00      	nop
 8009430:	8800759c 	.word	0x8800759c
 8009434:	7e37e43c 	.word	0x7e37e43c
 8009438:	bff00000 	.word	0xbff00000
 800943c:	000fffff 	.word	0x000fffff

08009440 <nan>:
 8009440:	2000      	movs	r0, #0
 8009442:	4901      	ldr	r1, [pc, #4]	; (8009448 <nan+0x8>)
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	7ff80000 	.word	0x7ff80000
 800944c:	00000000 	.word	0x00000000

08009450 <scalbn>:
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009456:	4604      	mov	r4, r0
 8009458:	460d      	mov	r5, r1
 800945a:	4617      	mov	r7, r2
 800945c:	460b      	mov	r3, r1
 800945e:	b996      	cbnz	r6, 8009486 <scalbn+0x36>
 8009460:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009464:	4303      	orrs	r3, r0
 8009466:	d039      	beq.n	80094dc <scalbn+0x8c>
 8009468:	4b33      	ldr	r3, [pc, #204]	; (8009538 <scalbn+0xe8>)
 800946a:	2200      	movs	r2, #0
 800946c:	f7f7 f82c 	bl	80004c8 <__aeabi_dmul>
 8009470:	4b32      	ldr	r3, [pc, #200]	; (800953c <scalbn+0xec>)
 8009472:	4604      	mov	r4, r0
 8009474:	429f      	cmp	r7, r3
 8009476:	460d      	mov	r5, r1
 8009478:	da0f      	bge.n	800949a <scalbn+0x4a>
 800947a:	a32b      	add	r3, pc, #172	; (adr r3, 8009528 <scalbn+0xd8>)
 800947c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009480:	f7f7 f822 	bl	80004c8 <__aeabi_dmul>
 8009484:	e006      	b.n	8009494 <scalbn+0x44>
 8009486:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800948a:	4296      	cmp	r6, r2
 800948c:	d10a      	bne.n	80094a4 <scalbn+0x54>
 800948e:	4602      	mov	r2, r0
 8009490:	f7f6 fe64 	bl	800015c <__adddf3>
 8009494:	4604      	mov	r4, r0
 8009496:	460d      	mov	r5, r1
 8009498:	e020      	b.n	80094dc <scalbn+0x8c>
 800949a:	460b      	mov	r3, r1
 800949c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80094a0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80094a4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80094a8:	19b9      	adds	r1, r7, r6
 80094aa:	4291      	cmp	r1, r2
 80094ac:	dd0e      	ble.n	80094cc <scalbn+0x7c>
 80094ae:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80094b2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80094b6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80094ba:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80094be:	4820      	ldr	r0, [pc, #128]	; (8009540 <scalbn+0xf0>)
 80094c0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80094c4:	a31a      	add	r3, pc, #104	; (adr r3, 8009530 <scalbn+0xe0>)
 80094c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ca:	e7d9      	b.n	8009480 <scalbn+0x30>
 80094cc:	2900      	cmp	r1, #0
 80094ce:	dd08      	ble.n	80094e2 <scalbn+0x92>
 80094d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80094d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80094d8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80094dc:	4620      	mov	r0, r4
 80094de:	4629      	mov	r1, r5
 80094e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80094e6:	da12      	bge.n	800950e <scalbn+0xbe>
 80094e8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80094ec:	429f      	cmp	r7, r3
 80094ee:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80094f2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80094f6:	dcdc      	bgt.n	80094b2 <scalbn+0x62>
 80094f8:	a30b      	add	r3, pc, #44	; (adr r3, 8009528 <scalbn+0xd8>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8009502:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8009506:	480f      	ldr	r0, [pc, #60]	; (8009544 <scalbn+0xf4>)
 8009508:	f041 011f 	orr.w	r1, r1, #31
 800950c:	e7b8      	b.n	8009480 <scalbn+0x30>
 800950e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009512:	3136      	adds	r1, #54	; 0x36
 8009514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009518:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	2200      	movs	r2, #0
 8009522:	4b09      	ldr	r3, [pc, #36]	; (8009548 <scalbn+0xf8>)
 8009524:	e7ac      	b.n	8009480 <scalbn+0x30>
 8009526:	bf00      	nop
 8009528:	c2f8f359 	.word	0xc2f8f359
 800952c:	01a56e1f 	.word	0x01a56e1f
 8009530:	8800759c 	.word	0x8800759c
 8009534:	7e37e43c 	.word	0x7e37e43c
 8009538:	43500000 	.word	0x43500000
 800953c:	ffff3cb0 	.word	0xffff3cb0
 8009540:	8800759c 	.word	0x8800759c
 8009544:	c2f8f359 	.word	0xc2f8f359
 8009548:	3c900000 	.word	0x3c900000
 800954c:	00000000 	.word	0x00000000

08009550 <__ieee754_log>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	460d      	mov	r5, r1
 800955e:	b087      	sub	sp, #28
 8009560:	da24      	bge.n	80095ac <__ieee754_log+0x5c>
 8009562:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8009566:	4304      	orrs	r4, r0
 8009568:	d108      	bne.n	800957c <__ieee754_log+0x2c>
 800956a:	2200      	movs	r2, #0
 800956c:	2300      	movs	r3, #0
 800956e:	2000      	movs	r0, #0
 8009570:	49cb      	ldr	r1, [pc, #812]	; (80098a0 <__ieee754_log+0x350>)
 8009572:	f7f7 f8d3 	bl	800071c <__aeabi_ddiv>
 8009576:	b007      	add	sp, #28
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	2900      	cmp	r1, #0
 800957e:	da04      	bge.n	800958a <__ieee754_log+0x3a>
 8009580:	f7f6 fdea 	bl	8000158 <__aeabi_dsub>
 8009584:	2200      	movs	r2, #0
 8009586:	2300      	movs	r3, #0
 8009588:	e7f3      	b.n	8009572 <__ieee754_log+0x22>
 800958a:	2200      	movs	r2, #0
 800958c:	4bc5      	ldr	r3, [pc, #788]	; (80098a4 <__ieee754_log+0x354>)
 800958e:	f7f6 ff9b 	bl	80004c8 <__aeabi_dmul>
 8009592:	f06f 0635 	mvn.w	r6, #53	; 0x35
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	460d      	mov	r5, r1
 800959c:	49c2      	ldr	r1, [pc, #776]	; (80098a8 <__ieee754_log+0x358>)
 800959e:	428d      	cmp	r5, r1
 80095a0:	dd06      	ble.n	80095b0 <__ieee754_log+0x60>
 80095a2:	4610      	mov	r0, r2
 80095a4:	4619      	mov	r1, r3
 80095a6:	f7f6 fdd9 	bl	800015c <__adddf3>
 80095aa:	e7e4      	b.n	8009576 <__ieee754_log+0x26>
 80095ac:	2600      	movs	r6, #0
 80095ae:	e7f5      	b.n	800959c <__ieee754_log+0x4c>
 80095b0:	152c      	asrs	r4, r5, #20
 80095b2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80095b6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80095ba:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80095be:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80095c2:	4426      	add	r6, r4
 80095c4:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80095c8:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80095cc:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80095d0:	ea41 0305 	orr.w	r3, r1, r5
 80095d4:	4610      	mov	r0, r2
 80095d6:	4619      	mov	r1, r3
 80095d8:	2200      	movs	r2, #0
 80095da:	4bb4      	ldr	r3, [pc, #720]	; (80098ac <__ieee754_log+0x35c>)
 80095dc:	f7f6 fdbc 	bl	8000158 <__aeabi_dsub>
 80095e0:	1cab      	adds	r3, r5, #2
 80095e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	4682      	mov	sl, r0
 80095ea:	468b      	mov	fp, r1
 80095ec:	f04f 0200 	mov.w	r2, #0
 80095f0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 80095f4:	dc53      	bgt.n	800969e <__ieee754_log+0x14e>
 80095f6:	2300      	movs	r3, #0
 80095f8:	f7f7 f9ce 	bl	8000998 <__aeabi_dcmpeq>
 80095fc:	b1d0      	cbz	r0, 8009634 <__ieee754_log+0xe4>
 80095fe:	2c00      	cmp	r4, #0
 8009600:	f000 8122 	beq.w	8009848 <__ieee754_log+0x2f8>
 8009604:	4620      	mov	r0, r4
 8009606:	f7f6 fef5 	bl	80003f4 <__aeabi_i2d>
 800960a:	a391      	add	r3, pc, #580	; (adr r3, 8009850 <__ieee754_log+0x300>)
 800960c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009610:	4606      	mov	r6, r0
 8009612:	460f      	mov	r7, r1
 8009614:	f7f6 ff58 	bl	80004c8 <__aeabi_dmul>
 8009618:	a38f      	add	r3, pc, #572	; (adr r3, 8009858 <__ieee754_log+0x308>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	4604      	mov	r4, r0
 8009620:	460d      	mov	r5, r1
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f6 ff4f 	bl	80004c8 <__aeabi_dmul>
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	e7b8      	b.n	80095a6 <__ieee754_log+0x56>
 8009634:	a38a      	add	r3, pc, #552	; (adr r3, 8009860 <__ieee754_log+0x310>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	f7f6 ff43 	bl	80004c8 <__aeabi_dmul>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	2000      	movs	r0, #0
 8009648:	4999      	ldr	r1, [pc, #612]	; (80098b0 <__ieee754_log+0x360>)
 800964a:	f7f6 fd85 	bl	8000158 <__aeabi_dsub>
 800964e:	4652      	mov	r2, sl
 8009650:	4606      	mov	r6, r0
 8009652:	460f      	mov	r7, r1
 8009654:	465b      	mov	r3, fp
 8009656:	4650      	mov	r0, sl
 8009658:	4659      	mov	r1, fp
 800965a:	f7f6 ff35 	bl	80004c8 <__aeabi_dmul>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4630      	mov	r0, r6
 8009664:	4639      	mov	r1, r7
 8009666:	f7f6 ff2f 	bl	80004c8 <__aeabi_dmul>
 800966a:	4606      	mov	r6, r0
 800966c:	460f      	mov	r7, r1
 800966e:	b914      	cbnz	r4, 8009676 <__ieee754_log+0x126>
 8009670:	4632      	mov	r2, r6
 8009672:	463b      	mov	r3, r7
 8009674:	e0a2      	b.n	80097bc <__ieee754_log+0x26c>
 8009676:	4620      	mov	r0, r4
 8009678:	f7f6 febc 	bl	80003f4 <__aeabi_i2d>
 800967c:	a374      	add	r3, pc, #464	; (adr r3, 8009850 <__ieee754_log+0x300>)
 800967e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009682:	4680      	mov	r8, r0
 8009684:	4689      	mov	r9, r1
 8009686:	f7f6 ff1f 	bl	80004c8 <__aeabi_dmul>
 800968a:	a373      	add	r3, pc, #460	; (adr r3, 8009858 <__ieee754_log+0x308>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	4640      	mov	r0, r8
 8009696:	4649      	mov	r1, r9
 8009698:	f7f6 ff16 	bl	80004c8 <__aeabi_dmul>
 800969c:	e0a7      	b.n	80097ee <__ieee754_log+0x29e>
 800969e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096a2:	f7f6 fd5b 	bl	800015c <__adddf3>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4650      	mov	r0, sl
 80096ac:	4659      	mov	r1, fp
 80096ae:	f7f7 f835 	bl	800071c <__aeabi_ddiv>
 80096b2:	e9cd 0100 	strd	r0, r1, [sp]
 80096b6:	4620      	mov	r0, r4
 80096b8:	f7f6 fe9c 	bl	80003f4 <__aeabi_i2d>
 80096bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f6 fefe 	bl	80004c8 <__aeabi_dmul>
 80096cc:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80096d0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80096d4:	4602      	mov	r2, r0
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	460b      	mov	r3, r1
 80096da:	4606      	mov	r6, r0
 80096dc:	460f      	mov	r7, r1
 80096de:	f7f6 fef3 	bl	80004c8 <__aeabi_dmul>
 80096e2:	a361      	add	r3, pc, #388	; (adr r3, 8009868 <__ieee754_log+0x318>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	4680      	mov	r8, r0
 80096ea:	4689      	mov	r9, r1
 80096ec:	f7f6 feec 	bl	80004c8 <__aeabi_dmul>
 80096f0:	a35f      	add	r3, pc, #380	; (adr r3, 8009870 <__ieee754_log+0x320>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 fd31 	bl	800015c <__adddf3>
 80096fa:	4642      	mov	r2, r8
 80096fc:	464b      	mov	r3, r9
 80096fe:	f7f6 fee3 	bl	80004c8 <__aeabi_dmul>
 8009702:	a35d      	add	r3, pc, #372	; (adr r3, 8009878 <__ieee754_log+0x328>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	f7f6 fd28 	bl	800015c <__adddf3>
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	f7f6 feda 	bl	80004c8 <__aeabi_dmul>
 8009714:	a35a      	add	r3, pc, #360	; (adr r3, 8009880 <__ieee754_log+0x330>)
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	f7f6 fd1f 	bl	800015c <__adddf3>
 800971e:	4632      	mov	r2, r6
 8009720:	463b      	mov	r3, r7
 8009722:	f7f6 fed1 	bl	80004c8 <__aeabi_dmul>
 8009726:	a358      	add	r3, pc, #352	; (adr r3, 8009888 <__ieee754_log+0x338>)
 8009728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972c:	4606      	mov	r6, r0
 800972e:	460f      	mov	r7, r1
 8009730:	4640      	mov	r0, r8
 8009732:	4649      	mov	r1, r9
 8009734:	f7f6 fec8 	bl	80004c8 <__aeabi_dmul>
 8009738:	a355      	add	r3, pc, #340	; (adr r3, 8009890 <__ieee754_log+0x340>)
 800973a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973e:	f7f6 fd0d 	bl	800015c <__adddf3>
 8009742:	4642      	mov	r2, r8
 8009744:	464b      	mov	r3, r9
 8009746:	f7f6 febf 	bl	80004c8 <__aeabi_dmul>
 800974a:	a353      	add	r3, pc, #332	; (adr r3, 8009898 <__ieee754_log+0x348>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 fd04 	bl	800015c <__adddf3>
 8009754:	4642      	mov	r2, r8
 8009756:	464b      	mov	r3, r9
 8009758:	f7f6 feb6 	bl	80004c8 <__aeabi_dmul>
 800975c:	460b      	mov	r3, r1
 800975e:	4602      	mov	r2, r0
 8009760:	4639      	mov	r1, r7
 8009762:	4630      	mov	r0, r6
 8009764:	f7f6 fcfa 	bl	800015c <__adddf3>
 8009768:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800976c:	9b05      	ldr	r3, [sp, #20]
 800976e:	3551      	adds	r5, #81	; 0x51
 8009770:	431d      	orrs	r5, r3
 8009772:	2d00      	cmp	r5, #0
 8009774:	4680      	mov	r8, r0
 8009776:	4689      	mov	r9, r1
 8009778:	dd48      	ble.n	800980c <__ieee754_log+0x2bc>
 800977a:	2200      	movs	r2, #0
 800977c:	4b4c      	ldr	r3, [pc, #304]	; (80098b0 <__ieee754_log+0x360>)
 800977e:	4650      	mov	r0, sl
 8009780:	4659      	mov	r1, fp
 8009782:	f7f6 fea1 	bl	80004c8 <__aeabi_dmul>
 8009786:	4652      	mov	r2, sl
 8009788:	465b      	mov	r3, fp
 800978a:	f7f6 fe9d 	bl	80004c8 <__aeabi_dmul>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4606      	mov	r6, r0
 8009794:	460f      	mov	r7, r1
 8009796:	4640      	mov	r0, r8
 8009798:	4649      	mov	r1, r9
 800979a:	f7f6 fcdf 	bl	800015c <__adddf3>
 800979e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097a2:	f7f6 fe91 	bl	80004c8 <__aeabi_dmul>
 80097a6:	4680      	mov	r8, r0
 80097a8:	4689      	mov	r9, r1
 80097aa:	b964      	cbnz	r4, 80097c6 <__ieee754_log+0x276>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f6 fcd0 	bl	8000158 <__aeabi_dsub>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4650      	mov	r0, sl
 80097be:	4659      	mov	r1, fp
 80097c0:	f7f6 fcca 	bl	8000158 <__aeabi_dsub>
 80097c4:	e6d7      	b.n	8009576 <__ieee754_log+0x26>
 80097c6:	a322      	add	r3, pc, #136	; (adr r3, 8009850 <__ieee754_log+0x300>)
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097d0:	f7f6 fe7a 	bl	80004c8 <__aeabi_dmul>
 80097d4:	a320      	add	r3, pc, #128	; (adr r3, 8009858 <__ieee754_log+0x308>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	4604      	mov	r4, r0
 80097dc:	460d      	mov	r5, r1
 80097de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097e2:	f7f6 fe71 	bl	80004c8 <__aeabi_dmul>
 80097e6:	4642      	mov	r2, r8
 80097e8:	464b      	mov	r3, r9
 80097ea:	f7f6 fcb7 	bl	800015c <__adddf3>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	4630      	mov	r0, r6
 80097f4:	4639      	mov	r1, r7
 80097f6:	f7f6 fcaf 	bl	8000158 <__aeabi_dsub>
 80097fa:	4652      	mov	r2, sl
 80097fc:	465b      	mov	r3, fp
 80097fe:	f7f6 fcab 	bl	8000158 <__aeabi_dsub>
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	e7d9      	b.n	80097c0 <__ieee754_log+0x270>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4650      	mov	r0, sl
 8009812:	4659      	mov	r1, fp
 8009814:	f7f6 fca0 	bl	8000158 <__aeabi_dsub>
 8009818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800981c:	f7f6 fe54 	bl	80004c8 <__aeabi_dmul>
 8009820:	4606      	mov	r6, r0
 8009822:	460f      	mov	r7, r1
 8009824:	2c00      	cmp	r4, #0
 8009826:	f43f af23 	beq.w	8009670 <__ieee754_log+0x120>
 800982a:	a309      	add	r3, pc, #36	; (adr r3, 8009850 <__ieee754_log+0x300>)
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009834:	f7f6 fe48 	bl	80004c8 <__aeabi_dmul>
 8009838:	a307      	add	r3, pc, #28	; (adr r3, 8009858 <__ieee754_log+0x308>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009846:	e727      	b.n	8009698 <__ieee754_log+0x148>
 8009848:	2000      	movs	r0, #0
 800984a:	2100      	movs	r1, #0
 800984c:	e693      	b.n	8009576 <__ieee754_log+0x26>
 800984e:	bf00      	nop
 8009850:	fee00000 	.word	0xfee00000
 8009854:	3fe62e42 	.word	0x3fe62e42
 8009858:	35793c76 	.word	0x35793c76
 800985c:	3dea39ef 	.word	0x3dea39ef
 8009860:	55555555 	.word	0x55555555
 8009864:	3fd55555 	.word	0x3fd55555
 8009868:	df3e5244 	.word	0xdf3e5244
 800986c:	3fc2f112 	.word	0x3fc2f112
 8009870:	96cb03de 	.word	0x96cb03de
 8009874:	3fc74664 	.word	0x3fc74664
 8009878:	94229359 	.word	0x94229359
 800987c:	3fd24924 	.word	0x3fd24924
 8009880:	55555593 	.word	0x55555593
 8009884:	3fe55555 	.word	0x3fe55555
 8009888:	d078c69f 	.word	0xd078c69f
 800988c:	3fc39a09 	.word	0x3fc39a09
 8009890:	1d8e78af 	.word	0x1d8e78af
 8009894:	3fcc71c5 	.word	0x3fcc71c5
 8009898:	9997fa04 	.word	0x9997fa04
 800989c:	3fd99999 	.word	0x3fd99999
 80098a0:	c3500000 	.word	0xc3500000
 80098a4:	43500000 	.word	0x43500000
 80098a8:	7fefffff 	.word	0x7fefffff
 80098ac:	3ff00000 	.word	0x3ff00000
 80098b0:	3fe00000 	.word	0x3fe00000

080098b4 <__errno>:
 80098b4:	4b01      	ldr	r3, [pc, #4]	; (80098bc <__errno+0x8>)
 80098b6:	6818      	ldr	r0, [r3, #0]
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	2000001c 	.word	0x2000001c

080098c0 <__libc_init_array>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	2600      	movs	r6, #0
 80098c4:	4d0c      	ldr	r5, [pc, #48]	; (80098f8 <__libc_init_array+0x38>)
 80098c6:	4c0d      	ldr	r4, [pc, #52]	; (80098fc <__libc_init_array+0x3c>)
 80098c8:	1b64      	subs	r4, r4, r5
 80098ca:	10a4      	asrs	r4, r4, #2
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	d109      	bne.n	80098e4 <__libc_init_array+0x24>
 80098d0:	f001 f860 	bl	800a994 <_init>
 80098d4:	2600      	movs	r6, #0
 80098d6:	4d0a      	ldr	r5, [pc, #40]	; (8009900 <__libc_init_array+0x40>)
 80098d8:	4c0a      	ldr	r4, [pc, #40]	; (8009904 <__libc_init_array+0x44>)
 80098da:	1b64      	subs	r4, r4, r5
 80098dc:	10a4      	asrs	r4, r4, #2
 80098de:	42a6      	cmp	r6, r4
 80098e0:	d105      	bne.n	80098ee <__libc_init_array+0x2e>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098e8:	4798      	blx	r3
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7ee      	b.n	80098cc <__libc_init_array+0xc>
 80098ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f2:	4798      	blx	r3
 80098f4:	3601      	adds	r6, #1
 80098f6:	e7f2      	b.n	80098de <__libc_init_array+0x1e>
 80098f8:	0800b3b0 	.word	0x0800b3b0
 80098fc:	0800b3b0 	.word	0x0800b3b0
 8009900:	0800b3b0 	.word	0x0800b3b0
 8009904:	0800b3b4 	.word	0x0800b3b4

08009908 <memset>:
 8009908:	4603      	mov	r3, r0
 800990a:	4402      	add	r2, r0
 800990c:	4293      	cmp	r3, r2
 800990e:	d100      	bne.n	8009912 <memset+0xa>
 8009910:	4770      	bx	lr
 8009912:	f803 1b01 	strb.w	r1, [r3], #1
 8009916:	e7f9      	b.n	800990c <memset+0x4>

08009918 <rand>:
 8009918:	4b16      	ldr	r3, [pc, #88]	; (8009974 <rand+0x5c>)
 800991a:	b510      	push	{r4, lr}
 800991c:	681c      	ldr	r4, [r3, #0]
 800991e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009920:	b9b3      	cbnz	r3, 8009950 <rand+0x38>
 8009922:	2018      	movs	r0, #24
 8009924:	f000 f866 	bl	80099f4 <malloc>
 8009928:	4602      	mov	r2, r0
 800992a:	63a0      	str	r0, [r4, #56]	; 0x38
 800992c:	b920      	cbnz	r0, 8009938 <rand+0x20>
 800992e:	214e      	movs	r1, #78	; 0x4e
 8009930:	4b11      	ldr	r3, [pc, #68]	; (8009978 <rand+0x60>)
 8009932:	4812      	ldr	r0, [pc, #72]	; (800997c <rand+0x64>)
 8009934:	f000 f82e 	bl	8009994 <__assert_func>
 8009938:	4911      	ldr	r1, [pc, #68]	; (8009980 <rand+0x68>)
 800993a:	4b12      	ldr	r3, [pc, #72]	; (8009984 <rand+0x6c>)
 800993c:	e9c0 1300 	strd	r1, r3, [r0]
 8009940:	4b11      	ldr	r3, [pc, #68]	; (8009988 <rand+0x70>)
 8009942:	2100      	movs	r1, #0
 8009944:	6083      	str	r3, [r0, #8]
 8009946:	230b      	movs	r3, #11
 8009948:	8183      	strh	r3, [r0, #12]
 800994a:	2001      	movs	r0, #1
 800994c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009950:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8009952:	4a0e      	ldr	r2, [pc, #56]	; (800998c <rand+0x74>)
 8009954:	6920      	ldr	r0, [r4, #16]
 8009956:	6963      	ldr	r3, [r4, #20]
 8009958:	4342      	muls	r2, r0
 800995a:	490d      	ldr	r1, [pc, #52]	; (8009990 <rand+0x78>)
 800995c:	fb01 2203 	mla	r2, r1, r3, r2
 8009960:	fba0 0101 	umull	r0, r1, r0, r1
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	eb42 0001 	adc.w	r0, r2, r1
 800996a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800996e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009972:	bd10      	pop	{r4, pc}
 8009974:	2000001c 	.word	0x2000001c
 8009978:	0800b26c 	.word	0x0800b26c
 800997c:	0800b283 	.word	0x0800b283
 8009980:	abcd330e 	.word	0xabcd330e
 8009984:	e66d1234 	.word	0xe66d1234
 8009988:	0005deec 	.word	0x0005deec
 800998c:	5851f42d 	.word	0x5851f42d
 8009990:	4c957f2d 	.word	0x4c957f2d

08009994 <__assert_func>:
 8009994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009996:	4614      	mov	r4, r2
 8009998:	461a      	mov	r2, r3
 800999a:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <__assert_func+0x2c>)
 800999c:	4605      	mov	r5, r0
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68d8      	ldr	r0, [r3, #12]
 80099a2:	b14c      	cbz	r4, 80099b8 <__assert_func+0x24>
 80099a4:	4b07      	ldr	r3, [pc, #28]	; (80099c4 <__assert_func+0x30>)
 80099a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099aa:	9100      	str	r1, [sp, #0]
 80099ac:	462b      	mov	r3, r5
 80099ae:	4906      	ldr	r1, [pc, #24]	; (80099c8 <__assert_func+0x34>)
 80099b0:	f000 f80e 	bl	80099d0 <fiprintf>
 80099b4:	f000 fcc0 	bl	800a338 <abort>
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <__assert_func+0x38>)
 80099ba:	461c      	mov	r4, r3
 80099bc:	e7f3      	b.n	80099a6 <__assert_func+0x12>
 80099be:	bf00      	nop
 80099c0:	2000001c 	.word	0x2000001c
 80099c4:	0800b2de 	.word	0x0800b2de
 80099c8:	0800b2eb 	.word	0x0800b2eb
 80099cc:	0800b319 	.word	0x0800b319

080099d0 <fiprintf>:
 80099d0:	b40e      	push	{r1, r2, r3}
 80099d2:	b503      	push	{r0, r1, lr}
 80099d4:	4601      	mov	r1, r0
 80099d6:	ab03      	add	r3, sp, #12
 80099d8:	4805      	ldr	r0, [pc, #20]	; (80099f0 <fiprintf+0x20>)
 80099da:	f853 2b04 	ldr.w	r2, [r3], #4
 80099de:	6800      	ldr	r0, [r0, #0]
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	f000 f913 	bl	8009c0c <_vfiprintf_r>
 80099e6:	b002      	add	sp, #8
 80099e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ec:	b003      	add	sp, #12
 80099ee:	4770      	bx	lr
 80099f0:	2000001c 	.word	0x2000001c

080099f4 <malloc>:
 80099f4:	4b02      	ldr	r3, [pc, #8]	; (8009a00 <malloc+0xc>)
 80099f6:	4601      	mov	r1, r0
 80099f8:	6818      	ldr	r0, [r3, #0]
 80099fa:	f000 b86b 	b.w	8009ad4 <_malloc_r>
 80099fe:	bf00      	nop
 8009a00:	2000001c 	.word	0x2000001c

08009a04 <_free_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4605      	mov	r5, r0
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	d040      	beq.n	8009a8e <_free_r+0x8a>
 8009a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a10:	1f0c      	subs	r4, r1, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfb8      	it	lt
 8009a16:	18e4      	addlt	r4, r4, r3
 8009a18:	f000 fec0 	bl	800a79c <__malloc_lock>
 8009a1c:	4a1c      	ldr	r2, [pc, #112]	; (8009a90 <_free_r+0x8c>)
 8009a1e:	6813      	ldr	r3, [r2, #0]
 8009a20:	b933      	cbnz	r3, 8009a30 <_free_r+0x2c>
 8009a22:	6063      	str	r3, [r4, #4]
 8009a24:	6014      	str	r4, [r2, #0]
 8009a26:	4628      	mov	r0, r5
 8009a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a2c:	f000 bebc 	b.w	800a7a8 <__malloc_unlock>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d908      	bls.n	8009a46 <_free_r+0x42>
 8009a34:	6820      	ldr	r0, [r4, #0]
 8009a36:	1821      	adds	r1, r4, r0
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	bf01      	itttt	eq
 8009a3c:	6819      	ldreq	r1, [r3, #0]
 8009a3e:	685b      	ldreq	r3, [r3, #4]
 8009a40:	1809      	addeq	r1, r1, r0
 8009a42:	6021      	streq	r1, [r4, #0]
 8009a44:	e7ed      	b.n	8009a22 <_free_r+0x1e>
 8009a46:	461a      	mov	r2, r3
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	b10b      	cbz	r3, 8009a50 <_free_r+0x4c>
 8009a4c:	42a3      	cmp	r3, r4
 8009a4e:	d9fa      	bls.n	8009a46 <_free_r+0x42>
 8009a50:	6811      	ldr	r1, [r2, #0]
 8009a52:	1850      	adds	r0, r2, r1
 8009a54:	42a0      	cmp	r0, r4
 8009a56:	d10b      	bne.n	8009a70 <_free_r+0x6c>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	4401      	add	r1, r0
 8009a5c:	1850      	adds	r0, r2, r1
 8009a5e:	4283      	cmp	r3, r0
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	d1e0      	bne.n	8009a26 <_free_r+0x22>
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4401      	add	r1, r0
 8009a6a:	6011      	str	r1, [r2, #0]
 8009a6c:	6053      	str	r3, [r2, #4]
 8009a6e:	e7da      	b.n	8009a26 <_free_r+0x22>
 8009a70:	d902      	bls.n	8009a78 <_free_r+0x74>
 8009a72:	230c      	movs	r3, #12
 8009a74:	602b      	str	r3, [r5, #0]
 8009a76:	e7d6      	b.n	8009a26 <_free_r+0x22>
 8009a78:	6820      	ldr	r0, [r4, #0]
 8009a7a:	1821      	adds	r1, r4, r0
 8009a7c:	428b      	cmp	r3, r1
 8009a7e:	bf01      	itttt	eq
 8009a80:	6819      	ldreq	r1, [r3, #0]
 8009a82:	685b      	ldreq	r3, [r3, #4]
 8009a84:	1809      	addeq	r1, r1, r0
 8009a86:	6021      	streq	r1, [r4, #0]
 8009a88:	6063      	str	r3, [r4, #4]
 8009a8a:	6054      	str	r4, [r2, #4]
 8009a8c:	e7cb      	b.n	8009a26 <_free_r+0x22>
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	200015b4 	.word	0x200015b4

08009a94 <sbrk_aligned>:
 8009a94:	b570      	push	{r4, r5, r6, lr}
 8009a96:	4e0e      	ldr	r6, [pc, #56]	; (8009ad0 <sbrk_aligned+0x3c>)
 8009a98:	460c      	mov	r4, r1
 8009a9a:	6831      	ldr	r1, [r6, #0]
 8009a9c:	4605      	mov	r5, r0
 8009a9e:	b911      	cbnz	r1, 8009aa6 <sbrk_aligned+0x12>
 8009aa0:	f000 fb7a 	bl	800a198 <_sbrk_r>
 8009aa4:	6030      	str	r0, [r6, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	f000 fb75 	bl	800a198 <_sbrk_r>
 8009aae:	1c43      	adds	r3, r0, #1
 8009ab0:	d00a      	beq.n	8009ac8 <sbrk_aligned+0x34>
 8009ab2:	1cc4      	adds	r4, r0, #3
 8009ab4:	f024 0403 	bic.w	r4, r4, #3
 8009ab8:	42a0      	cmp	r0, r4
 8009aba:	d007      	beq.n	8009acc <sbrk_aligned+0x38>
 8009abc:	1a21      	subs	r1, r4, r0
 8009abe:	4628      	mov	r0, r5
 8009ac0:	f000 fb6a 	bl	800a198 <_sbrk_r>
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	d101      	bne.n	8009acc <sbrk_aligned+0x38>
 8009ac8:	f04f 34ff 	mov.w	r4, #4294967295
 8009acc:	4620      	mov	r0, r4
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	200015b8 	.word	0x200015b8

08009ad4 <_malloc_r>:
 8009ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	1ccd      	adds	r5, r1, #3
 8009ada:	f025 0503 	bic.w	r5, r5, #3
 8009ade:	3508      	adds	r5, #8
 8009ae0:	2d0c      	cmp	r5, #12
 8009ae2:	bf38      	it	cc
 8009ae4:	250c      	movcc	r5, #12
 8009ae6:	2d00      	cmp	r5, #0
 8009ae8:	4607      	mov	r7, r0
 8009aea:	db01      	blt.n	8009af0 <_malloc_r+0x1c>
 8009aec:	42a9      	cmp	r1, r5
 8009aee:	d905      	bls.n	8009afc <_malloc_r+0x28>
 8009af0:	230c      	movs	r3, #12
 8009af2:	2600      	movs	r6, #0
 8009af4:	603b      	str	r3, [r7, #0]
 8009af6:	4630      	mov	r0, r6
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	4e2e      	ldr	r6, [pc, #184]	; (8009bb8 <_malloc_r+0xe4>)
 8009afe:	f000 fe4d 	bl	800a79c <__malloc_lock>
 8009b02:	6833      	ldr	r3, [r6, #0]
 8009b04:	461c      	mov	r4, r3
 8009b06:	bb34      	cbnz	r4, 8009b56 <_malloc_r+0x82>
 8009b08:	4629      	mov	r1, r5
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff ffc2 	bl	8009a94 <sbrk_aligned>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	4604      	mov	r4, r0
 8009b14:	d14d      	bne.n	8009bb2 <_malloc_r+0xde>
 8009b16:	6834      	ldr	r4, [r6, #0]
 8009b18:	4626      	mov	r6, r4
 8009b1a:	2e00      	cmp	r6, #0
 8009b1c:	d140      	bne.n	8009ba0 <_malloc_r+0xcc>
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	4631      	mov	r1, r6
 8009b22:	4638      	mov	r0, r7
 8009b24:	eb04 0803 	add.w	r8, r4, r3
 8009b28:	f000 fb36 	bl	800a198 <_sbrk_r>
 8009b2c:	4580      	cmp	r8, r0
 8009b2e:	d13a      	bne.n	8009ba6 <_malloc_r+0xd2>
 8009b30:	6821      	ldr	r1, [r4, #0]
 8009b32:	3503      	adds	r5, #3
 8009b34:	1a6d      	subs	r5, r5, r1
 8009b36:	f025 0503 	bic.w	r5, r5, #3
 8009b3a:	3508      	adds	r5, #8
 8009b3c:	2d0c      	cmp	r5, #12
 8009b3e:	bf38      	it	cc
 8009b40:	250c      	movcc	r5, #12
 8009b42:	4638      	mov	r0, r7
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7ff ffa5 	bl	8009a94 <sbrk_aligned>
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	d02b      	beq.n	8009ba6 <_malloc_r+0xd2>
 8009b4e:	6823      	ldr	r3, [r4, #0]
 8009b50:	442b      	add	r3, r5
 8009b52:	6023      	str	r3, [r4, #0]
 8009b54:	e00e      	b.n	8009b74 <_malloc_r+0xa0>
 8009b56:	6822      	ldr	r2, [r4, #0]
 8009b58:	1b52      	subs	r2, r2, r5
 8009b5a:	d41e      	bmi.n	8009b9a <_malloc_r+0xc6>
 8009b5c:	2a0b      	cmp	r2, #11
 8009b5e:	d916      	bls.n	8009b8e <_malloc_r+0xba>
 8009b60:	1961      	adds	r1, r4, r5
 8009b62:	42a3      	cmp	r3, r4
 8009b64:	6025      	str	r5, [r4, #0]
 8009b66:	bf18      	it	ne
 8009b68:	6059      	strne	r1, [r3, #4]
 8009b6a:	6863      	ldr	r3, [r4, #4]
 8009b6c:	bf08      	it	eq
 8009b6e:	6031      	streq	r1, [r6, #0]
 8009b70:	5162      	str	r2, [r4, r5]
 8009b72:	604b      	str	r3, [r1, #4]
 8009b74:	4638      	mov	r0, r7
 8009b76:	f104 060b 	add.w	r6, r4, #11
 8009b7a:	f000 fe15 	bl	800a7a8 <__malloc_unlock>
 8009b7e:	f026 0607 	bic.w	r6, r6, #7
 8009b82:	1d23      	adds	r3, r4, #4
 8009b84:	1af2      	subs	r2, r6, r3
 8009b86:	d0b6      	beq.n	8009af6 <_malloc_r+0x22>
 8009b88:	1b9b      	subs	r3, r3, r6
 8009b8a:	50a3      	str	r3, [r4, r2]
 8009b8c:	e7b3      	b.n	8009af6 <_malloc_r+0x22>
 8009b8e:	6862      	ldr	r2, [r4, #4]
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	bf0c      	ite	eq
 8009b94:	6032      	streq	r2, [r6, #0]
 8009b96:	605a      	strne	r2, [r3, #4]
 8009b98:	e7ec      	b.n	8009b74 <_malloc_r+0xa0>
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	6864      	ldr	r4, [r4, #4]
 8009b9e:	e7b2      	b.n	8009b06 <_malloc_r+0x32>
 8009ba0:	4634      	mov	r4, r6
 8009ba2:	6876      	ldr	r6, [r6, #4]
 8009ba4:	e7b9      	b.n	8009b1a <_malloc_r+0x46>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	4638      	mov	r0, r7
 8009baa:	603b      	str	r3, [r7, #0]
 8009bac:	f000 fdfc 	bl	800a7a8 <__malloc_unlock>
 8009bb0:	e7a1      	b.n	8009af6 <_malloc_r+0x22>
 8009bb2:	6025      	str	r5, [r4, #0]
 8009bb4:	e7de      	b.n	8009b74 <_malloc_r+0xa0>
 8009bb6:	bf00      	nop
 8009bb8:	200015b4 	.word	0x200015b4

08009bbc <__sfputc_r>:
 8009bbc:	6893      	ldr	r3, [r2, #8]
 8009bbe:	b410      	push	{r4}
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	6093      	str	r3, [r2, #8]
 8009bc6:	da07      	bge.n	8009bd8 <__sfputc_r+0x1c>
 8009bc8:	6994      	ldr	r4, [r2, #24]
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	db01      	blt.n	8009bd2 <__sfputc_r+0x16>
 8009bce:	290a      	cmp	r1, #10
 8009bd0:	d102      	bne.n	8009bd8 <__sfputc_r+0x1c>
 8009bd2:	bc10      	pop	{r4}
 8009bd4:	f000 baf0 	b.w	800a1b8 <__swbuf_r>
 8009bd8:	6813      	ldr	r3, [r2, #0]
 8009bda:	1c58      	adds	r0, r3, #1
 8009bdc:	6010      	str	r0, [r2, #0]
 8009bde:	7019      	strb	r1, [r3, #0]
 8009be0:	4608      	mov	r0, r1
 8009be2:	bc10      	pop	{r4}
 8009be4:	4770      	bx	lr

08009be6 <__sfputs_r>:
 8009be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009be8:	4606      	mov	r6, r0
 8009bea:	460f      	mov	r7, r1
 8009bec:	4614      	mov	r4, r2
 8009bee:	18d5      	adds	r5, r2, r3
 8009bf0:	42ac      	cmp	r4, r5
 8009bf2:	d101      	bne.n	8009bf8 <__sfputs_r+0x12>
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	e007      	b.n	8009c08 <__sfputs_r+0x22>
 8009bf8:	463a      	mov	r2, r7
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c00:	f7ff ffdc 	bl	8009bbc <__sfputc_r>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d1f3      	bne.n	8009bf0 <__sfputs_r+0xa>
 8009c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c0c <_vfiprintf_r>:
 8009c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	460d      	mov	r5, r1
 8009c12:	4614      	mov	r4, r2
 8009c14:	4698      	mov	r8, r3
 8009c16:	4606      	mov	r6, r0
 8009c18:	b09d      	sub	sp, #116	; 0x74
 8009c1a:	b118      	cbz	r0, 8009c24 <_vfiprintf_r+0x18>
 8009c1c:	6983      	ldr	r3, [r0, #24]
 8009c1e:	b90b      	cbnz	r3, 8009c24 <_vfiprintf_r+0x18>
 8009c20:	f000 fca8 	bl	800a574 <__sinit>
 8009c24:	4b89      	ldr	r3, [pc, #548]	; (8009e4c <_vfiprintf_r+0x240>)
 8009c26:	429d      	cmp	r5, r3
 8009c28:	d11b      	bne.n	8009c62 <_vfiprintf_r+0x56>
 8009c2a:	6875      	ldr	r5, [r6, #4]
 8009c2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c2e:	07d9      	lsls	r1, r3, #31
 8009c30:	d405      	bmi.n	8009c3e <_vfiprintf_r+0x32>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	059a      	lsls	r2, r3, #22
 8009c36:	d402      	bmi.n	8009c3e <_vfiprintf_r+0x32>
 8009c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3a:	f000 fd39 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 8009c3e:	89ab      	ldrh	r3, [r5, #12]
 8009c40:	071b      	lsls	r3, r3, #28
 8009c42:	d501      	bpl.n	8009c48 <_vfiprintf_r+0x3c>
 8009c44:	692b      	ldr	r3, [r5, #16]
 8009c46:	b9eb      	cbnz	r3, 8009c84 <_vfiprintf_r+0x78>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f000 fb06 	bl	800a25c <__swsetup_r>
 8009c50:	b1c0      	cbz	r0, 8009c84 <_vfiprintf_r+0x78>
 8009c52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c54:	07dc      	lsls	r4, r3, #31
 8009c56:	d50e      	bpl.n	8009c76 <_vfiprintf_r+0x6a>
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	b01d      	add	sp, #116	; 0x74
 8009c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c62:	4b7b      	ldr	r3, [pc, #492]	; (8009e50 <_vfiprintf_r+0x244>)
 8009c64:	429d      	cmp	r5, r3
 8009c66:	d101      	bne.n	8009c6c <_vfiprintf_r+0x60>
 8009c68:	68b5      	ldr	r5, [r6, #8]
 8009c6a:	e7df      	b.n	8009c2c <_vfiprintf_r+0x20>
 8009c6c:	4b79      	ldr	r3, [pc, #484]	; (8009e54 <_vfiprintf_r+0x248>)
 8009c6e:	429d      	cmp	r5, r3
 8009c70:	bf08      	it	eq
 8009c72:	68f5      	ldreq	r5, [r6, #12]
 8009c74:	e7da      	b.n	8009c2c <_vfiprintf_r+0x20>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	0598      	lsls	r0, r3, #22
 8009c7a:	d4ed      	bmi.n	8009c58 <_vfiprintf_r+0x4c>
 8009c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c7e:	f000 fd18 	bl	800a6b2 <__retarget_lock_release_recursive>
 8009c82:	e7e9      	b.n	8009c58 <_vfiprintf_r+0x4c>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9309      	str	r3, [sp, #36]	; 0x24
 8009c88:	2320      	movs	r3, #32
 8009c8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c8e:	2330      	movs	r3, #48	; 0x30
 8009c90:	f04f 0901 	mov.w	r9, #1
 8009c94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e58 <_vfiprintf_r+0x24c>
 8009c9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ca0:	4623      	mov	r3, r4
 8009ca2:	469a      	mov	sl, r3
 8009ca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ca8:	b10a      	cbz	r2, 8009cae <_vfiprintf_r+0xa2>
 8009caa:	2a25      	cmp	r2, #37	; 0x25
 8009cac:	d1f9      	bne.n	8009ca2 <_vfiprintf_r+0x96>
 8009cae:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb2:	d00b      	beq.n	8009ccc <_vfiprintf_r+0xc0>
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	4629      	mov	r1, r5
 8009cba:	4630      	mov	r0, r6
 8009cbc:	f7ff ff93 	bl	8009be6 <__sfputs_r>
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f000 80aa 	beq.w	8009e1a <_vfiprintf_r+0x20e>
 8009cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc8:	445a      	add	r2, fp
 8009cca:	9209      	str	r2, [sp, #36]	; 0x24
 8009ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 80a2 	beq.w	8009e1a <_vfiprintf_r+0x20e>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce0:	f10a 0a01 	add.w	sl, sl, #1
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	9307      	str	r3, [sp, #28]
 8009ce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009cec:	931a      	str	r3, [sp, #104]	; 0x68
 8009cee:	4654      	mov	r4, sl
 8009cf0:	2205      	movs	r2, #5
 8009cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf6:	4858      	ldr	r0, [pc, #352]	; (8009e58 <_vfiprintf_r+0x24c>)
 8009cf8:	f000 fd42 	bl	800a780 <memchr>
 8009cfc:	9a04      	ldr	r2, [sp, #16]
 8009cfe:	b9d8      	cbnz	r0, 8009d38 <_vfiprintf_r+0x12c>
 8009d00:	06d1      	lsls	r1, r2, #27
 8009d02:	bf44      	itt	mi
 8009d04:	2320      	movmi	r3, #32
 8009d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d0a:	0713      	lsls	r3, r2, #28
 8009d0c:	bf44      	itt	mi
 8009d0e:	232b      	movmi	r3, #43	; 0x2b
 8009d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d14:	f89a 3000 	ldrb.w	r3, [sl]
 8009d18:	2b2a      	cmp	r3, #42	; 0x2a
 8009d1a:	d015      	beq.n	8009d48 <_vfiprintf_r+0x13c>
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	2000      	movs	r0, #0
 8009d20:	f04f 0c0a 	mov.w	ip, #10
 8009d24:	9a07      	ldr	r2, [sp, #28]
 8009d26:	4621      	mov	r1, r4
 8009d28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d2c:	3b30      	subs	r3, #48	; 0x30
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d94e      	bls.n	8009dd0 <_vfiprintf_r+0x1c4>
 8009d32:	b1b0      	cbz	r0, 8009d62 <_vfiprintf_r+0x156>
 8009d34:	9207      	str	r2, [sp, #28]
 8009d36:	e014      	b.n	8009d62 <_vfiprintf_r+0x156>
 8009d38:	eba0 0308 	sub.w	r3, r0, r8
 8009d3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009d40:	4313      	orrs	r3, r2
 8009d42:	46a2      	mov	sl, r4
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	e7d2      	b.n	8009cee <_vfiprintf_r+0xe2>
 8009d48:	9b03      	ldr	r3, [sp, #12]
 8009d4a:	1d19      	adds	r1, r3, #4
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	9103      	str	r1, [sp, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	bfbb      	ittet	lt
 8009d54:	425b      	neglt	r3, r3
 8009d56:	f042 0202 	orrlt.w	r2, r2, #2
 8009d5a:	9307      	strge	r3, [sp, #28]
 8009d5c:	9307      	strlt	r3, [sp, #28]
 8009d5e:	bfb8      	it	lt
 8009d60:	9204      	strlt	r2, [sp, #16]
 8009d62:	7823      	ldrb	r3, [r4, #0]
 8009d64:	2b2e      	cmp	r3, #46	; 0x2e
 8009d66:	d10c      	bne.n	8009d82 <_vfiprintf_r+0x176>
 8009d68:	7863      	ldrb	r3, [r4, #1]
 8009d6a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d6c:	d135      	bne.n	8009dda <_vfiprintf_r+0x1ce>
 8009d6e:	9b03      	ldr	r3, [sp, #12]
 8009d70:	3402      	adds	r4, #2
 8009d72:	1d1a      	adds	r2, r3, #4
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	9203      	str	r2, [sp, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	bfb8      	it	lt
 8009d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d80:	9305      	str	r3, [sp, #20]
 8009d82:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e5c <_vfiprintf_r+0x250>
 8009d86:	2203      	movs	r2, #3
 8009d88:	4650      	mov	r0, sl
 8009d8a:	7821      	ldrb	r1, [r4, #0]
 8009d8c:	f000 fcf8 	bl	800a780 <memchr>
 8009d90:	b140      	cbz	r0, 8009da4 <_vfiprintf_r+0x198>
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	eba0 000a 	sub.w	r0, r0, sl
 8009d98:	fa03 f000 	lsl.w	r0, r3, r0
 8009d9c:	9b04      	ldr	r3, [sp, #16]
 8009d9e:	3401      	adds	r4, #1
 8009da0:	4303      	orrs	r3, r0
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da8:	2206      	movs	r2, #6
 8009daa:	482d      	ldr	r0, [pc, #180]	; (8009e60 <_vfiprintf_r+0x254>)
 8009dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009db0:	f000 fce6 	bl	800a780 <memchr>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d03f      	beq.n	8009e38 <_vfiprintf_r+0x22c>
 8009db8:	4b2a      	ldr	r3, [pc, #168]	; (8009e64 <_vfiprintf_r+0x258>)
 8009dba:	bb1b      	cbnz	r3, 8009e04 <_vfiprintf_r+0x1f8>
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	3307      	adds	r3, #7
 8009dc0:	f023 0307 	bic.w	r3, r3, #7
 8009dc4:	3308      	adds	r3, #8
 8009dc6:	9303      	str	r3, [sp, #12]
 8009dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dca:	443b      	add	r3, r7
 8009dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dce:	e767      	b.n	8009ca0 <_vfiprintf_r+0x94>
 8009dd0:	460c      	mov	r4, r1
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd8:	e7a5      	b.n	8009d26 <_vfiprintf_r+0x11a>
 8009dda:	2300      	movs	r3, #0
 8009ddc:	f04f 0c0a 	mov.w	ip, #10
 8009de0:	4619      	mov	r1, r3
 8009de2:	3401      	adds	r4, #1
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	4620      	mov	r0, r4
 8009de8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dec:	3a30      	subs	r2, #48	; 0x30
 8009dee:	2a09      	cmp	r2, #9
 8009df0:	d903      	bls.n	8009dfa <_vfiprintf_r+0x1ee>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0c5      	beq.n	8009d82 <_vfiprintf_r+0x176>
 8009df6:	9105      	str	r1, [sp, #20]
 8009df8:	e7c3      	b.n	8009d82 <_vfiprintf_r+0x176>
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e02:	e7f0      	b.n	8009de6 <_vfiprintf_r+0x1da>
 8009e04:	ab03      	add	r3, sp, #12
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	462a      	mov	r2, r5
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <_vfiprintf_r+0x25c>)
 8009e0e:	a904      	add	r1, sp, #16
 8009e10:	f3af 8000 	nop.w
 8009e14:	4607      	mov	r7, r0
 8009e16:	1c78      	adds	r0, r7, #1
 8009e18:	d1d6      	bne.n	8009dc8 <_vfiprintf_r+0x1bc>
 8009e1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e1c:	07d9      	lsls	r1, r3, #31
 8009e1e:	d405      	bmi.n	8009e2c <_vfiprintf_r+0x220>
 8009e20:	89ab      	ldrh	r3, [r5, #12]
 8009e22:	059a      	lsls	r2, r3, #22
 8009e24:	d402      	bmi.n	8009e2c <_vfiprintf_r+0x220>
 8009e26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e28:	f000 fc43 	bl	800a6b2 <__retarget_lock_release_recursive>
 8009e2c:	89ab      	ldrh	r3, [r5, #12]
 8009e2e:	065b      	lsls	r3, r3, #25
 8009e30:	f53f af12 	bmi.w	8009c58 <_vfiprintf_r+0x4c>
 8009e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e36:	e711      	b.n	8009c5c <_vfiprintf_r+0x50>
 8009e38:	ab03      	add	r3, sp, #12
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	462a      	mov	r2, r5
 8009e3e:	4630      	mov	r0, r6
 8009e40:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <_vfiprintf_r+0x25c>)
 8009e42:	a904      	add	r1, sp, #16
 8009e44:	f000 f882 	bl	8009f4c <_printf_i>
 8009e48:	e7e4      	b.n	8009e14 <_vfiprintf_r+0x208>
 8009e4a:	bf00      	nop
 8009e4c:	0800b370 	.word	0x0800b370
 8009e50:	0800b390 	.word	0x0800b390
 8009e54:	0800b350 	.word	0x0800b350
 8009e58:	0800b31a 	.word	0x0800b31a
 8009e5c:	0800b320 	.word	0x0800b320
 8009e60:	0800b324 	.word	0x0800b324
 8009e64:	00000000 	.word	0x00000000
 8009e68:	08009be7 	.word	0x08009be7

08009e6c <_printf_common>:
 8009e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e70:	4616      	mov	r6, r2
 8009e72:	4699      	mov	r9, r3
 8009e74:	688a      	ldr	r2, [r1, #8]
 8009e76:	690b      	ldr	r3, [r1, #16]
 8009e78:	4607      	mov	r7, r0
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	bfb8      	it	lt
 8009e7e:	4613      	movlt	r3, r2
 8009e80:	6033      	str	r3, [r6, #0]
 8009e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e86:	460c      	mov	r4, r1
 8009e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e8c:	b10a      	cbz	r2, 8009e92 <_printf_common+0x26>
 8009e8e:	3301      	adds	r3, #1
 8009e90:	6033      	str	r3, [r6, #0]
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	0699      	lsls	r1, r3, #26
 8009e96:	bf42      	ittt	mi
 8009e98:	6833      	ldrmi	r3, [r6, #0]
 8009e9a:	3302      	addmi	r3, #2
 8009e9c:	6033      	strmi	r3, [r6, #0]
 8009e9e:	6825      	ldr	r5, [r4, #0]
 8009ea0:	f015 0506 	ands.w	r5, r5, #6
 8009ea4:	d106      	bne.n	8009eb4 <_printf_common+0x48>
 8009ea6:	f104 0a19 	add.w	sl, r4, #25
 8009eaa:	68e3      	ldr	r3, [r4, #12]
 8009eac:	6832      	ldr	r2, [r6, #0]
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	42ab      	cmp	r3, r5
 8009eb2:	dc28      	bgt.n	8009f06 <_printf_common+0x9a>
 8009eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009eb8:	1e13      	subs	r3, r2, #0
 8009eba:	6822      	ldr	r2, [r4, #0]
 8009ebc:	bf18      	it	ne
 8009ebe:	2301      	movne	r3, #1
 8009ec0:	0692      	lsls	r2, r2, #26
 8009ec2:	d42d      	bmi.n	8009f20 <_printf_common+0xb4>
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ecc:	47c0      	blx	r8
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d020      	beq.n	8009f14 <_printf_common+0xa8>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	68e5      	ldr	r5, [r4, #12]
 8009ed6:	f003 0306 	and.w	r3, r3, #6
 8009eda:	2b04      	cmp	r3, #4
 8009edc:	bf18      	it	ne
 8009ede:	2500      	movne	r5, #0
 8009ee0:	6832      	ldr	r2, [r6, #0]
 8009ee2:	f04f 0600 	mov.w	r6, #0
 8009ee6:	68a3      	ldr	r3, [r4, #8]
 8009ee8:	bf08      	it	eq
 8009eea:	1aad      	subeq	r5, r5, r2
 8009eec:	6922      	ldr	r2, [r4, #16]
 8009eee:	bf08      	it	eq
 8009ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	bfc4      	itt	gt
 8009ef8:	1a9b      	subgt	r3, r3, r2
 8009efa:	18ed      	addgt	r5, r5, r3
 8009efc:	341a      	adds	r4, #26
 8009efe:	42b5      	cmp	r5, r6
 8009f00:	d11a      	bne.n	8009f38 <_printf_common+0xcc>
 8009f02:	2000      	movs	r0, #0
 8009f04:	e008      	b.n	8009f18 <_printf_common+0xac>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	4638      	mov	r0, r7
 8009f0e:	47c0      	blx	r8
 8009f10:	3001      	adds	r0, #1
 8009f12:	d103      	bne.n	8009f1c <_printf_common+0xb0>
 8009f14:	f04f 30ff 	mov.w	r0, #4294967295
 8009f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	e7c4      	b.n	8009eaa <_printf_common+0x3e>
 8009f20:	2030      	movs	r0, #48	; 0x30
 8009f22:	18e1      	adds	r1, r4, r3
 8009f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f2e:	4422      	add	r2, r4
 8009f30:	3302      	adds	r3, #2
 8009f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f36:	e7c5      	b.n	8009ec4 <_printf_common+0x58>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	4638      	mov	r0, r7
 8009f40:	47c0      	blx	r8
 8009f42:	3001      	adds	r0, #1
 8009f44:	d0e6      	beq.n	8009f14 <_printf_common+0xa8>
 8009f46:	3601      	adds	r6, #1
 8009f48:	e7d9      	b.n	8009efe <_printf_common+0x92>
	...

08009f4c <_printf_i>:
 8009f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	7e0f      	ldrb	r7, [r1, #24]
 8009f52:	4691      	mov	r9, r2
 8009f54:	2f78      	cmp	r7, #120	; 0x78
 8009f56:	4680      	mov	r8, r0
 8009f58:	460c      	mov	r4, r1
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f62:	d807      	bhi.n	8009f74 <_printf_i+0x28>
 8009f64:	2f62      	cmp	r7, #98	; 0x62
 8009f66:	d80a      	bhi.n	8009f7e <_printf_i+0x32>
 8009f68:	2f00      	cmp	r7, #0
 8009f6a:	f000 80d9 	beq.w	800a120 <_printf_i+0x1d4>
 8009f6e:	2f58      	cmp	r7, #88	; 0x58
 8009f70:	f000 80a4 	beq.w	800a0bc <_printf_i+0x170>
 8009f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f7c:	e03a      	b.n	8009ff4 <_printf_i+0xa8>
 8009f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f82:	2b15      	cmp	r3, #21
 8009f84:	d8f6      	bhi.n	8009f74 <_printf_i+0x28>
 8009f86:	a101      	add	r1, pc, #4	; (adr r1, 8009f8c <_printf_i+0x40>)
 8009f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f8c:	08009fe5 	.word	0x08009fe5
 8009f90:	08009ff9 	.word	0x08009ff9
 8009f94:	08009f75 	.word	0x08009f75
 8009f98:	08009f75 	.word	0x08009f75
 8009f9c:	08009f75 	.word	0x08009f75
 8009fa0:	08009f75 	.word	0x08009f75
 8009fa4:	08009ff9 	.word	0x08009ff9
 8009fa8:	08009f75 	.word	0x08009f75
 8009fac:	08009f75 	.word	0x08009f75
 8009fb0:	08009f75 	.word	0x08009f75
 8009fb4:	08009f75 	.word	0x08009f75
 8009fb8:	0800a107 	.word	0x0800a107
 8009fbc:	0800a029 	.word	0x0800a029
 8009fc0:	0800a0e9 	.word	0x0800a0e9
 8009fc4:	08009f75 	.word	0x08009f75
 8009fc8:	08009f75 	.word	0x08009f75
 8009fcc:	0800a129 	.word	0x0800a129
 8009fd0:	08009f75 	.word	0x08009f75
 8009fd4:	0800a029 	.word	0x0800a029
 8009fd8:	08009f75 	.word	0x08009f75
 8009fdc:	08009f75 	.word	0x08009f75
 8009fe0:	0800a0f1 	.word	0x0800a0f1
 8009fe4:	682b      	ldr	r3, [r5, #0]
 8009fe6:	1d1a      	adds	r2, r3, #4
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	602a      	str	r2, [r5, #0]
 8009fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e0a4      	b.n	800a142 <_printf_i+0x1f6>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	6829      	ldr	r1, [r5, #0]
 8009ffc:	0606      	lsls	r6, r0, #24
 8009ffe:	f101 0304 	add.w	r3, r1, #4
 800a002:	d50a      	bpl.n	800a01a <_printf_i+0xce>
 800a004:	680e      	ldr	r6, [r1, #0]
 800a006:	602b      	str	r3, [r5, #0]
 800a008:	2e00      	cmp	r6, #0
 800a00a:	da03      	bge.n	800a014 <_printf_i+0xc8>
 800a00c:	232d      	movs	r3, #45	; 0x2d
 800a00e:	4276      	negs	r6, r6
 800a010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a014:	230a      	movs	r3, #10
 800a016:	485e      	ldr	r0, [pc, #376]	; (800a190 <_printf_i+0x244>)
 800a018:	e019      	b.n	800a04e <_printf_i+0x102>
 800a01a:	680e      	ldr	r6, [r1, #0]
 800a01c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a020:	602b      	str	r3, [r5, #0]
 800a022:	bf18      	it	ne
 800a024:	b236      	sxthne	r6, r6
 800a026:	e7ef      	b.n	800a008 <_printf_i+0xbc>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	6820      	ldr	r0, [r4, #0]
 800a02c:	1d19      	adds	r1, r3, #4
 800a02e:	6029      	str	r1, [r5, #0]
 800a030:	0601      	lsls	r1, r0, #24
 800a032:	d501      	bpl.n	800a038 <_printf_i+0xec>
 800a034:	681e      	ldr	r6, [r3, #0]
 800a036:	e002      	b.n	800a03e <_printf_i+0xf2>
 800a038:	0646      	lsls	r6, r0, #25
 800a03a:	d5fb      	bpl.n	800a034 <_printf_i+0xe8>
 800a03c:	881e      	ldrh	r6, [r3, #0]
 800a03e:	2f6f      	cmp	r7, #111	; 0x6f
 800a040:	bf0c      	ite	eq
 800a042:	2308      	moveq	r3, #8
 800a044:	230a      	movne	r3, #10
 800a046:	4852      	ldr	r0, [pc, #328]	; (800a190 <_printf_i+0x244>)
 800a048:	2100      	movs	r1, #0
 800a04a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a04e:	6865      	ldr	r5, [r4, #4]
 800a050:	2d00      	cmp	r5, #0
 800a052:	bfa8      	it	ge
 800a054:	6821      	ldrge	r1, [r4, #0]
 800a056:	60a5      	str	r5, [r4, #8]
 800a058:	bfa4      	itt	ge
 800a05a:	f021 0104 	bicge.w	r1, r1, #4
 800a05e:	6021      	strge	r1, [r4, #0]
 800a060:	b90e      	cbnz	r6, 800a066 <_printf_i+0x11a>
 800a062:	2d00      	cmp	r5, #0
 800a064:	d04d      	beq.n	800a102 <_printf_i+0x1b6>
 800a066:	4615      	mov	r5, r2
 800a068:	fbb6 f1f3 	udiv	r1, r6, r3
 800a06c:	fb03 6711 	mls	r7, r3, r1, r6
 800a070:	5dc7      	ldrb	r7, [r0, r7]
 800a072:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a076:	4637      	mov	r7, r6
 800a078:	42bb      	cmp	r3, r7
 800a07a:	460e      	mov	r6, r1
 800a07c:	d9f4      	bls.n	800a068 <_printf_i+0x11c>
 800a07e:	2b08      	cmp	r3, #8
 800a080:	d10b      	bne.n	800a09a <_printf_i+0x14e>
 800a082:	6823      	ldr	r3, [r4, #0]
 800a084:	07de      	lsls	r6, r3, #31
 800a086:	d508      	bpl.n	800a09a <_printf_i+0x14e>
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	6861      	ldr	r1, [r4, #4]
 800a08c:	4299      	cmp	r1, r3
 800a08e:	bfde      	ittt	le
 800a090:	2330      	movle	r3, #48	; 0x30
 800a092:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a096:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a09a:	1b52      	subs	r2, r2, r5
 800a09c:	6122      	str	r2, [r4, #16]
 800a09e:	464b      	mov	r3, r9
 800a0a0:	4621      	mov	r1, r4
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	f8cd a000 	str.w	sl, [sp]
 800a0a8:	aa03      	add	r2, sp, #12
 800a0aa:	f7ff fedf 	bl	8009e6c <_printf_common>
 800a0ae:	3001      	adds	r0, #1
 800a0b0:	d14c      	bne.n	800a14c <_printf_i+0x200>
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	b004      	add	sp, #16
 800a0b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0bc:	4834      	ldr	r0, [pc, #208]	; (800a190 <_printf_i+0x244>)
 800a0be:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0c2:	6829      	ldr	r1, [r5, #0]
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0ca:	6029      	str	r1, [r5, #0]
 800a0cc:	061d      	lsls	r5, r3, #24
 800a0ce:	d514      	bpl.n	800a0fa <_printf_i+0x1ae>
 800a0d0:	07df      	lsls	r7, r3, #31
 800a0d2:	bf44      	itt	mi
 800a0d4:	f043 0320 	orrmi.w	r3, r3, #32
 800a0d8:	6023      	strmi	r3, [r4, #0]
 800a0da:	b91e      	cbnz	r6, 800a0e4 <_printf_i+0x198>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	f023 0320 	bic.w	r3, r3, #32
 800a0e2:	6023      	str	r3, [r4, #0]
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	e7af      	b.n	800a048 <_printf_i+0xfc>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	f043 0320 	orr.w	r3, r3, #32
 800a0ee:	6023      	str	r3, [r4, #0]
 800a0f0:	2378      	movs	r3, #120	; 0x78
 800a0f2:	4828      	ldr	r0, [pc, #160]	; (800a194 <_printf_i+0x248>)
 800a0f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0f8:	e7e3      	b.n	800a0c2 <_printf_i+0x176>
 800a0fa:	0659      	lsls	r1, r3, #25
 800a0fc:	bf48      	it	mi
 800a0fe:	b2b6      	uxthmi	r6, r6
 800a100:	e7e6      	b.n	800a0d0 <_printf_i+0x184>
 800a102:	4615      	mov	r5, r2
 800a104:	e7bb      	b.n	800a07e <_printf_i+0x132>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	6826      	ldr	r6, [r4, #0]
 800a10a:	1d18      	adds	r0, r3, #4
 800a10c:	6961      	ldr	r1, [r4, #20]
 800a10e:	6028      	str	r0, [r5, #0]
 800a110:	0635      	lsls	r5, r6, #24
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	d501      	bpl.n	800a11a <_printf_i+0x1ce>
 800a116:	6019      	str	r1, [r3, #0]
 800a118:	e002      	b.n	800a120 <_printf_i+0x1d4>
 800a11a:	0670      	lsls	r0, r6, #25
 800a11c:	d5fb      	bpl.n	800a116 <_printf_i+0x1ca>
 800a11e:	8019      	strh	r1, [r3, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	4615      	mov	r5, r2
 800a124:	6123      	str	r3, [r4, #16]
 800a126:	e7ba      	b.n	800a09e <_printf_i+0x152>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	2100      	movs	r1, #0
 800a12c:	1d1a      	adds	r2, r3, #4
 800a12e:	602a      	str	r2, [r5, #0]
 800a130:	681d      	ldr	r5, [r3, #0]
 800a132:	6862      	ldr	r2, [r4, #4]
 800a134:	4628      	mov	r0, r5
 800a136:	f000 fb23 	bl	800a780 <memchr>
 800a13a:	b108      	cbz	r0, 800a140 <_printf_i+0x1f4>
 800a13c:	1b40      	subs	r0, r0, r5
 800a13e:	6060      	str	r0, [r4, #4]
 800a140:	6863      	ldr	r3, [r4, #4]
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	2300      	movs	r3, #0
 800a146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a14a:	e7a8      	b.n	800a09e <_printf_i+0x152>
 800a14c:	462a      	mov	r2, r5
 800a14e:	4649      	mov	r1, r9
 800a150:	4640      	mov	r0, r8
 800a152:	6923      	ldr	r3, [r4, #16]
 800a154:	47d0      	blx	sl
 800a156:	3001      	adds	r0, #1
 800a158:	d0ab      	beq.n	800a0b2 <_printf_i+0x166>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	079b      	lsls	r3, r3, #30
 800a15e:	d413      	bmi.n	800a188 <_printf_i+0x23c>
 800a160:	68e0      	ldr	r0, [r4, #12]
 800a162:	9b03      	ldr	r3, [sp, #12]
 800a164:	4298      	cmp	r0, r3
 800a166:	bfb8      	it	lt
 800a168:	4618      	movlt	r0, r3
 800a16a:	e7a4      	b.n	800a0b6 <_printf_i+0x16a>
 800a16c:	2301      	movs	r3, #1
 800a16e:	4632      	mov	r2, r6
 800a170:	4649      	mov	r1, r9
 800a172:	4640      	mov	r0, r8
 800a174:	47d0      	blx	sl
 800a176:	3001      	adds	r0, #1
 800a178:	d09b      	beq.n	800a0b2 <_printf_i+0x166>
 800a17a:	3501      	adds	r5, #1
 800a17c:	68e3      	ldr	r3, [r4, #12]
 800a17e:	9903      	ldr	r1, [sp, #12]
 800a180:	1a5b      	subs	r3, r3, r1
 800a182:	42ab      	cmp	r3, r5
 800a184:	dcf2      	bgt.n	800a16c <_printf_i+0x220>
 800a186:	e7eb      	b.n	800a160 <_printf_i+0x214>
 800a188:	2500      	movs	r5, #0
 800a18a:	f104 0619 	add.w	r6, r4, #25
 800a18e:	e7f5      	b.n	800a17c <_printf_i+0x230>
 800a190:	0800b32b 	.word	0x0800b32b
 800a194:	0800b33c 	.word	0x0800b33c

0800a198 <_sbrk_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	2300      	movs	r3, #0
 800a19c:	4d05      	ldr	r5, [pc, #20]	; (800a1b4 <_sbrk_r+0x1c>)
 800a19e:	4604      	mov	r4, r0
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	f7f8 fd56 	bl	8002c54 <_sbrk>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d102      	bne.n	800a1b2 <_sbrk_r+0x1a>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	b103      	cbz	r3, 800a1b2 <_sbrk_r+0x1a>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	200015c0 	.word	0x200015c0

0800a1b8 <__swbuf_r>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	460e      	mov	r6, r1
 800a1bc:	4614      	mov	r4, r2
 800a1be:	4605      	mov	r5, r0
 800a1c0:	b118      	cbz	r0, 800a1ca <__swbuf_r+0x12>
 800a1c2:	6983      	ldr	r3, [r0, #24]
 800a1c4:	b90b      	cbnz	r3, 800a1ca <__swbuf_r+0x12>
 800a1c6:	f000 f9d5 	bl	800a574 <__sinit>
 800a1ca:	4b21      	ldr	r3, [pc, #132]	; (800a250 <__swbuf_r+0x98>)
 800a1cc:	429c      	cmp	r4, r3
 800a1ce:	d12b      	bne.n	800a228 <__swbuf_r+0x70>
 800a1d0:	686c      	ldr	r4, [r5, #4]
 800a1d2:	69a3      	ldr	r3, [r4, #24]
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	89a3      	ldrh	r3, [r4, #12]
 800a1d8:	071a      	lsls	r2, r3, #28
 800a1da:	d52f      	bpl.n	800a23c <__swbuf_r+0x84>
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	b36b      	cbz	r3, 800a23c <__swbuf_r+0x84>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	6820      	ldr	r0, [r4, #0]
 800a1e4:	b2f6      	uxtb	r6, r6
 800a1e6:	1ac0      	subs	r0, r0, r3
 800a1e8:	6963      	ldr	r3, [r4, #20]
 800a1ea:	4637      	mov	r7, r6
 800a1ec:	4283      	cmp	r3, r0
 800a1ee:	dc04      	bgt.n	800a1fa <__swbuf_r+0x42>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 f92a 	bl	800a44c <_fflush_r>
 800a1f8:	bb30      	cbnz	r0, 800a248 <__swbuf_r+0x90>
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	3b01      	subs	r3, #1
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	6022      	str	r2, [r4, #0]
 800a208:	701e      	strb	r6, [r3, #0]
 800a20a:	6963      	ldr	r3, [r4, #20]
 800a20c:	4283      	cmp	r3, r0
 800a20e:	d004      	beq.n	800a21a <__swbuf_r+0x62>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	07db      	lsls	r3, r3, #31
 800a214:	d506      	bpl.n	800a224 <__swbuf_r+0x6c>
 800a216:	2e0a      	cmp	r6, #10
 800a218:	d104      	bne.n	800a224 <__swbuf_r+0x6c>
 800a21a:	4621      	mov	r1, r4
 800a21c:	4628      	mov	r0, r5
 800a21e:	f000 f915 	bl	800a44c <_fflush_r>
 800a222:	b988      	cbnz	r0, 800a248 <__swbuf_r+0x90>
 800a224:	4638      	mov	r0, r7
 800a226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a228:	4b0a      	ldr	r3, [pc, #40]	; (800a254 <__swbuf_r+0x9c>)
 800a22a:	429c      	cmp	r4, r3
 800a22c:	d101      	bne.n	800a232 <__swbuf_r+0x7a>
 800a22e:	68ac      	ldr	r4, [r5, #8]
 800a230:	e7cf      	b.n	800a1d2 <__swbuf_r+0x1a>
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <__swbuf_r+0xa0>)
 800a234:	429c      	cmp	r4, r3
 800a236:	bf08      	it	eq
 800a238:	68ec      	ldreq	r4, [r5, #12]
 800a23a:	e7ca      	b.n	800a1d2 <__swbuf_r+0x1a>
 800a23c:	4621      	mov	r1, r4
 800a23e:	4628      	mov	r0, r5
 800a240:	f000 f80c 	bl	800a25c <__swsetup_r>
 800a244:	2800      	cmp	r0, #0
 800a246:	d0cb      	beq.n	800a1e0 <__swbuf_r+0x28>
 800a248:	f04f 37ff 	mov.w	r7, #4294967295
 800a24c:	e7ea      	b.n	800a224 <__swbuf_r+0x6c>
 800a24e:	bf00      	nop
 800a250:	0800b370 	.word	0x0800b370
 800a254:	0800b390 	.word	0x0800b390
 800a258:	0800b350 	.word	0x0800b350

0800a25c <__swsetup_r>:
 800a25c:	4b32      	ldr	r3, [pc, #200]	; (800a328 <__swsetup_r+0xcc>)
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	681d      	ldr	r5, [r3, #0]
 800a262:	4606      	mov	r6, r0
 800a264:	460c      	mov	r4, r1
 800a266:	b125      	cbz	r5, 800a272 <__swsetup_r+0x16>
 800a268:	69ab      	ldr	r3, [r5, #24]
 800a26a:	b913      	cbnz	r3, 800a272 <__swsetup_r+0x16>
 800a26c:	4628      	mov	r0, r5
 800a26e:	f000 f981 	bl	800a574 <__sinit>
 800a272:	4b2e      	ldr	r3, [pc, #184]	; (800a32c <__swsetup_r+0xd0>)
 800a274:	429c      	cmp	r4, r3
 800a276:	d10f      	bne.n	800a298 <__swsetup_r+0x3c>
 800a278:	686c      	ldr	r4, [r5, #4]
 800a27a:	89a3      	ldrh	r3, [r4, #12]
 800a27c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a280:	0719      	lsls	r1, r3, #28
 800a282:	d42c      	bmi.n	800a2de <__swsetup_r+0x82>
 800a284:	06dd      	lsls	r5, r3, #27
 800a286:	d411      	bmi.n	800a2ac <__swsetup_r+0x50>
 800a288:	2309      	movs	r3, #9
 800a28a:	6033      	str	r3, [r6, #0]
 800a28c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a290:	f04f 30ff 	mov.w	r0, #4294967295
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	e03e      	b.n	800a316 <__swsetup_r+0xba>
 800a298:	4b25      	ldr	r3, [pc, #148]	; (800a330 <__swsetup_r+0xd4>)
 800a29a:	429c      	cmp	r4, r3
 800a29c:	d101      	bne.n	800a2a2 <__swsetup_r+0x46>
 800a29e:	68ac      	ldr	r4, [r5, #8]
 800a2a0:	e7eb      	b.n	800a27a <__swsetup_r+0x1e>
 800a2a2:	4b24      	ldr	r3, [pc, #144]	; (800a334 <__swsetup_r+0xd8>)
 800a2a4:	429c      	cmp	r4, r3
 800a2a6:	bf08      	it	eq
 800a2a8:	68ec      	ldreq	r4, [r5, #12]
 800a2aa:	e7e6      	b.n	800a27a <__swsetup_r+0x1e>
 800a2ac:	0758      	lsls	r0, r3, #29
 800a2ae:	d512      	bpl.n	800a2d6 <__swsetup_r+0x7a>
 800a2b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b2:	b141      	cbz	r1, 800a2c6 <__swsetup_r+0x6a>
 800a2b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2b8:	4299      	cmp	r1, r3
 800a2ba:	d002      	beq.n	800a2c2 <__swsetup_r+0x66>
 800a2bc:	4630      	mov	r0, r6
 800a2be:	f7ff fba1 	bl	8009a04 <_free_r>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a2c6:	89a3      	ldrh	r3, [r4, #12]
 800a2c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	6063      	str	r3, [r4, #4]
 800a2d2:	6923      	ldr	r3, [r4, #16]
 800a2d4:	6023      	str	r3, [r4, #0]
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f043 0308 	orr.w	r3, r3, #8
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	6923      	ldr	r3, [r4, #16]
 800a2e0:	b94b      	cbnz	r3, 800a2f6 <__swsetup_r+0x9a>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ec:	d003      	beq.n	800a2f6 <__swsetup_r+0x9a>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f000 fa05 	bl	800a700 <__smakebuf_r>
 800a2f6:	89a0      	ldrh	r0, [r4, #12]
 800a2f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2fc:	f010 0301 	ands.w	r3, r0, #1
 800a300:	d00a      	beq.n	800a318 <__swsetup_r+0xbc>
 800a302:	2300      	movs	r3, #0
 800a304:	60a3      	str	r3, [r4, #8]
 800a306:	6963      	ldr	r3, [r4, #20]
 800a308:	425b      	negs	r3, r3
 800a30a:	61a3      	str	r3, [r4, #24]
 800a30c:	6923      	ldr	r3, [r4, #16]
 800a30e:	b943      	cbnz	r3, 800a322 <__swsetup_r+0xc6>
 800a310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a314:	d1ba      	bne.n	800a28c <__swsetup_r+0x30>
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	0781      	lsls	r1, r0, #30
 800a31a:	bf58      	it	pl
 800a31c:	6963      	ldrpl	r3, [r4, #20]
 800a31e:	60a3      	str	r3, [r4, #8]
 800a320:	e7f4      	b.n	800a30c <__swsetup_r+0xb0>
 800a322:	2000      	movs	r0, #0
 800a324:	e7f7      	b.n	800a316 <__swsetup_r+0xba>
 800a326:	bf00      	nop
 800a328:	2000001c 	.word	0x2000001c
 800a32c:	0800b370 	.word	0x0800b370
 800a330:	0800b390 	.word	0x0800b390
 800a334:	0800b350 	.word	0x0800b350

0800a338 <abort>:
 800a338:	2006      	movs	r0, #6
 800a33a:	b508      	push	{r3, lr}
 800a33c:	f000 fa62 	bl	800a804 <raise>
 800a340:	2001      	movs	r0, #1
 800a342:	f7f8 fc14 	bl	8002b6e <_exit>
	...

0800a348 <__sflush_r>:
 800a348:	898a      	ldrh	r2, [r1, #12]
 800a34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34c:	4605      	mov	r5, r0
 800a34e:	0710      	lsls	r0, r2, #28
 800a350:	460c      	mov	r4, r1
 800a352:	d457      	bmi.n	800a404 <__sflush_r+0xbc>
 800a354:	684b      	ldr	r3, [r1, #4]
 800a356:	2b00      	cmp	r3, #0
 800a358:	dc04      	bgt.n	800a364 <__sflush_r+0x1c>
 800a35a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dc01      	bgt.n	800a364 <__sflush_r+0x1c>
 800a360:	2000      	movs	r0, #0
 800a362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a366:	2e00      	cmp	r6, #0
 800a368:	d0fa      	beq.n	800a360 <__sflush_r+0x18>
 800a36a:	2300      	movs	r3, #0
 800a36c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a370:	682f      	ldr	r7, [r5, #0]
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	d032      	beq.n	800a3dc <__sflush_r+0x94>
 800a376:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	075a      	lsls	r2, r3, #29
 800a37c:	d505      	bpl.n	800a38a <__sflush_r+0x42>
 800a37e:	6863      	ldr	r3, [r4, #4]
 800a380:	1ac0      	subs	r0, r0, r3
 800a382:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a384:	b10b      	cbz	r3, 800a38a <__sflush_r+0x42>
 800a386:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a388:	1ac0      	subs	r0, r0, r3
 800a38a:	2300      	movs	r3, #0
 800a38c:	4602      	mov	r2, r0
 800a38e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a390:	4628      	mov	r0, r5
 800a392:	6a21      	ldr	r1, [r4, #32]
 800a394:	47b0      	blx	r6
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	d106      	bne.n	800a3aa <__sflush_r+0x62>
 800a39c:	6829      	ldr	r1, [r5, #0]
 800a39e:	291d      	cmp	r1, #29
 800a3a0:	d82c      	bhi.n	800a3fc <__sflush_r+0xb4>
 800a3a2:	4a29      	ldr	r2, [pc, #164]	; (800a448 <__sflush_r+0x100>)
 800a3a4:	40ca      	lsrs	r2, r1
 800a3a6:	07d6      	lsls	r6, r2, #31
 800a3a8:	d528      	bpl.n	800a3fc <__sflush_r+0xb4>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	6062      	str	r2, [r4, #4]
 800a3ae:	6922      	ldr	r2, [r4, #16]
 800a3b0:	04d9      	lsls	r1, r3, #19
 800a3b2:	6022      	str	r2, [r4, #0]
 800a3b4:	d504      	bpl.n	800a3c0 <__sflush_r+0x78>
 800a3b6:	1c42      	adds	r2, r0, #1
 800a3b8:	d101      	bne.n	800a3be <__sflush_r+0x76>
 800a3ba:	682b      	ldr	r3, [r5, #0]
 800a3bc:	b903      	cbnz	r3, 800a3c0 <__sflush_r+0x78>
 800a3be:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3c2:	602f      	str	r7, [r5, #0]
 800a3c4:	2900      	cmp	r1, #0
 800a3c6:	d0cb      	beq.n	800a360 <__sflush_r+0x18>
 800a3c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3cc:	4299      	cmp	r1, r3
 800a3ce:	d002      	beq.n	800a3d6 <__sflush_r+0x8e>
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	f7ff fb17 	bl	8009a04 <_free_r>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3da:	e7c2      	b.n	800a362 <__sflush_r+0x1a>
 800a3dc:	6a21      	ldr	r1, [r4, #32]
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b0      	blx	r6
 800a3e4:	1c41      	adds	r1, r0, #1
 800a3e6:	d1c7      	bne.n	800a378 <__sflush_r+0x30>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d0c4      	beq.n	800a378 <__sflush_r+0x30>
 800a3ee:	2b1d      	cmp	r3, #29
 800a3f0:	d001      	beq.n	800a3f6 <__sflush_r+0xae>
 800a3f2:	2b16      	cmp	r3, #22
 800a3f4:	d101      	bne.n	800a3fa <__sflush_r+0xb2>
 800a3f6:	602f      	str	r7, [r5, #0]
 800a3f8:	e7b2      	b.n	800a360 <__sflush_r+0x18>
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	e7ae      	b.n	800a362 <__sflush_r+0x1a>
 800a404:	690f      	ldr	r7, [r1, #16]
 800a406:	2f00      	cmp	r7, #0
 800a408:	d0aa      	beq.n	800a360 <__sflush_r+0x18>
 800a40a:	0793      	lsls	r3, r2, #30
 800a40c:	bf18      	it	ne
 800a40e:	2300      	movne	r3, #0
 800a410:	680e      	ldr	r6, [r1, #0]
 800a412:	bf08      	it	eq
 800a414:	694b      	ldreq	r3, [r1, #20]
 800a416:	1bf6      	subs	r6, r6, r7
 800a418:	600f      	str	r7, [r1, #0]
 800a41a:	608b      	str	r3, [r1, #8]
 800a41c:	2e00      	cmp	r6, #0
 800a41e:	dd9f      	ble.n	800a360 <__sflush_r+0x18>
 800a420:	4633      	mov	r3, r6
 800a422:	463a      	mov	r2, r7
 800a424:	4628      	mov	r0, r5
 800a426:	6a21      	ldr	r1, [r4, #32]
 800a428:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a42c:	47e0      	blx	ip
 800a42e:	2800      	cmp	r0, #0
 800a430:	dc06      	bgt.n	800a440 <__sflush_r+0xf8>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295
 800a438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a43c:	81a3      	strh	r3, [r4, #12]
 800a43e:	e790      	b.n	800a362 <__sflush_r+0x1a>
 800a440:	4407      	add	r7, r0
 800a442:	1a36      	subs	r6, r6, r0
 800a444:	e7ea      	b.n	800a41c <__sflush_r+0xd4>
 800a446:	bf00      	nop
 800a448:	20400001 	.word	0x20400001

0800a44c <_fflush_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	690b      	ldr	r3, [r1, #16]
 800a450:	4605      	mov	r5, r0
 800a452:	460c      	mov	r4, r1
 800a454:	b913      	cbnz	r3, 800a45c <_fflush_r+0x10>
 800a456:	2500      	movs	r5, #0
 800a458:	4628      	mov	r0, r5
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	b118      	cbz	r0, 800a466 <_fflush_r+0x1a>
 800a45e:	6983      	ldr	r3, [r0, #24]
 800a460:	b90b      	cbnz	r3, 800a466 <_fflush_r+0x1a>
 800a462:	f000 f887 	bl	800a574 <__sinit>
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <_fflush_r+0x6c>)
 800a468:	429c      	cmp	r4, r3
 800a46a:	d11b      	bne.n	800a4a4 <_fflush_r+0x58>
 800a46c:	686c      	ldr	r4, [r5, #4]
 800a46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0ef      	beq.n	800a456 <_fflush_r+0xa>
 800a476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a478:	07d0      	lsls	r0, r2, #31
 800a47a:	d404      	bmi.n	800a486 <_fflush_r+0x3a>
 800a47c:	0599      	lsls	r1, r3, #22
 800a47e:	d402      	bmi.n	800a486 <_fflush_r+0x3a>
 800a480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a482:	f000 f915 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 800a486:	4628      	mov	r0, r5
 800a488:	4621      	mov	r1, r4
 800a48a:	f7ff ff5d 	bl	800a348 <__sflush_r>
 800a48e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a490:	4605      	mov	r5, r0
 800a492:	07da      	lsls	r2, r3, #31
 800a494:	d4e0      	bmi.n	800a458 <_fflush_r+0xc>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	059b      	lsls	r3, r3, #22
 800a49a:	d4dd      	bmi.n	800a458 <_fflush_r+0xc>
 800a49c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49e:	f000 f908 	bl	800a6b2 <__retarget_lock_release_recursive>
 800a4a2:	e7d9      	b.n	800a458 <_fflush_r+0xc>
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <_fflush_r+0x70>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	d101      	bne.n	800a4ae <_fflush_r+0x62>
 800a4aa:	68ac      	ldr	r4, [r5, #8]
 800a4ac:	e7df      	b.n	800a46e <_fflush_r+0x22>
 800a4ae:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <_fflush_r+0x74>)
 800a4b0:	429c      	cmp	r4, r3
 800a4b2:	bf08      	it	eq
 800a4b4:	68ec      	ldreq	r4, [r5, #12]
 800a4b6:	e7da      	b.n	800a46e <_fflush_r+0x22>
 800a4b8:	0800b370 	.word	0x0800b370
 800a4bc:	0800b390 	.word	0x0800b390
 800a4c0:	0800b350 	.word	0x0800b350

0800a4c4 <std>:
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	b510      	push	{r4, lr}
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	e9c0 3300 	strd	r3, r3, [r0]
 800a4ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4d2:	6083      	str	r3, [r0, #8]
 800a4d4:	8181      	strh	r1, [r0, #12]
 800a4d6:	6643      	str	r3, [r0, #100]	; 0x64
 800a4d8:	81c2      	strh	r2, [r0, #14]
 800a4da:	6183      	str	r3, [r0, #24]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	2208      	movs	r2, #8
 800a4e0:	305c      	adds	r0, #92	; 0x5c
 800a4e2:	f7ff fa11 	bl	8009908 <memset>
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <std+0x38>)
 800a4e8:	6224      	str	r4, [r4, #32]
 800a4ea:	6263      	str	r3, [r4, #36]	; 0x24
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <std+0x3c>)
 800a4ee:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <std+0x40>)
 800a4f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <std+0x44>)
 800a4f6:	6323      	str	r3, [r4, #48]	; 0x30
 800a4f8:	bd10      	pop	{r4, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800a83d 	.word	0x0800a83d
 800a500:	0800a85f 	.word	0x0800a85f
 800a504:	0800a897 	.word	0x0800a897
 800a508:	0800a8bb 	.word	0x0800a8bb

0800a50c <_cleanup_r>:
 800a50c:	4901      	ldr	r1, [pc, #4]	; (800a514 <_cleanup_r+0x8>)
 800a50e:	f000 b8af 	b.w	800a670 <_fwalk_reent>
 800a512:	bf00      	nop
 800a514:	0800a44d 	.word	0x0800a44d

0800a518 <__sfmoreglue>:
 800a518:	2268      	movs	r2, #104	; 0x68
 800a51a:	b570      	push	{r4, r5, r6, lr}
 800a51c:	1e4d      	subs	r5, r1, #1
 800a51e:	4355      	muls	r5, r2
 800a520:	460e      	mov	r6, r1
 800a522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a526:	f7ff fad5 	bl	8009ad4 <_malloc_r>
 800a52a:	4604      	mov	r4, r0
 800a52c:	b140      	cbz	r0, 800a540 <__sfmoreglue+0x28>
 800a52e:	2100      	movs	r1, #0
 800a530:	e9c0 1600 	strd	r1, r6, [r0]
 800a534:	300c      	adds	r0, #12
 800a536:	60a0      	str	r0, [r4, #8]
 800a538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a53c:	f7ff f9e4 	bl	8009908 <memset>
 800a540:	4620      	mov	r0, r4
 800a542:	bd70      	pop	{r4, r5, r6, pc}

0800a544 <__sfp_lock_acquire>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__sfp_lock_acquire+0x8>)
 800a546:	f000 b8b3 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a54a:	bf00      	nop
 800a54c:	200015bd 	.word	0x200015bd

0800a550 <__sfp_lock_release>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sfp_lock_release+0x8>)
 800a552:	f000 b8ae 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a556:	bf00      	nop
 800a558:	200015bd 	.word	0x200015bd

0800a55c <__sinit_lock_acquire>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__sinit_lock_acquire+0x8>)
 800a55e:	f000 b8a7 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a562:	bf00      	nop
 800a564:	200015be 	.word	0x200015be

0800a568 <__sinit_lock_release>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__sinit_lock_release+0x8>)
 800a56a:	f000 b8a2 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a56e:	bf00      	nop
 800a570:	200015be 	.word	0x200015be

0800a574 <__sinit>:
 800a574:	b510      	push	{r4, lr}
 800a576:	4604      	mov	r4, r0
 800a578:	f7ff fff0 	bl	800a55c <__sinit_lock_acquire>
 800a57c:	69a3      	ldr	r3, [r4, #24]
 800a57e:	b11b      	cbz	r3, 800a588 <__sinit+0x14>
 800a580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a584:	f7ff bff0 	b.w	800a568 <__sinit_lock_release>
 800a588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a58c:	6523      	str	r3, [r4, #80]	; 0x50
 800a58e:	4b13      	ldr	r3, [pc, #76]	; (800a5dc <__sinit+0x68>)
 800a590:	4a13      	ldr	r2, [pc, #76]	; (800a5e0 <__sinit+0x6c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	62a2      	str	r2, [r4, #40]	; 0x28
 800a596:	42a3      	cmp	r3, r4
 800a598:	bf08      	it	eq
 800a59a:	2301      	moveq	r3, #1
 800a59c:	4620      	mov	r0, r4
 800a59e:	bf08      	it	eq
 800a5a0:	61a3      	streq	r3, [r4, #24]
 800a5a2:	f000 f81f 	bl	800a5e4 <__sfp>
 800a5a6:	6060      	str	r0, [r4, #4]
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 f81b 	bl	800a5e4 <__sfp>
 800a5ae:	60a0      	str	r0, [r4, #8]
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 f817 	bl	800a5e4 <__sfp>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	2104      	movs	r1, #4
 800a5ba:	60e0      	str	r0, [r4, #12]
 800a5bc:	6860      	ldr	r0, [r4, #4]
 800a5be:	f7ff ff81 	bl	800a4c4 <std>
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	2109      	movs	r1, #9
 800a5c6:	68a0      	ldr	r0, [r4, #8]
 800a5c8:	f7ff ff7c 	bl	800a4c4 <std>
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	2112      	movs	r1, #18
 800a5d0:	68e0      	ldr	r0, [r4, #12]
 800a5d2:	f7ff ff77 	bl	800a4c4 <std>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	61a3      	str	r3, [r4, #24]
 800a5da:	e7d1      	b.n	800a580 <__sinit+0xc>
 800a5dc:	0800b268 	.word	0x0800b268
 800a5e0:	0800a50d 	.word	0x0800a50d

0800a5e4 <__sfp>:
 800a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	f7ff ffac 	bl	800a544 <__sfp_lock_acquire>
 800a5ec:	4b1e      	ldr	r3, [pc, #120]	; (800a668 <__sfp+0x84>)
 800a5ee:	681e      	ldr	r6, [r3, #0]
 800a5f0:	69b3      	ldr	r3, [r6, #24]
 800a5f2:	b913      	cbnz	r3, 800a5fa <__sfp+0x16>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff ffbd 	bl	800a574 <__sinit>
 800a5fa:	3648      	adds	r6, #72	; 0x48
 800a5fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a600:	3b01      	subs	r3, #1
 800a602:	d503      	bpl.n	800a60c <__sfp+0x28>
 800a604:	6833      	ldr	r3, [r6, #0]
 800a606:	b30b      	cbz	r3, 800a64c <__sfp+0x68>
 800a608:	6836      	ldr	r6, [r6, #0]
 800a60a:	e7f7      	b.n	800a5fc <__sfp+0x18>
 800a60c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a610:	b9d5      	cbnz	r5, 800a648 <__sfp+0x64>
 800a612:	4b16      	ldr	r3, [pc, #88]	; (800a66c <__sfp+0x88>)
 800a614:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a618:	60e3      	str	r3, [r4, #12]
 800a61a:	6665      	str	r5, [r4, #100]	; 0x64
 800a61c:	f000 f847 	bl	800a6ae <__retarget_lock_init_recursive>
 800a620:	f7ff ff96 	bl	800a550 <__sfp_lock_release>
 800a624:	2208      	movs	r2, #8
 800a626:	4629      	mov	r1, r5
 800a628:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a62c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a630:	6025      	str	r5, [r4, #0]
 800a632:	61a5      	str	r5, [r4, #24]
 800a634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a638:	f7ff f966 	bl	8009908 <memset>
 800a63c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a644:	4620      	mov	r0, r4
 800a646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a648:	3468      	adds	r4, #104	; 0x68
 800a64a:	e7d9      	b.n	800a600 <__sfp+0x1c>
 800a64c:	2104      	movs	r1, #4
 800a64e:	4638      	mov	r0, r7
 800a650:	f7ff ff62 	bl	800a518 <__sfmoreglue>
 800a654:	4604      	mov	r4, r0
 800a656:	6030      	str	r0, [r6, #0]
 800a658:	2800      	cmp	r0, #0
 800a65a:	d1d5      	bne.n	800a608 <__sfp+0x24>
 800a65c:	f7ff ff78 	bl	800a550 <__sfp_lock_release>
 800a660:	230c      	movs	r3, #12
 800a662:	603b      	str	r3, [r7, #0]
 800a664:	e7ee      	b.n	800a644 <__sfp+0x60>
 800a666:	bf00      	nop
 800a668:	0800b268 	.word	0x0800b268
 800a66c:	ffff0001 	.word	0xffff0001

0800a670 <_fwalk_reent>:
 800a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	4688      	mov	r8, r1
 800a678:	2700      	movs	r7, #0
 800a67a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a67e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a682:	f1b9 0901 	subs.w	r9, r9, #1
 800a686:	d505      	bpl.n	800a694 <_fwalk_reent+0x24>
 800a688:	6824      	ldr	r4, [r4, #0]
 800a68a:	2c00      	cmp	r4, #0
 800a68c:	d1f7      	bne.n	800a67e <_fwalk_reent+0xe>
 800a68e:	4638      	mov	r0, r7
 800a690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a694:	89ab      	ldrh	r3, [r5, #12]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d907      	bls.n	800a6aa <_fwalk_reent+0x3a>
 800a69a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	d003      	beq.n	800a6aa <_fwalk_reent+0x3a>
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	47c0      	blx	r8
 800a6a8:	4307      	orrs	r7, r0
 800a6aa:	3568      	adds	r5, #104	; 0x68
 800a6ac:	e7e9      	b.n	800a682 <_fwalk_reent+0x12>

0800a6ae <__retarget_lock_init_recursive>:
 800a6ae:	4770      	bx	lr

0800a6b0 <__retarget_lock_acquire_recursive>:
 800a6b0:	4770      	bx	lr

0800a6b2 <__retarget_lock_release_recursive>:
 800a6b2:	4770      	bx	lr

0800a6b4 <__swhatbuf_r>:
 800a6b4:	b570      	push	{r4, r5, r6, lr}
 800a6b6:	460e      	mov	r6, r1
 800a6b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6bc:	4614      	mov	r4, r2
 800a6be:	2900      	cmp	r1, #0
 800a6c0:	461d      	mov	r5, r3
 800a6c2:	b096      	sub	sp, #88	; 0x58
 800a6c4:	da08      	bge.n	800a6d8 <__swhatbuf_r+0x24>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6cc:	602a      	str	r2, [r5, #0]
 800a6ce:	061a      	lsls	r2, r3, #24
 800a6d0:	d410      	bmi.n	800a6f4 <__swhatbuf_r+0x40>
 800a6d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6d6:	e00e      	b.n	800a6f6 <__swhatbuf_r+0x42>
 800a6d8:	466a      	mov	r2, sp
 800a6da:	f000 f915 	bl	800a908 <_fstat_r>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	dbf1      	blt.n	800a6c6 <__swhatbuf_r+0x12>
 800a6e2:	9a01      	ldr	r2, [sp, #4]
 800a6e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6ec:	425a      	negs	r2, r3
 800a6ee:	415a      	adcs	r2, r3
 800a6f0:	602a      	str	r2, [r5, #0]
 800a6f2:	e7ee      	b.n	800a6d2 <__swhatbuf_r+0x1e>
 800a6f4:	2340      	movs	r3, #64	; 0x40
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	b016      	add	sp, #88	; 0x58
 800a6fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a700 <__smakebuf_r>:
 800a700:	898b      	ldrh	r3, [r1, #12]
 800a702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a704:	079d      	lsls	r5, r3, #30
 800a706:	4606      	mov	r6, r0
 800a708:	460c      	mov	r4, r1
 800a70a:	d507      	bpl.n	800a71c <__smakebuf_r+0x1c>
 800a70c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	2301      	movs	r3, #1
 800a716:	6163      	str	r3, [r4, #20]
 800a718:	b002      	add	sp, #8
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	466a      	mov	r2, sp
 800a71e:	ab01      	add	r3, sp, #4
 800a720:	f7ff ffc8 	bl	800a6b4 <__swhatbuf_r>
 800a724:	9900      	ldr	r1, [sp, #0]
 800a726:	4605      	mov	r5, r0
 800a728:	4630      	mov	r0, r6
 800a72a:	f7ff f9d3 	bl	8009ad4 <_malloc_r>
 800a72e:	b948      	cbnz	r0, 800a744 <__smakebuf_r+0x44>
 800a730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a734:	059a      	lsls	r2, r3, #22
 800a736:	d4ef      	bmi.n	800a718 <__smakebuf_r+0x18>
 800a738:	f023 0303 	bic.w	r3, r3, #3
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	e7e3      	b.n	800a70c <__smakebuf_r+0xc>
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <__smakebuf_r+0x7c>)
 800a746:	62b3      	str	r3, [r6, #40]	; 0x28
 800a748:	89a3      	ldrh	r3, [r4, #12]
 800a74a:	6020      	str	r0, [r4, #0]
 800a74c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	9b00      	ldr	r3, [sp, #0]
 800a754:	6120      	str	r0, [r4, #16]
 800a756:	6163      	str	r3, [r4, #20]
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	b15b      	cbz	r3, 800a774 <__smakebuf_r+0x74>
 800a75c:	4630      	mov	r0, r6
 800a75e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a762:	f000 f8e3 	bl	800a92c <_isatty_r>
 800a766:	b128      	cbz	r0, 800a774 <__smakebuf_r+0x74>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	f043 0301 	orr.w	r3, r3, #1
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	89a0      	ldrh	r0, [r4, #12]
 800a776:	4305      	orrs	r5, r0
 800a778:	81a5      	strh	r5, [r4, #12]
 800a77a:	e7cd      	b.n	800a718 <__smakebuf_r+0x18>
 800a77c:	0800a50d 	.word	0x0800a50d

0800a780 <memchr>:
 800a780:	4603      	mov	r3, r0
 800a782:	b510      	push	{r4, lr}
 800a784:	b2c9      	uxtb	r1, r1
 800a786:	4402      	add	r2, r0
 800a788:	4293      	cmp	r3, r2
 800a78a:	4618      	mov	r0, r3
 800a78c:	d101      	bne.n	800a792 <memchr+0x12>
 800a78e:	2000      	movs	r0, #0
 800a790:	e003      	b.n	800a79a <memchr+0x1a>
 800a792:	7804      	ldrb	r4, [r0, #0]
 800a794:	3301      	adds	r3, #1
 800a796:	428c      	cmp	r4, r1
 800a798:	d1f6      	bne.n	800a788 <memchr+0x8>
 800a79a:	bd10      	pop	{r4, pc}

0800a79c <__malloc_lock>:
 800a79c:	4801      	ldr	r0, [pc, #4]	; (800a7a4 <__malloc_lock+0x8>)
 800a79e:	f7ff bf87 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a7a2:	bf00      	nop
 800a7a4:	200015bc 	.word	0x200015bc

0800a7a8 <__malloc_unlock>:
 800a7a8:	4801      	ldr	r0, [pc, #4]	; (800a7b0 <__malloc_unlock+0x8>)
 800a7aa:	f7ff bf82 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a7ae:	bf00      	nop
 800a7b0:	200015bc 	.word	0x200015bc

0800a7b4 <_raise_r>:
 800a7b4:	291f      	cmp	r1, #31
 800a7b6:	b538      	push	{r3, r4, r5, lr}
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	460d      	mov	r5, r1
 800a7bc:	d904      	bls.n	800a7c8 <_raise_r+0x14>
 800a7be:	2316      	movs	r3, #22
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}
 800a7c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7ca:	b112      	cbz	r2, 800a7d2 <_raise_r+0x1e>
 800a7cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7d0:	b94b      	cbnz	r3, 800a7e6 <_raise_r+0x32>
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 f830 	bl	800a838 <_getpid_r>
 800a7d8:	462a      	mov	r2, r5
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e2:	f000 b817 	b.w	800a814 <_kill_r>
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d00a      	beq.n	800a800 <_raise_r+0x4c>
 800a7ea:	1c59      	adds	r1, r3, #1
 800a7ec:	d103      	bne.n	800a7f6 <_raise_r+0x42>
 800a7ee:	2316      	movs	r3, #22
 800a7f0:	6003      	str	r3, [r0, #0]
 800a7f2:	2001      	movs	r0, #1
 800a7f4:	e7e7      	b.n	800a7c6 <_raise_r+0x12>
 800a7f6:	2400      	movs	r4, #0
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7fe:	4798      	blx	r3
 800a800:	2000      	movs	r0, #0
 800a802:	e7e0      	b.n	800a7c6 <_raise_r+0x12>

0800a804 <raise>:
 800a804:	4b02      	ldr	r3, [pc, #8]	; (800a810 <raise+0xc>)
 800a806:	4601      	mov	r1, r0
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	f7ff bfd3 	b.w	800a7b4 <_raise_r>
 800a80e:	bf00      	nop
 800a810:	2000001c 	.word	0x2000001c

0800a814 <_kill_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	2300      	movs	r3, #0
 800a818:	4d06      	ldr	r5, [pc, #24]	; (800a834 <_kill_r+0x20>)
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	602b      	str	r3, [r5, #0]
 800a822:	f7f8 f994 	bl	8002b4e <_kill>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	d102      	bne.n	800a830 <_kill_r+0x1c>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	b103      	cbz	r3, 800a830 <_kill_r+0x1c>
 800a82e:	6023      	str	r3, [r4, #0]
 800a830:	bd38      	pop	{r3, r4, r5, pc}
 800a832:	bf00      	nop
 800a834:	200015c0 	.word	0x200015c0

0800a838 <_getpid_r>:
 800a838:	f7f8 b982 	b.w	8002b40 <_getpid>

0800a83c <__sread>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	460c      	mov	r4, r1
 800a840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a844:	f000 f894 	bl	800a970 <_read_r>
 800a848:	2800      	cmp	r0, #0
 800a84a:	bfab      	itete	ge
 800a84c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a84e:	89a3      	ldrhlt	r3, [r4, #12]
 800a850:	181b      	addge	r3, r3, r0
 800a852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a856:	bfac      	ite	ge
 800a858:	6563      	strge	r3, [r4, #84]	; 0x54
 800a85a:	81a3      	strhlt	r3, [r4, #12]
 800a85c:	bd10      	pop	{r4, pc}

0800a85e <__swrite>:
 800a85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a862:	461f      	mov	r7, r3
 800a864:	898b      	ldrh	r3, [r1, #12]
 800a866:	4605      	mov	r5, r0
 800a868:	05db      	lsls	r3, r3, #23
 800a86a:	460c      	mov	r4, r1
 800a86c:	4616      	mov	r6, r2
 800a86e:	d505      	bpl.n	800a87c <__swrite+0x1e>
 800a870:	2302      	movs	r3, #2
 800a872:	2200      	movs	r2, #0
 800a874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a878:	f000 f868 	bl	800a94c <_lseek_r>
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	4632      	mov	r2, r6
 800a880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a884:	81a3      	strh	r3, [r4, #12]
 800a886:	4628      	mov	r0, r5
 800a888:	463b      	mov	r3, r7
 800a88a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a88e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a892:	f000 b817 	b.w	800a8c4 <_write_r>

0800a896 <__sseek>:
 800a896:	b510      	push	{r4, lr}
 800a898:	460c      	mov	r4, r1
 800a89a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a89e:	f000 f855 	bl	800a94c <_lseek_r>
 800a8a2:	1c43      	adds	r3, r0, #1
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	bf15      	itete	ne
 800a8a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8b2:	81a3      	strheq	r3, [r4, #12]
 800a8b4:	bf18      	it	ne
 800a8b6:	81a3      	strhne	r3, [r4, #12]
 800a8b8:	bd10      	pop	{r4, pc}

0800a8ba <__sclose>:
 800a8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8be:	f000 b813 	b.w	800a8e8 <_close_r>
	...

0800a8c4 <_write_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	4d05      	ldr	r5, [pc, #20]	; (800a8e4 <_write_r+0x20>)
 800a8d0:	602a      	str	r2, [r5, #0]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f7f8 f972 	bl	8002bbc <_write>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_write_r+0x1e>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_write_r+0x1e>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	200015c0 	.word	0x200015c0

0800a8e8 <_close_r>:
 800a8e8:	b538      	push	{r3, r4, r5, lr}
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	4d05      	ldr	r5, [pc, #20]	; (800a904 <_close_r+0x1c>)
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	4608      	mov	r0, r1
 800a8f2:	602b      	str	r3, [r5, #0]
 800a8f4:	f7f8 f97e 	bl	8002bf4 <_close>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_close_r+0x1a>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_close_r+0x1a>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	200015c0 	.word	0x200015c0

0800a908 <_fstat_r>:
 800a908:	b538      	push	{r3, r4, r5, lr}
 800a90a:	2300      	movs	r3, #0
 800a90c:	4d06      	ldr	r5, [pc, #24]	; (800a928 <_fstat_r+0x20>)
 800a90e:	4604      	mov	r4, r0
 800a910:	4608      	mov	r0, r1
 800a912:	4611      	mov	r1, r2
 800a914:	602b      	str	r3, [r5, #0]
 800a916:	f7f8 f978 	bl	8002c0a <_fstat>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	d102      	bne.n	800a924 <_fstat_r+0x1c>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	b103      	cbz	r3, 800a924 <_fstat_r+0x1c>
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	bd38      	pop	{r3, r4, r5, pc}
 800a926:	bf00      	nop
 800a928:	200015c0 	.word	0x200015c0

0800a92c <_isatty_r>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	2300      	movs	r3, #0
 800a930:	4d05      	ldr	r5, [pc, #20]	; (800a948 <_isatty_r+0x1c>)
 800a932:	4604      	mov	r4, r0
 800a934:	4608      	mov	r0, r1
 800a936:	602b      	str	r3, [r5, #0]
 800a938:	f7f8 f976 	bl	8002c28 <_isatty>
 800a93c:	1c43      	adds	r3, r0, #1
 800a93e:	d102      	bne.n	800a946 <_isatty_r+0x1a>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	b103      	cbz	r3, 800a946 <_isatty_r+0x1a>
 800a944:	6023      	str	r3, [r4, #0]
 800a946:	bd38      	pop	{r3, r4, r5, pc}
 800a948:	200015c0 	.word	0x200015c0

0800a94c <_lseek_r>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	2200      	movs	r2, #0
 800a956:	4d05      	ldr	r5, [pc, #20]	; (800a96c <_lseek_r+0x20>)
 800a958:	602a      	str	r2, [r5, #0]
 800a95a:	461a      	mov	r2, r3
 800a95c:	f7f8 f96e 	bl	8002c3c <_lseek>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_lseek_r+0x1e>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_lseek_r+0x1e>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	200015c0 	.word	0x200015c0

0800a970 <_read_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	4604      	mov	r4, r0
 800a974:	4608      	mov	r0, r1
 800a976:	4611      	mov	r1, r2
 800a978:	2200      	movs	r2, #0
 800a97a:	4d05      	ldr	r5, [pc, #20]	; (800a990 <_read_r+0x20>)
 800a97c:	602a      	str	r2, [r5, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f7f8 f8ff 	bl	8002b82 <_read>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_read_r+0x1e>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_read_r+0x1e>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	200015c0 	.word	0x200015c0

0800a994 <_init>:
 800a994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a996:	bf00      	nop
 800a998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99a:	bc08      	pop	{r3}
 800a99c:	469e      	mov	lr, r3
 800a99e:	4770      	bx	lr

0800a9a0 <_fini>:
 800a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a2:	bf00      	nop
 800a9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9a6:	bc08      	pop	{r3}
 800a9a8:	469e      	mov	lr, r3
 800a9aa:	4770      	bx	lr
